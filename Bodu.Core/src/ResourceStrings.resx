<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Arg_Invalid_ActionRequiresNull" xml:space="preserve">
    <value>{0} action must be initialized with no {1} items.</value>
  </data>
  <data name="Arg_Invalid_ArrayLength" xml:space="preserve">
    <value>Length of the array must be {0}.</value>
  </data>
  <data name="Arg_Invalid_ArrayTooShort" xml:space="preserve">
    <value>Array is too short. Required minimum is {0} from a specified index.</value>
  </data>
  <data name="Arg_Invalid_ArrayType" xml:space="preserve">
    <value>Target array type is not compatible with the type of items in the collection.</value>
  </data>
  <data name="Arg_Invalid_Array_NumericOnly" xml:space="preserve">
    <value>The array contains non-numeric values.</value>
  </data>
  <data name="Arg_Invalid_CollectionTooSmall" xml:space="preserve">
    <value>Collection contains insufficient elements.</value>
  </data>
  <data name="Arg_Invalid_ArrayLengthExceedsCapacity" xml:space="preserve">
    <value>The number of elements to copy exceeds the capacity available.</value>
  </data>
  <data name="Arg_Invalid_MaxIsLessThanSuffixLength" xml:space="preserve">
    <value>The max length of the string is less than the length of the suffix.</value>
  </data>
  <data name="Arg_Invalid_MustBeOfType" xml:space="preserve">
    <value>Object must be of type {0}.</value>
  </data>
  <data name="Arg_Invalid_ArrayNonZeroLowerBound" xml:space="preserve">
    <value>The lower bound of target array must be zero.</value>
  </data>
  <data name="Arg_Invalid_ArrayOffsetOrLength" xml:space="preserve">
    <value>The sum of {0} and {1} exceeds the number of elements in the {2}.</value>
  </data>
  <data name="Arg_Invalid_PositiveMultipleOf" xml:space="preserve">
    <value>The value must be a positive number and a multiple of {0}.</value>
  </data>
  <data name="Arg_Invalid_StringComparison" xml:space="preserve">
    <value>The string comparison type is not supported.</value>
  </data>
  <data name="Arg_Invalid_StringEmptyOrWhitespace" xml:space="preserve">
    <value>The string was either empty or contained only whitespace.</value>
  </data>
  <data name="Arg_Invalid_StringMustBeDigits" xml:space="preserve">
    <value>The string must only contain numerical digits.</value>
  </data>
  <data name="Arg_Invalid_StringNullOrEmpty" xml:space="preserve">
    <value>The string was either null or empty.</value>
  </data>
  <data name="Arg_Invalid_EnumValue" xml:space="preserve">
    <value>The value is not a valid member of {0}.</value>
  </data>
  <data name="Arg_Invalid_WrongAction2ForCtor" xml:space="preserve">
    <value>Constructor supports only the '{string action1}' or '{string action2} actions.</value>
  </data>
  <data name="Arg_Invalid_WrongAction3ForCtor" xml:space="preserve">
    <value>Constructor supports only the '{string action1}', '{string action2} or '{string action3} actions.</value>
  </data>
  <data name="Arg_Invalid_WrongActionForCtor" xml:space="preserve">
    <value>Constructor supports only the '{string action}' action.</value>
  </data>
  <data name="Arg_OutOfRange_BadHourMinuteSecond" xml:space="preserve">
    <value>Hour, Minute, and Second parameters describe an un-representable DateTime.</value>
  </data>
  <data name="Arg_OutOfRange_BadYearMonthDay" xml:space="preserve">
    <value>Year, Month, and Day parameters describe an un-representable DateTime.</value>
  </data>
  <data name="Arg_OutOfRange_IndexValidRange" xml:space="preserve">
    <value>The index must be non-negative and less than the size of {0}.</value>
  </data>
  <data name="Arg_OutOfRange_MinCannotExceedMax" xml:space="preserve">
    <value>The value cannot be greater than the value for {0}.</value>
  </data>
  <data name="Arg_OutOfRange_RequireGreaterThanOrEqual" xml:space="preserve">
    <value>The value must be greater than or equal to {0}.</value>
  </data>
  <data name="Arg_OutOfRange_RequireGreaterThan" xml:space="preserve">
    <value>The value must be greater than {0}.</value>
  </data>
  <data name="Arg_OutOfRange_RequireLessThan" xml:space="preserve">
    <value>The value must be less than {0}.</value>
  </data>
  <data name="Arg_OutOfRange_RequireLessThanOrEqual" xml:space="preserve">
    <value>The value must be less than or equal to {0}.</value>
  </data>
  <data name="Arg_OutOfRange_RequireBetweenInclusive" xml:space="preserve">
    <value>The value must be between {0} and {1}, inclusive.</value>
  </data>
  <data name="Arg_Params_ContainsNullValue" xml:space="preserve">
    <value>The value collection contains one or more null elements.</value>
  </data>
  <data name="Arg_Invalid_SingleSurrogateCharacter" xml:space="preserve">
    <value>The value is a single Unicode surrogate character, which must be written as a pair. Consider passing a character array instead.</value>
  </data>
  <data name="Arg_Invalid_Conversion" xml:space="preserve">
    <value>The value cannot be converted to type {0}.</value>
  </data>
  <data name="Format_FileSize_Unrecognized" xml:space="preserve">
    <value>Unrecognized file size format.</value>
  </data>
  <data name="Format_Invalid_7BitInt32" xml:space="preserve">
    <value>Too many bytes in what should have been a 7 bit encoded Int32.</value>
  </data>
  <data name="Format_Invalid_String" xml:space="preserve">
    <value>Input string was not in the correct format.</value>
  </data>
  <data name="Format_Invalid_WeekDays" xml:space="preserve">
    <value>Unrecognized week days format.</value>
  </data>
  <data name="Format_Invalid_WeekDaysFormatSpecification" xml:space="preserve">
    <value>Format String can only be "S", "s", "M", "m", 'B', b'.</value>
  </data>
  <data name="IO_Error_PathDirectoryNotFound" xml:space="preserve">
    <value>Could not find directory '{0}'.</value>
  </data>
  <data name="IO_Error_PathFileNotFound" xml:space="preserve">
    <value>Could not find file '{0}'.</value>
  </data>
  <data name="IO_Error_StreamReadBeyondEnd" xml:space="preserve">
    <value>Unable to read beyond the end of the stream.</value>
  </data>
  <data name="IO_Error_StreamClosed" xml:space="preserve">
    <value>Cannot access a closed stream.</value>
  </data>
  <data name="IO_Error_StreamNotReadable" xml:space="preserve">
    <value>The stream is not readable.</value>
  </data>
  <data name="IO_Error_StreamNotWritable" xml:space="preserve">
    <value>The stream is not writable.</value>
  </data>
  <data name="InvalidOperation_CapacityExhausted" xml:space="preserve">
    <value>The capacity has been exhausted.</value>
  </data>
  <data name="InvalidOperation_CollectionEmpty" xml:space="preserve">
    <value>The collection is empty.</value>
  </data>
  <data name="InvalidOperation_CollectionModified" xml:space="preserve">
    <value>The collection was modified; enumerator operations may not execute.</value>
  </data>
  <data name="InvalidOperation_EnumeratorExhausted" xml:space="preserve">
    <value>The enumerator has been exhausted.</value>
  </data>
  <data name="InvalidOperation_EnumeratorPositionOutOfRange" xml:space="preserve">
    <value>The enumerator is positioned before the first element or after the last element of the collection.</value>
  </data>
  <data name="InvalidOperation_InvalidConversion" xml:space="preserve">
    <value>Unable to convert type {0} to {1}.</value>
  </data>
  <data name="InvalidOperation_SequenceNoMatch" xml:space="preserve">
    <value>The sequence contains no matching elements.</value>
  </data>
  <data name="InvalidOperation_ReentrancyNotAllowed" xml:space="preserve">
    <value>Cannot modify the collection during a change notification event.</value>
  </data>
  <data name="InvalidOperation_TimeoutAlreadyEstablished" xml:space="preserve">
    <value>The timeout cannot be changed after the lock has already been established.</value>
  </data>
  <data name="NotSupported_CryptoTransform_UnableToTransformMultipleBlocks" xml:space="preserve">
    <value>HashAlgorithm does not support transforming multiple blocks.</value>
  </data>
  <data name="Overflow_NegatingTwosComplementNumber" xml:space="preserve">
    <value>Negating the minimum value of a two's complement number is invalid.</value>
  </data>
  <data name="Rank_MultiDimensionArrayNotSupported" xml:space="preserve">
    <value>Only single dimension arrays are supported here.</value>
  </data>
  <data name="InvalidOperation_SequenceContainsInvalidElement" xml:space="preserve">
    <value>The sequence contains an invalid item.</value>
  </data>
  <data name="String_Number_Bytes" xml:space="preserve">
    <value>Bytes</value>
  </data>
  <data name="String_Number_Exabytes" xml:space="preserve">
    <value>Exabytes</value>
  </data>
  <data name="String_Number_Gigabytes" xml:space="preserve">
    <value>Gigabytes</value>
  </data>
  <data name="String_Number_Kilobytes" xml:space="preserve">
    <value>Kilobytes</value>
  </data>
  <data name="String_Number_Megabytes" xml:space="preserve">
    <value>Megabytes</value>
  </data>
  <data name="String_Ordinal_Eighth" xml:space="preserve">
    <value>Eighth</value>
  </data>
  <data name="String_Ordinal_First" xml:space="preserve">
    <value>First</value>
  </data>
  <data name="String_Ordinal_Fith" xml:space="preserve">
    <value>Fifth</value>
  </data>
  <data name="String_Ordinal_Fourth" xml:space="preserve">
    <value>Fourth</value>
  </data>
  <data name="String_Ordinal_Last" xml:space="preserve">
    <value>Last</value>
  </data>
  <data name="String_Ordinal_Ninth" xml:space="preserve">
    <value>Ninth</value>
  </data>
  <data name="String_Ordinal_Second" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="String_Ordinal_Seventh" xml:space="preserve">
    <value>Seventh</value>
  </data>
  <data name="String_Ordinal_Sixth" xml:space="preserve">
    <value>Sixth</value>
  </data>
  <data name="String_Ordinal_Tenth" xml:space="preserve">
    <value>Tenth</value>
  </data>
  <data name="String_Ordinal_Third" xml:space="preserve">
    <value>Third</value>
  </data>
  <data name="String_Number_Petabytes" xml:space="preserve">
    <value>Petabytes</value>
  </data>
  <data name="String_Number_Terabytes" xml:space="preserve">
    <value>Terabytes</value>
  </data>
  <data name="String_VowelCharacters" xml:space="preserve">
    <value>AEUIOU</value>
  </data>
  <data name="String_Number_Zettabytes" xml:space="preserve">
    <value>Zettabytes</value>
  </data>
  <data name="Arg_OutOfRange_RequireBetweenExclusive" xml:space="preserve">
    <value>The value must be greater than {0} and less than {1}.</value>
  </data>
  <data name="Arg_OutOfRange_RequireNegative" xml:space="preserve">
    <value>The value must be a negative number.</value>
  </data>
  <data name="Arg_OutOfRange_RequireNonNegative" xml:space="preserve">
    <value>The value must be zero or positive.</value>
  </data>
  <data name="Arg_OutOfRange_RequireNonPositive" xml:space="preserve">
    <value>The value must be zero or negative.</value>
  </data>
  <data name="Arg_OutOfRange_RequireNonZero" xml:space="preserve">
    <value>The value must not be zero.</value>
  </data>
  <data name="Arg_OutOfRange_RequirePositive" xml:space="preserve">
    <value>The value must be a positive number.</value>
  </data>
  <data name="Arg_OutOfRange_RequireZero" xml:space="preserve">
    <value>The value must be zero.</value>
  </data>
  <data name="Arg_Invalid_GreaterThanOtherParameter" xml:space="preserve">
    <value>The value must not be greater than the value of {0}.</value>
  </data>
  <data name="InvalidOperation_EmptySequence" xml:space="preserve">
    <value>The operation could not be completed because the sequence is empty.</value>
  </data>
  <data name="Arg_Invalid_ArrayIsZeroLength" xml:space="preserve">
    <value>The provided array has zero length. Length must be greater than zero.</value>
  </data>
  <data name="Arg_Invalid_SpanTooShort" xml:space="preserve">
    <value>Span is too short. Required minimum is {0} from a specified index.</value>
  </data>
  <data name="Arg_Invalid_ArrayLengthMultipleOf" xml:space="preserve">
    <value>Length of the array must be a multiple of {0}.</value>
  </data>
  <data name="Arg_Invalid_SpanLengthMultipleOf" xml:space="preserve">
    <value>Length of the Span must be a multiple of {0}.</value>
  </data>
  <data name="Arg_Invalid_GreaterThanOrEqualOtherParameter" xml:space="preserve">
    <value>The value must not be greater than or equal to the value of {0}.</value>
  </data>
  <data name="Arg_Exception_ParameterRequiredIf" xml:space="preserve">
    <value>A value for '{0}' must be provided when '{1}' is  {2}.</value>
  </data>
  <data name="Arg_Invalid_LessThanOrEqualOtherParameter" xml:space="preserve">
    <value>The value must not be less than or equal to the value of {0}.</value>
  </data>
  <data name="Arg_Invalid_LessThanOtherParameter" xml:space="preserve">
    <value>The value must not be less than the value of {0}.</value>
  </data>
  <data name="Arg_OutOfRange_CountGreaterThanSource" xml:space="preserve">
    <value>Source has fewer elements than requested.</value>
  </data>
  <data name="Arg_Invalid_OrdinalDoesNotExistForMonth" xml:space="preserve">
    <value>The ordinal '{0}' does not exist for {1} in {2}."</value>
  </data>
  <data name="Arg_OutOfRange_ResultingDateTimeOutOfRange" xml:space="preserve">
    <value>Resulting DateTime is outside the valid range.</value>
  </data>
  <data name="Arg_OutOfRange_InvalidMonthNumber" xml:space="preserve">
    <value>The month number must be between 1 and 12.</value>
  </data>
  <data name="Arg_OutOfRange_InvalidQuarterNumber" xml:space="preserve">
    <value>The quarter number must be between 1 and 4.</value>
  </data>
  <data name="Arg_Invalid_ArrayOffset" xml:space="preserve">
    <value>The value must zero or positive, and less than the number of elements in the {0}.</value>
  </data>
  <data name="Arg_OutOfRange_SequenceRangeOverflow" xml:space="preserve">
    <value>The specified sequence range would exceed the allowable value for {0}.</value>
  </data>
</root>