### YamlMime:ManagedReference
items:
- uid: Bodu.Collections.Generic.EvictingDictionary`2
  commentId: T:Bodu.Collections.Generic.EvictingDictionary`2
  id: EvictingDictionary`2
  parent: Bodu.Collections.Generic
  children:
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},Bodu.Collections.Generic.EvictionPolicy)
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy)
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32)
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy)
  - Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})
  - Bodu.Collections.Generic.EvictingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
  - Bodu.Collections.Generic.EvictingDictionary`2.Capacity
  - Bodu.Collections.Generic.EvictingDictionary`2.Clear
  - Bodu.Collections.Generic.EvictingDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - Bodu.Collections.Generic.EvictingDictionary`2.ContainsKey(`0)
  - Bodu.Collections.Generic.EvictingDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - Bodu.Collections.Generic.EvictingDictionary`2.Count
  - Bodu.Collections.Generic.EvictingDictionary`2.EvictionCount
  - Bodu.Collections.Generic.EvictingDictionary`2.GetEnumerator
  - Bodu.Collections.Generic.EvictingDictionary`2.IsReadOnly
  - Bodu.Collections.Generic.EvictingDictionary`2.Item(`0)
  - Bodu.Collections.Generic.EvictingDictionary`2.ItemEvicted
  - Bodu.Collections.Generic.EvictingDictionary`2.ItemEvicting
  - Bodu.Collections.Generic.EvictingDictionary`2.Keys
  - Bodu.Collections.Generic.EvictingDictionary`2.OrderedKeys
  - Bodu.Collections.Generic.EvictingDictionary`2.PeekEvictionCandidate
  - Bodu.Collections.Generic.EvictingDictionary`2.Policy
  - Bodu.Collections.Generic.EvictingDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
  - Bodu.Collections.Generic.EvictingDictionary`2.TotalTouches
  - Bodu.Collections.Generic.EvictingDictionary`2.Touch(`0)
  - Bodu.Collections.Generic.EvictingDictionary`2.TouchOrThrow(`0)
  - Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
  - Bodu.Collections.Generic.EvictingDictionary`2.Values
  langs:
  - csharp
  - vb
  name: EvictingDictionary<TKey, TValue>
  nameWithType: EvictingDictionary<TKey, TValue>
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>
  type: Class
  source:
    id: EvictingDictionary
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 11
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Represents a fixed-capacity dictionary that automatically removes entries based on a chosen eviction policy,

    such as First-In-First-Out (FIFO), Least Recently Used (LRU), or Least Frequently Used (LFU).
  remarks: >-
    <p>

    <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> maintains a maximum number of key-value pairs and automatically evicts items when capacity is exceeded.

    Eviction is determined by a specified <xref href="Bodu.Collections.Generic.EvictionPolicy" data-throw-if-not-resolved="false"></xref>, allowing this dictionary to behave like a queue, an access-order cache, or a frequency-based cache.

    </p>

    <p>

    The supported <xref href="Bodu.Collections.Generic.EvictionPolicy" data-throw-if-not-resolved="false"></xref> values are:

    </p>

    <ul><li><xref href="Bodu.Collections.Generic.EvictionPolicy.FIFO" data-throw-if-not-resolved="false"></xref> evicts the item that was added first, in first-in, first-out order.</li><li><xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref> evicts the least recently accessed item, updating the usage order on every read and write.</li><li><xref href="Bodu.Collections.Generic.EvictionPolicy.LFU" data-throw-if-not-resolved="false"></xref> evicts the least frequently accessed item, promoting items as their usage count increases.</li></ul>

    <p>

    Common operations supported by <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> include:

    </p>

    <ul><li><xref href="Bodu.Collections.Generic.EvictingDictionary%602.Add(%600%2c%601)" data-throw-if-not-resolved="false"></xref> adds a key-value pair and may evict an existing entry if the dictionary is at capacity.</li><li><xref href="Bodu.Collections.Generic.EvictingDictionary%602.TryGetValue(%600%2c%601%40)" data-throw-if-not-resolved="false"></xref> retrieves a value by key and updates its usage metadata if the policy is LRU or LFU.</li><li><xref href="Bodu.Collections.Generic.EvictingDictionary%602.Remove(%600)" data-throw-if-not-resolved="false"></xref> removes the entry for a specified key.</li><li><xref href="Bodu.Collections.Generic.EvictingDictionary%602.Clear" data-throw-if-not-resolved="false"></xref> removes all entries from the dictionary.</li></ul>

    <p>

    Unlike <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref>, this type ensures the total number of entries never exceeds the configured <xref href="Bodu.Collections.Generic.EvictingDictionary%602.Capacity" data-throw-if-not-resolved="false"></xref>.

    The eviction behavior makes it useful for caching scenarios, memory-bound lookup tables, or history-aware key-value stores.

    </p>

    <p>

    <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> allows <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> keys and values (for reference types) and supports custom key equality via <xref href="System.Collections.Generic.IEqualityComparer%601" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The following examples demonstrate typical usage scenarios for <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref>.

    </p>


    <example>


    <pre><code class="lang-csharp">using System;

    using Bodu.CoreLib.Collections.Generic;


    // Example 1: Basic FIFO cache

    var cache = new EvictingDictionary&lt;string, int&gt;(capacity: 3, policy: EvictionPolicy.FIFO);

    cache.Add("one", 1);

    cache.Add("two", 2);

    cache.Add("three", 3);

    cache.Add("four", 4); // "one" is evicted (FIFO)


    Console.WriteLine(cache.ContainsKey("one"));   // False

    Console.WriteLine(cache.ContainsKey("four"));  // True</code></pre>

    </example>


    <example>


    <pre><code class="lang-csharp">// Example 2: Least Recently Used (LRU) behavior

    var lruCache = new EvictingDictionary&lt;string, string&gt;(3, EvictionPolicy.LRU);

    lruCache.Add("A", "Apple");

    lruCache.Add("B", "Banana");

    lruCache.Add("C", "Carrot");


    var _ = lruCache["A"]; // Access "A" to make it most recently used

    lruCache.Add("D", "Date"); // Evicts "B" (least recently used)


    Console.WriteLine(lruCache.ContainsKey("B")); // False

    Console.WriteLine(lruCache.ContainsKey("A")); // True</code></pre>

    </example>


    <example>


    <pre><code class="lang-csharp">// Example 3: Least Frequently Used (LFU) behavior

    var lfuCache = new EvictingDictionary&lt;int, string&gt;(2, EvictionPolicy.LFU);

    lfuCache.Add(1, "one");

    lfuCache.Add(2, "two");


    // Access 1 multiple times

    var temp = lfuCache[1];

    temp = lfuCache[1];


    // Add a third item, triggering LFU eviction

    lfuCache.Add(3, "three"); // Evicts 2 (less frequently accessed than 1)


    Console.WriteLine(lfuCache.ContainsKey(2)); // False

    Console.WriteLine(lfuCache.ContainsKey(1)); // True</code></pre>

    </example>


    <example>


    <pre><code class="lang-csharp">// Example 4: Using custom equality comparer

    var ignoreCaseDict = new EvictingDictionary&lt;string, string&gt;(
        capacity: 2,
        policy: EvictionPolicy.LRU,
        comparer: StringComparer.OrdinalIgnoreCase
    );


    ignoreCaseDict["Key"] = "Value";

    Console.WriteLine(ignoreCaseDict.ContainsKey("key")); // True</code></pre>

    </example>
  example: []
  syntax:
    content: >-
      [Serializable]

      public class EvictingDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable where TKey : notnull
    typeParameters:
    - id: TKey
      description: Specifies the type of keys in the dictionary.
    - id: TValue
      description: Specifies the type of values in the dictionary.
    content.vb: >-
      <Serializable>

      Public Class EvictingDictionary(Of TKey, TValue) Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IDictionary, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: EvictingDictionary(Of TKey, TValue)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue)
  name.vb: EvictingDictionary(Of TKey, TValue)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Capacity
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Capacity
  id: Capacity
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: EvictingDictionary<TKey, TValue>.Capacity
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Capacity
  type: Property
  source:
    id: Capacity
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 179
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets the maximum number of items that can be stored in the dictionary before eviction occurs.
  example: []
  syntax:
    content: public int Capacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Capacity As Integer
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Capacity*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Capacity
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Capacity
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Policy
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Policy
  id: Policy
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Policy
  nameWithType: EvictingDictionary<TKey, TValue>.Policy
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Policy
  type: Property
  source:
    id: Policy
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 184
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets the eviction policy configured for this dictionary.
  example: []
  syntax:
    content: public EvictionPolicy Policy { get; }
    parameters: []
    return:
      type: Bodu.Collections.Generic.EvictionPolicy
    content.vb: Public ReadOnly Property Policy As EvictionPolicy
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Policy*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Policy
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Policy
- uid: Bodu.Collections.Generic.EvictingDictionary`2.EvictionCount
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.EvictionCount
  id: EvictionCount
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictionCount
  nameWithType: EvictingDictionary<TKey, TValue>.EvictionCount
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictionCount
  type: Property
  source:
    id: EvictionCount
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 189
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets the total number of items evicted from the dictionary since creation.
  example: []
  syntax:
    content: public long EvictionCount { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property EvictionCount As Long
  overload: Bodu.Collections.Generic.EvictingDictionary`2.EvictionCount*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).EvictionCount
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).EvictionCount
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TotalTouches
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.TotalTouches
  id: TotalTouches
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: TotalTouches
  nameWithType: EvictingDictionary<TKey, TValue>.TotalTouches
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TotalTouches
  type: Property
  source:
    id: TotalTouches
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 194
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets the total number of times any key has been accessed or touched.
  example: []
  syntax:
    content: public long TotalTouches { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property TotalTouches As Long
  overload: Bodu.Collections.Generic.EvictingDictionary`2.TotalTouches*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TotalTouches
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TotalTouches
- uid: Bodu.Collections.Generic.EvictingDictionary`2.OrderedKeys
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.OrderedKeys
  id: OrderedKeys
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: OrderedKeys
  nameWithType: EvictingDictionary<TKey, TValue>.OrderedKeys
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.OrderedKeys
  type: Property
  source:
    id: OrderedKeys
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 200
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Returns the keys in logical eviction order according to the current policy:

    FIFO and LRU are in insertion/access order; LFU is in increasing frequency order.
  example: []
  syntax:
    content: public IEnumerable<TKey> OrderedKeys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TKey}}
    content.vb: Public ReadOnly Property OrderedKeys As IEnumerable(Of TKey)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.OrderedKeys*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).OrderedKeys
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).OrderedKeys
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor
  id: '#ctor'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary()
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary()
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary()
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 219
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Initializes a new empty <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> with the default capacity and eviction policy.
  remarks: The default capacity is 16, and the default eviction policy is <xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public EvictingDictionary()
    content.vb: Public Sub New()
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New()
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New()
  name.vb: New()
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(int)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(int)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(int)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 228
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Initializes a new empty <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> with the specified capacity and the default eviction policy.
  remarks: The default eviction policy is <xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public EvictingDictionary(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: The maximum number of key-value pairs the dictionary can contain. Must be positive.
    content.vb: Public Sub New(capacity As Integer)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">capacity</code> is less than or equal to zero.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(Integer)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(Integer)
  name.vb: New(Integer)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy)
  id: '#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy)'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(int, EvictionPolicy)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(int, EvictionPolicy)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(int, Bodu.Collections.Generic.EvictionPolicy)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 237
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Initializes a new empty <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> with the specified capacity and eviction policy.
  example: []
  syntax:
    content: public EvictingDictionary(int capacity, EvictionPolicy policy)
    parameters:
    - id: capacity
      type: System.Int32
      description: The maximum number of key-value pairs the dictionary can contain. Must be positive.
    - id: policy
      type: Bodu.Collections.Generic.EvictionPolicy
      description: The eviction policy to use when the dictionary exceeds its capacity.
    content.vb: Public Sub New(capacity As Integer, policy As EvictionPolicy)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">capacity</code> is less than or equal to zero.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(Integer, EvictionPolicy)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(Integer, Bodu.Collections.Generic.EvictionPolicy)
  name.vb: New(Integer, EvictionPolicy)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(int, EvictionPolicy, IEqualityComparer<TKey>?)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(int, EvictionPolicy, IEqualityComparer<TKey>?)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(int, Bodu.Collections.Generic.EvictionPolicy, System.Collections.Generic.IEqualityComparer<TKey>?)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 247
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Initializes a new empty <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> with the specified capacity, eviction policy, and key comparer.
  example: []
  syntax:
    content: public EvictingDictionary(int capacity, EvictionPolicy policy, IEqualityComparer<TKey>? comparer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The maximum number of key-value pairs the dictionary can contain. Must be positive.
    - id: policy
      type: Bodu.Collections.Generic.EvictionPolicy
      description: The eviction policy to use when the dictionary exceeds its capacity.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to use for comparing keys, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use the default comparer.
    content.vb: Public Sub New(capacity As Integer, policy As EvictionPolicy, comparer As IEqualityComparer(Of TKey))
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">capacity</code> is less than or equal to zero.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(Integer, EvictionPolicy, IEqualityComparer(Of TKey))
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(Integer, Bodu.Collections.Generic.EvictionPolicy, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: New(Integer, EvictionPolicy, IEqualityComparer(Of TKey))
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(IDictionary<TKey, TValue>)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(IDictionary<TKey, TValue>)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 275
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Initializes a new <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> by copying entries from the specified dictionary,

    using default capacity and eviction policy.
  remarks: >-
    If the number of entries in <code class="paramref">source</code> exceeds the default capacity (16), only the most recent entries

    are retained according to the default eviction policy (<xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref>).
  example: []
  syntax:
    content: public EvictingDictionary(IDictionary<TKey, TValue> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The dictionary from which key-value pairs are copied. Must not be null.
    content.vb: Public Sub New(source As IDictionary(Of TKey, TValue))
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">source</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(IDictionary(Of TKey, TValue))
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: New(IDictionary(Of TKey, TValue))
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},Bodu.Collections.Generic.EvictionPolicy)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},Bodu.Collections.Generic.EvictionPolicy)
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},Bodu.Collections.Generic.EvictionPolicy)'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(IDictionary<TKey, TValue>, EvictionPolicy)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(IDictionary<TKey, TValue>, EvictionPolicy)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, Bodu.Collections.Generic.EvictionPolicy)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 285
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Initializes a new <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> by copying entries from the specified dictionary,

    using the specified eviction policy and default capacity.
  example: []
  syntax:
    content: public EvictingDictionary(IDictionary<TKey, TValue> source, EvictionPolicy policy)
    parameters:
    - id: source
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The dictionary from which key-value pairs are copied. Must not be null.
    - id: policy
      type: Bodu.Collections.Generic.EvictionPolicy
      description: The eviction policy to use when the dictionary exceeds its capacity.
    content.vb: Public Sub New(source As IDictionary(Of TKey, TValue), policy As EvictionPolicy)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">source</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(IDictionary(Of TKey, TValue), EvictionPolicy)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(System.Collections.Generic.IDictionary(Of TKey, TValue), Bodu.Collections.Generic.EvictionPolicy)
  name.vb: New(IDictionary(Of TKey, TValue), EvictionPolicy)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy)
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy)'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(IDictionary<TKey, TValue>, int, EvictionPolicy)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(IDictionary<TKey, TValue>, int, EvictionPolicy)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, int, Bodu.Collections.Generic.EvictionPolicy)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 297
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Initializes a new <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> by copying entries from the specified dictionary,

    using the specified capacity and eviction policy.
  example: []
  syntax:
    content: public EvictingDictionary(IDictionary<TKey, TValue> source, int capacity, EvictionPolicy policy)
    parameters:
    - id: source
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The dictionary from which key-value pairs are copied. Must not be null.
    - id: capacity
      type: System.Int32
      description: The maximum number of key-value pairs the dictionary can contain. Must be positive.
    - id: policy
      type: Bodu.Collections.Generic.EvictionPolicy
      description: The eviction policy to use when the dictionary exceeds its capacity.
    content.vb: Public Sub New(source As IDictionary(Of TKey, TValue), capacity As Integer, policy As EvictionPolicy)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">source</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">capacity</code> is less than or equal to zero.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(IDictionary(Of TKey, TValue), Integer, EvictionPolicy)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(System.Collections.Generic.IDictionary(Of TKey, TValue), Integer, Bodu.Collections.Generic.EvictionPolicy)
  name.vb: New(IDictionary(Of TKey, TValue), Integer, EvictionPolicy)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Int32,Bodu.Collections.Generic.EvictionPolicy,System.Collections.Generic.IEqualityComparer{`0})'
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: EvictingDictionary(IDictionary<TKey, TValue>, int, EvictionPolicy, IEqualityComparer<TKey>?)
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary(IDictionary<TKey, TValue>, int, EvictionPolicy, IEqualityComparer<TKey>?)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, int, Bodu.Collections.Generic.EvictionPolicy, System.Collections.Generic.IEqualityComparer<TKey>?)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 310
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Initializes a new <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> by copying entries from the specified dictionary,

    using the specified capacity, eviction policy, and key comparer.
  example: []
  syntax:
    content: public EvictingDictionary(IDictionary<TKey, TValue> source, int capacity, EvictionPolicy policy, IEqualityComparer<TKey>? comparer)
    parameters:
    - id: source
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The dictionary from which key-value pairs are copied. Must not be null.
    - id: capacity
      type: System.Int32
      description: The maximum number of key-value pairs the dictionary can contain. Must be positive.
    - id: policy
      type: Bodu.Collections.Generic.EvictionPolicy
      description: The eviction policy to use when the dictionary exceeds its capacity.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to use for comparing keys, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use the default comparer.
    content.vb: Public Sub New(source As IDictionary(Of TKey, TValue), capacity As Integer, policy As EvictionPolicy, comparer As IEqualityComparer(Of TKey))
  overload: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">source</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">capacity</code> is less than or equal to zero.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New(IDictionary(Of TKey, TValue), Integer, EvictionPolicy, IEqualityComparer(Of TKey))
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New(System.Collections.Generic.IDictionary(Of TKey, TValue), Integer, Bodu.Collections.Generic.EvictionPolicy, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: New(IDictionary(Of TKey, TValue), Integer, EvictionPolicy, IEqualityComparer(Of TKey))
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Touch(`0)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Touch(`0)
  id: Touch(`0)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Touch(TKey)
  nameWithType: EvictingDictionary<TKey, TValue>.Touch(TKey)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Touch(TKey)
  type: Method
  source:
    id: Touch
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 328
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Marks the specified key as recently accessed without retrieving its value.

    If the eviction policy is <xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref> or <xref href="Bodu.Collections.Generic.EvictionPolicy.LFU" data-throw-if-not-resolved="false"></xref>, this updates the internal usage metadata.
  example: []
  syntax:
    content: public bool Touch(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to touch.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the key exists and was marked as accessed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Touch(key As TKey) As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Touch*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Touch(TKey)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Touch(TKey)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TouchOrThrow(`0)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.TouchOrThrow(`0)
  id: TouchOrThrow(`0)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: TouchOrThrow(TKey)
  nameWithType: EvictingDictionary<TKey, TValue>.TouchOrThrow(TKey)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TouchOrThrow(TKey)
  type: Method
  source:
    id: TouchOrThrow
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 356
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Marks the specified key as recently accessed without retrieving its value,

    and throws an exception if the key does not exist in the dictionary.
  remarks: If the eviction policy is <xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref> or <xref href="Bodu.Collections.Generic.EvictionPolicy.LFU" data-throw-if-not-resolved="false"></xref>, this updates the internal usage metadata.
  example: []
  syntax:
    content: public void TouchOrThrow(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to touch.
    content.vb: Public Sub TouchOrThrow(key As TKey)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.TouchOrThrow*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Thrown when the specified key does not exist in the dictionary.
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TouchOrThrow(TKey)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TouchOrThrow(TKey)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.PeekEvictionCandidate
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.PeekEvictionCandidate
  id: PeekEvictionCandidate
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: PeekEvictionCandidate()
  nameWithType: EvictingDictionary<TKey, TValue>.PeekEvictionCandidate()
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.PeekEvictionCandidate()
  type: Method
  source:
    id: PeekEvictionCandidate
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 368
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Returns the key that would be evicted next based on the current eviction policy and internal state.
  example: []
  syntax:
    content: public TKey? PeekEvictionCandidate()
    return:
      type: '{TKey}'
      description: The key that is next in line for eviction, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/default">default</a> if the dictionary is empty.
    content.vb: Public Function PeekEvictionCandidate() As TKey
  overload: Bodu.Collections.Generic.EvictingDictionary`2.PeekEvictionCandidate*
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).PeekEvictionCandidate()
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).PeekEvictionCandidate()
- uid: Bodu.Collections.Generic.EvictingDictionary`2.ItemEvicting
  commentId: E:Bodu.Collections.Generic.EvictingDictionary`2.ItemEvicting
  id: ItemEvicting
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: ItemEvicting
  nameWithType: EvictingDictionary<TKey, TValue>.ItemEvicting
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.ItemEvicting
  type: Event
  source:
    id: ItemEvicting
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 405
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Occurs immediately <b>before</b> an item is evicted from the <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> due to capacity limits.
  remarks: >-
    <p>This event is raised before the item is removed from the collection, allowing consumers to inspect the key and value before eviction occurs.</p>

    <p>Common use cases include diagnostics, logging, cache warm-up, or state mirroring. This event is informational and cannot cancel or delay eviction.</p>
  example:
  - >-
    <pre><code class="lang-csharp">var cache = new EvictingDictionary&lt;string, int&gt;(capacity: 2, policy: EvictionPolicy.FIFO);

    cache.ItemEvicting += (key, value) =&gt;

    {
        Console.WriteLine($""[BeforeEvict] {key} = {value}"");
    };


    cache.Add(""A"", 1);

    cache.Add(""B"", 2);

    cache.Add(""C"", 3); // Triggers ItemEvicting for ""A""</code></pre>
  syntax:
    content: public event Action<TKey, TValue>? ItemEvicting
    return:
      type: System.Action{{TKey},{TValue}}
    content.vb: Public Event ItemEvicting As Action(Of TKey, TValue)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).ItemEvicting
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).ItemEvicting
- uid: Bodu.Collections.Generic.EvictingDictionary`2.ItemEvicted
  commentId: E:Bodu.Collections.Generic.EvictingDictionary`2.ItemEvicted
  id: ItemEvicted
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: ItemEvicted
  nameWithType: EvictingDictionary<TKey, TValue>.ItemEvicted
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.ItemEvicted
  type: Event
  source:
    id: ItemEvicted
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.cs
    startLine: 427
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Occurs immediately <b>after</b> an item is evicted from the <xref href="Bodu.Collections.Generic.EvictingDictionary%602" data-throw-if-not-resolved="false"></xref> due to capacity limits.
  remarks: >-
    <p>This event is raised after the item has been removed from the collection, based on the configured <xref href="Bodu.Collections.Generic.EvictionPolicy" data-throw-if-not-resolved="false"></xref> (e.g., FIFO, LRU, or LFU).</p>

    <p>Consumers can use this event to record historical data, notify observers, or synchronize external caches. The key and value provided are no longer present in the dictionary.</p>
  example:
  - >-
    <pre><code class="lang-csharp">var cache = new EvictingDictionary&lt;string, int&gt;(capacity: 2, policy: EvictionPolicy.FIFO);

    cache.ItemEvicted += (key, value) =&gt;

    {
        Console.WriteLine($""[AfterEvict] {key} = {value}"");
    };


    cache.Add(""A"", 1);

    cache.Add(""B"", 2);

    cache.Add(""C"", 3); // Triggers ItemEvicted for ""A""</code></pre>
  syntax:
    content: public event Action<TKey, TValue>? ItemEvicted
    return:
      type: System.Action{{TKey},{TValue}}
    content.vb: Public Event ItemEvicted As Action(Of TKey, TValue)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).ItemEvicted
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).ItemEvicted
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Keys
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Keys
  id: Keys
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: EvictingDictionary<TKey, TValue>.Keys
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Keys
  type: Property
  source:
    id: Keys
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 17
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets an <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the keys of the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ICollection<TKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: An <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the keys of the object that implements <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Keys*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Keys
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Keys
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Values
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Values
  id: Values
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: EvictingDictionary<TKey, TValue>.Values
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Values
  type: Property
  source:
    id: Values
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 20
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets an <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the values in the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ICollection<TValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: An <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> containing the values in the object that implements <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Values*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Values
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Values
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Count
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Count
  id: Count
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: EvictingDictionary<TKey, TValue>.Count
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Count
  type: Property
  source:
    id: Count
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 32
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Count As Integer
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  - System.Collections.ICollection.Count
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Count
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Count
- uid: Bodu.Collections.Generic.EvictingDictionary`2.IsReadOnly
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.IsReadOnly
  id: IsReadOnly
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: EvictingDictionary<TKey, TValue>.IsReadOnly
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.IsReadOnly
  type: Property
  source:
    id: IsReadOnly
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 35
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).IsReadOnly
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).IsReadOnly
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Item(`0)
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Item(`0)
  id: Item(`0)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: EvictingDictionary<TKey, TValue>.this[TKey]
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    id: this[]
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 38
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Gets or sets the element with the specified key.
  example: []
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to get or set.
    return:
      type: '{TValue}'
      description: The element with the specified key.
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and <code class="paramref">key</code> is not found.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set and the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: EvictingDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    id: Add
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 60
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Adds the specified key and value to the dictionary. If the dictionary has reached its capacity,

    an existing entry will be evicted according to the configured <xref href="Bodu.Collections.Generic.EvictionPolicy" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add.
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> and the key type is a reference type.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: EvictingDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    id: Add
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 89
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: >-
    Adds the specified key/value pair to the dictionary. If the dictionary has reached its capacity,

    an existing entry will be evicted according to the configured <xref href="Bodu.Collections.Generic.EvictionPolicy" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The key/value pair to add to the dictionary.
    content.vb: Public Sub Add(item As KeyValuePair(Of TKey, TValue))
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code>item.Key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> and the key type is a reference type.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Clear
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Clear
  id: Clear
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: EvictingDictionary<TKey, TValue>.Clear()
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    id: Clear
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 100
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Removes all entries from the dictionary.
  remarks: >-
    This operation also resets any internal state related to eviction tracking,

    such as usage frequency (LFU) or access order (LRU).
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  - System.Collections.IDictionary.Clear
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Clear()
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Clear()
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: EvictingDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 108
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> contains a specific value.
  example: []
  syntax:
    content: public bool Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to locate in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">item</code> is found in the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Contains(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
- uid: Bodu.Collections.Generic.EvictingDictionary`2.ContainsKey(`0)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: EvictingDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    id: ContainsKey
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 114
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> contains an element with the specified key.
  example: []
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> contains an element with the key; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TKey, TValue>[], int)
  nameWithType: EvictingDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], int)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], int)
  type: Method
  source:
    id: CopyTo
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 118
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> to an <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at a particular <xref href="System.Array" data-throw-if-not-resolved="false"></xref> index.
  example: []
  syntax:
    content: public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code class="paramref">array</code> at which copying begins.
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer)
  overload: Bodu.Collections.Generic.EvictingDictionary`2.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code class="paramref">arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is greater than the available space from <code class="paramref">arrayIndex</code> to the end of the destination <code class="paramref">array</code>.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: EvictingDictionary<TKey, TValue>.Remove(TKey)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    id: Remove
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 127
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Removes the element with the specified key from the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the element is successfully removed; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.  This method also returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if <code class="paramref">key</code> was not found in the original <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">key</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Remove(TKey)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: EvictingDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    id: Remove
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 145
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: The object to remove from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">item</code> was successfully removed from the <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>. This method also returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if <code class="paramref">item</code> is not found in the original <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Remove(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.ICollection%601" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: EvictingDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    id: TryGetValue
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 165
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Attempts to retrieve the value associated with the specified key.
  remarks: >-
    If the eviction policy is <xref href="Bodu.Collections.Generic.EvictionPolicy.LRU" data-throw-if-not-resolved="false"></xref> or <xref href="Bodu.Collections.Generic.EvictionPolicy.LFU" data-throw-if-not-resolved="false"></xref>, 

    accessing a key through this method will update its usage metadata.
  example: []
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to retrieve.
    - id: value
      type: '{TValue}'
      description: >-
        When this method returns, contains the value associated with the specified key, 

        if the key is found; otherwise, the default value for the type of the value parameter.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the dictionary contains an element with the specified key; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function TryGetValue(key As TKey, value As TValue) As Boolean
  overload: Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
- uid: Bodu.Collections.Generic.EvictingDictionary`2.GetEnumerator
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: Bodu.Collections.Generic.EvictingDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: EvictingDictionary<TKey, TValue>.GetEnumerator()
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\bslater\OneDrive\Code\SharePortfolio\v1.2a\Bodu.CoreLib\Collections.Generic\EvictingDictionary.IDictionary.cs
    startLine: 219
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Returns an enumerator that iterates through the collection.
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator that can be used to iterate through the collection.
    content.vb: Public Function GetEnumerator() As IEnumerator(Of KeyValuePair(Of TKey, TValue))
  overload: Bodu.Collections.Generic.EvictingDictionary`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).GetEnumerator()
references:
- uid: Bodu.Collections.Generic.EvictingDictionary`2
  commentId: T:Bodu.Collections.Generic.EvictingDictionary`2
  href: Bodu.Collections.Generic.EvictingDictionary-2.html
  name: EvictingDictionary<TKey, TValue>
  nameWithType: EvictingDictionary<TKey, TValue>
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>
  nameWithType.vb: EvictingDictionary(Of TKey, TValue)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue)
  name.vb: EvictingDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2
    name: EvictingDictionary
    href: Bodu.Collections.Generic.EvictingDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2
    name: EvictingDictionary
    href: Bodu.Collections.Generic.EvictingDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Bodu.Collections.Generic.EvictionPolicy
  commentId: T:Bodu.Collections.Generic.EvictionPolicy
  parent: Bodu.Collections.Generic
  href: Bodu.Collections.Generic.EvictionPolicy.html
  name: EvictionPolicy
  nameWithType: EvictionPolicy
  fullName: Bodu.Collections.Generic.EvictionPolicy
- uid: Bodu.Collections.Generic.EvictionPolicy.FIFO
  commentId: F:Bodu.Collections.Generic.EvictionPolicy.FIFO
  href: Bodu.Collections.Generic.EvictionPolicy.html#Bodu_Collections_Generic_EvictionPolicy_FIFO
  name: FIFO
  nameWithType: EvictionPolicy.FIFO
  fullName: Bodu.Collections.Generic.EvictionPolicy.FIFO
- uid: Bodu.Collections.Generic.EvictionPolicy.LRU
  commentId: F:Bodu.Collections.Generic.EvictionPolicy.LRU
  href: Bodu.Collections.Generic.EvictionPolicy.html#Bodu_Collections_Generic_EvictionPolicy_LRU
  name: LRU
  nameWithType: EvictionPolicy.LRU
  fullName: Bodu.Collections.Generic.EvictionPolicy.LRU
- uid: Bodu.Collections.Generic.EvictionPolicy.LFU
  commentId: F:Bodu.Collections.Generic.EvictionPolicy.LFU
  href: Bodu.Collections.Generic.EvictionPolicy.html#Bodu_Collections_Generic_EvictionPolicy_LFU
  name: LFU
  nameWithType: EvictionPolicy.LFU
  fullName: Bodu.Collections.Generic.EvictionPolicy.LFU
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Add__0__1_
  name: Add(TKey, TValue)
  nameWithType: EvictingDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
    name: Add
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Add__0__1_
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.Add(`0,`1)
    name: Add
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Add__0__1_
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_TryGetValue__0__1__
  name: TryGetValue(TKey, out TValue)
  nameWithType: EvictingDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_TryGetValue__0__1__
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_TryGetValue__0__1__
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Remove__0_
  name: Remove(TKey)
  nameWithType: EvictingDictionary<TKey, TValue>.Remove(TKey)
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
    name: Remove
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Remove__0_
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.Remove(`0)
    name: Remove
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Remove__0_
  - name: (
  - name: TKey
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Clear
  commentId: M:Bodu.Collections.Generic.EvictingDictionary`2.Clear
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Clear
  name: Clear()
  nameWithType: EvictingDictionary<TKey, TValue>.Clear()
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Clear()
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Clear()
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Clear()
  spec.csharp:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.Clear
    name: Clear
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Clear
  - name: (
  - name: )
  spec.vb:
  - uid: Bodu.Collections.Generic.EvictingDictionary`2.Clear
    name: Clear
    href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Clear
  - name: (
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Capacity
  commentId: P:Bodu.Collections.Generic.EvictingDictionary`2.Capacity
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Capacity
  name: Capacity
  nameWithType: EvictingDictionary<TKey, TValue>.Capacity
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Capacity
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Capacity
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Capacity
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Bodu.Collections.Generic
  commentId: N:Bodu.Collections.Generic
  href: Bodu.html
  name: Bodu.Collections.Generic
  nameWithType: Bodu.Collections.Generic
  fullName: Bodu.Collections.Generic
  spec.csharp:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
  spec.vb:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<KeyValuePair<TKey, TValue>>
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.idictionary
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.icollection
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Capacity*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Capacity
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Capacity
  name: Capacity
  nameWithType: EvictingDictionary<TKey, TValue>.Capacity
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Capacity
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Capacity
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Capacity
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Policy*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Policy
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Policy
  name: Policy
  nameWithType: EvictingDictionary<TKey, TValue>.Policy
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Policy
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Policy
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Policy
- uid: Bodu.Collections.Generic.EvictingDictionary`2.EvictionCount*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.EvictionCount
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_EvictionCount
  name: EvictionCount
  nameWithType: EvictingDictionary<TKey, TValue>.EvictionCount
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictionCount
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).EvictionCount
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).EvictionCount
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TotalTouches*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.TotalTouches
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_TotalTouches
  name: TotalTouches
  nameWithType: EvictingDictionary<TKey, TValue>.TotalTouches
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TotalTouches
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TotalTouches
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TotalTouches
- uid: Bodu.Collections.Generic.EvictingDictionary`2.OrderedKeys*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.OrderedKeys
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_OrderedKeys
  name: OrderedKeys
  nameWithType: EvictingDictionary<TKey, TValue>.OrderedKeys
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.OrderedKeys
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).OrderedKeys
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).OrderedKeys
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  nameWithType.vb: IEnumerable(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.#ctor*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.#ctor
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2__ctor
  name: EvictingDictionary
  nameWithType: EvictingDictionary<TKey, TValue>.EvictingDictionary
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.EvictingDictionary
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).New
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).New
  name.vb: New
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Touch*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Touch
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Touch__0_
  name: Touch
  nameWithType: EvictingDictionary<TKey, TValue>.Touch
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Touch
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Touch
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Touch
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keynotfoundexception
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TouchOrThrow*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.TouchOrThrow
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_TouchOrThrow__0_
  name: TouchOrThrow
  nameWithType: EvictingDictionary<TKey, TValue>.TouchOrThrow
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TouchOrThrow
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TouchOrThrow
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TouchOrThrow
- uid: Bodu.Collections.Generic.EvictingDictionary`2.PeekEvictionCandidate*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.PeekEvictionCandidate
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_PeekEvictionCandidate
  name: PeekEvictionCandidate
  nameWithType: EvictingDictionary<TKey, TValue>.PeekEvictionCandidate
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.PeekEvictionCandidate
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).PeekEvictionCandidate
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).PeekEvictionCandidate
- uid: System.Action{{TKey},{TValue}}
  commentId: T:System.Action{`0,`1}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<TKey, TValue>
  nameWithType: Action<TKey, TValue>
  fullName: System.Action<TKey, TValue>
  nameWithType.vb: Action(Of TKey, TValue)
  fullName.vb: System.Action(Of TKey, TValue)
  name.vb: Action(Of TKey, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Keys*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Keys
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Keys
  name: Keys
  nameWithType: EvictingDictionary<TKey, TValue>.Keys
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Keys
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Keys
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Keys
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.keys
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.keys
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Values*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Values
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Values
  name: Values
  nameWithType: EvictingDictionary<TKey, TValue>.Values
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Values
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Values
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Values
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Values
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.values
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.ICollection{{TValue}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  nameWithType.vb: ICollection(Of TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.values
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Count*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Count
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Count
  name: Count
  nameWithType: EvictingDictionary<TKey, TValue>.Count
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Count
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Count
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.icollection.count
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Bodu.Collections.Generic.EvictingDictionary`2.IsReadOnly*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.IsReadOnly
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_IsReadOnly
  name: IsReadOnly
  nameWithType: EvictingDictionary<TKey, TValue>.IsReadOnly
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.IsReadOnly
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).IsReadOnly
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.notsupportedexception
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Item*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Item
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Item__0_
  name: this
  nameWithType: EvictingDictionary<TKey, TValue>.this
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.this
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).this[]
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Item(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  name: this[TKey]
  nameWithType: IDictionary<TKey, TValue>.this[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.this[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Item(`0)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  - name: (
  - name: TKey
  - name: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  name: this[TKey]
  nameWithType: IDictionary<TKey, TValue>.this[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.this[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  - name: (
  - name: TKey
  - name: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Add*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Add
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Add__0__1_
  name: Add
  nameWithType: EvictingDictionary<TKey, TValue>.Add
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Add
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Add
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Add
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Clear*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Clear
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Clear
  name: Clear
  nameWithType: EvictingDictionary<TKey, TValue>.Clear
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Clear
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Clear
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.Collections.IDictionary.Clear
  commentId: M:System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.idictionary.clear
  name: Clear()
  nameWithType: IDictionary.Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.idictionary.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.idictionary.clear
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Contains*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Contains
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Contains_System_Collections_Generic_KeyValuePair__0__1__
  name: Contains
  nameWithType: EvictingDictionary<TKey, TValue>.Contains
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Contains
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Contains
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.ContainsKey*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.ContainsKey
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: EvictingDictionary<TKey, TValue>.ContainsKey
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).ContainsKey
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
- uid: System.Array
  commentId: T:System.Array
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.array
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Bodu.Collections.Generic.EvictingDictionary`2.CopyTo*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.CopyTo
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_CopyTo_System_Collections_Generic_KeyValuePair__0__1____System_Int32_
  name: CopyTo
  nameWithType: EvictingDictionary<TKey, TValue>.CopyTo
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.CopyTo
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).CopyTo
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(KeyValuePair<TKey, TValue>[], int)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], int)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], int)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>[]
  nameWithType: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  nameWithType.vb: KeyValuePair(Of TKey, TValue)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.Remove*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.Remove
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_Remove__0_
  name: Remove
  nameWithType: EvictingDictionary<TKey, TValue>.Remove
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.Remove
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).Remove
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).Remove
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.TryGetValue
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_TryGetValue__0__1__
  name: TryGetValue
  nameWithType: EvictingDictionary<TKey, TValue>.TryGetValue
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).TryGetValue
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  name: TryGetValue(TKey, out TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  name: TryGetValue(TKey, out TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Bodu.Collections.Generic.EvictingDictionary`2.GetEnumerator*
  commentId: Overload:Bodu.Collections.Generic.EvictingDictionary`2.GetEnumerator
  href: Bodu.Collections.Generic.EvictingDictionary-2.html#Bodu_Collections_Generic_EvictingDictionary_2_GetEnumerator
  name: GetEnumerator
  nameWithType: EvictingDictionary<TKey, TValue>.GetEnumerator
  fullName: Bodu.Collections.Generic.EvictingDictionary<TKey, TValue>.GetEnumerator
  nameWithType.vb: EvictingDictionary(Of TKey, TValue).GetEnumerator
  fullName.vb: Bodu.Collections.Generic.EvictingDictionary(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
