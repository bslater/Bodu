### YamlMime:ManagedReference
items:
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  commentId: T:Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  id: IEnumerableExtensions
  parent: Bodu.Collections.Generic.Extensions
  children:
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0},Bodu.Collections.Generic.Extensions.RandomizationMode,Bodu.IRandomGenerator,System.Nullable{System.Int32})
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1})
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1},System.Func{``0,Bodu.Collections.Extensions.RecursiveSelectControl})
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,``1})
  - Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  langs:
  - csharp
  - vb
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  type: Class
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: IEnumerableExtensions
    path: Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 10
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  example: []
  syntax:
    content: public static class IEnumerableExtensions
    content.vb: Public Module IEnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0})
  id: Randomize``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: Randomize<T>(IEnumerable<T>)
  nameWithType: IEnumerableExtensions.Randomize<T>(IEnumerable<T>)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.Randomize.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Randomize
    path: Collections.Generic.Extensions/IEnumerableExtensions.Randomize.cs
    startLine: 62
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: Randomizes the source sequence using a specified strategy and generator.
  example: []
  syntax:
    content: public static IEnumerable<T> Randomize<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence to randomize.
    typeParameters:
    - id: T
      description: The element type.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A randomized sequence of <code class="typeparamref">T</code>.
    content.vb: Public Shared Function Randomize(Of T)(source As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">source</code> or <code class="paramref">rng</code> is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">count</code> is negative or too large.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If <code class="paramref">count</code> is required but not provided.
  nameWithType.vb: IEnumerableExtensions.Randomize(Of T)(IEnumerable(Of T))
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Randomize(Of T)(IEnumerable(Of T))
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0},Bodu.Collections.Generic.Extensions.RandomizationMode,Bodu.IRandomGenerator,System.Nullable{System.Int32})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize``1(System.Collections.Generic.IEnumerable{``0},Bodu.Collections.Generic.Extensions.RandomizationMode,Bodu.IRandomGenerator,System.Nullable{System.Int32})
  id: Randomize``1(System.Collections.Generic.IEnumerable{``0},Bodu.Collections.Generic.Extensions.RandomizationMode,Bodu.IRandomGenerator,System.Nullable{System.Int32})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: Randomize<T>(IEnumerable<T>, RandomizationMode, IRandomGenerator, int?)
  nameWithType: IEnumerableExtensions.Randomize<T>(IEnumerable<T>, RandomizationMode, IRandomGenerator, int?)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize<T>(System.Collections.Generic.IEnumerable<T>, Bodu.Collections.Generic.Extensions.RandomizationMode, Bodu.IRandomGenerator, int?)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.Randomize.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Randomize
    path: Collections.Generic.Extensions/IEnumerableExtensions.Randomize.cs
    startLine: 77
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: Randomizes the source sequence using a specified strategy and generator.
  example: []
  syntax:
    content: public static IEnumerable<T> Randomize<T>(this IEnumerable<T> source, RandomizationMode mode, IRandomGenerator rng, int? count = null)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The sequence to randomize.
    - id: mode
      type: Bodu.Collections.Generic.Extensions.RandomizationMode
      description: The randomization strategy.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator.
    - id: count
      type: System.Nullable{System.Int32}
      description: The number of items to return; all if null.
    typeParameters:
    - id: T
      description: The element type.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A randomized sequence of <code class="typeparamref">T</code>.
    content.vb: Public Shared Function Randomize(Of T)(source As IEnumerable(Of T), mode As RandomizationMode, rng As IRandomGenerator, count As Integer? = Nothing) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">source</code> or <code class="paramref">rng</code> is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If <code class="paramref">count</code> is negative or too large.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If <code class="paramref">count</code> is required but not provided.
  nameWithType.vb: IEnumerableExtensions.Randomize(Of T)(IEnumerable(Of T), RandomizationMode, IRandomGenerator, Integer?)
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize(Of T)(System.Collections.Generic.IEnumerable(Of T), Bodu.Collections.Generic.Extensions.RandomizationMode, Bodu.IRandomGenerator, Integer?)
  name.vb: Randomize(Of T)(IEnumerable(Of T), RandomizationMode, IRandomGenerator, Integer?)
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect<TSource>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>)
  nameWithType: IEnumerableExtensions.RecursiveSelect<TSource>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TSource>>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 36
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: Recursively flattens a hierarchical sequence using the provided child selector.
  example:
  - <pre><code class="lang-csharp">var allNodes = rootNodes.RecursiveSelect(node =&gt; node.Children);</code></pre>
  syntax:
    content: public static IEnumerable<TSource> RecursiveSelect<TSource>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TSource>> childSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The root sequence to begin recursion from.
    - id: childSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TSource}}}
      description: A function that returns child elements for a given element.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A flattened sequence of all elements including their children.
    content.vb: Public Shared Function RecursiveSelect(Of TSource)(source As IEnumerable(Of TSource), childSelector As Func(Of TSource, IEnumerable(Of TSource))) As IEnumerable(Of TSource)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">source</code> or <code class="paramref">childSelector</code> is null.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)))
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TSource)))
  name.vb: RecursiveSelect(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)))
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  id: RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, TResult>)
  nameWithType: IEnumerableExtensions.RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, TResult>)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TSource>>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 70
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: >-
    Recursively flattens and transforms a hierarchical sequence using the provided child

    selector and projection.
  example:
  - >-
    <pre><code class="lang-csharp">var names = rootNodes.RecursiveSelect(

    node =&gt; node.Children,

    node =&gt; node.Name);</code></pre>
  syntax:
    content: public static IEnumerable<TResult> RecursiveSelect<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TSource>> childSelector, Func<TSource, TResult> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The root sequence to begin recursion from.
    - id: childSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TSource}}}
      description: A function that returns child elements for a given element.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function applied to each element.
    typeParameters:
    - id: TSource
      description: The type of the source elements.
    - id: TResult
      description: The type of the projected result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A flattened and projected sequence of results from all elements including children.
    content.vb: Public Shared Function RecursiveSelect(Of TSource, TResult)(source As IEnumerable(Of TSource), childSelector As Func(Of TSource, IEnumerable(Of TSource)), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, or

      <code class="paramref">selector</code> is null.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, TResult))
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TSource)), System.Func(Of TSource, TResult))
  name.vb: RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, TResult))
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,``1})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,``1})
  id: RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, int, TResult>)
  nameWithType: IEnumerableExtensions.RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, int, TResult>)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TSource>>, System.Func<TSource, int, TResult>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 106
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: >-
    Recursively flattens and transforms a hierarchical sequence with index using the

    provided child selector.
  example:
  - >-
    <pre><code class="lang-csharp">var indexedNames = rootNodes.RecursiveSelect(

    node =&gt; node.Children,

    (node, index) =&gt; $\"{index}: {node.Name}\");</code></pre>
  syntax:
    content: public static IEnumerable<TResult> RecursiveSelect<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TSource>> childSelector, Func<TSource, int, TResult> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The root sequence to begin recursion from.
    - id: childSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TSource}}}
      description: A function that returns child elements for a given element.
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
      description: A function applied to each element with its index.
    typeParameters:
    - id: TSource
      description: The type of the source elements.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A flattened and projected sequence of results from all elements including children.
    content.vb: Public Shared Function RecursiveSelect(Of TSource, TResult)(source As IEnumerable(Of TSource), childSelector As Func(Of TSource, IEnumerable(Of TSource)), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, or

      <code class="paramref">selector</code> is null.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, Integer, TResult))
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TSource)), System.Func(Of TSource, Integer, TResult))
  name.vb: RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, Integer, TResult))
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1})
  id: RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, int, int, TResult>)
  nameWithType: IEnumerableExtensions.RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, int, int, TResult>)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TSource>>, System.Func<TSource, int, int, TResult>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 140
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: >-
    Recursively flattens and transforms a hierarchical sequence using child selector and a

    selector that receives index and depth.
  example:
  - >-
    <pre><code class="lang-csharp">var formatted = rootNodes.RecursiveSelect(

    node =&gt; node.Children,

    (node, index, depth) =&gt; new { node.Name, index, depth });</code></pre>
  syntax:
    content: public static IEnumerable<TResult> RecursiveSelect<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TSource>> childSelector, Func<TSource, int, int, TResult> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The root sequence to begin recursion from.
    - id: childSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TSource}}}
      description: A function that returns child elements for a given element.
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Int32,{TResult}}
      description: A transform applied to each element, receiving index and depth.
    typeParameters:
    - id: TSource
      description: The type of the source elements.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A flattened and projected sequence from all elements including children.
    content.vb: Public Shared Function RecursiveSelect(Of TSource, TResult)(source As IEnumerable(Of TSource), childSelector As Func(Of TSource, IEnumerable(Of TSource)), selector As Func(Of TSource, Integer, Integer, TResult)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, or

      <code class="paramref">selector</code> is null.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, Integer, Integer, TResult))
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TSource)), System.Func(Of TSource, Integer, Integer, TResult))
  name.vb: RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, Integer, Integer, TResult))
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1},System.Func{``0,Bodu.Collections.Extensions.RecursiveSelectControl})
  commentId: M:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1},System.Func{``0,Bodu.Collections.Extensions.RecursiveSelectControl})
  id: RecursiveSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Int32,System.Int32,``1},System.Func{``0,Bodu.Collections.Extensions.RecursiveSelectControl})
  isExtensionMethod: true
  parent: Bodu.Collections.Generic.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, int, int, TResult>, Func<TSource, RecursiveSelectControl>)
  nameWithType: IEnumerableExtensions.RecursiveSelect<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TSource>>, Func<TSource, int, int, TResult>, Func<TSource, RecursiveSelectControl>)
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TSource>>, System.Func<TSource, int, int, TResult>, System.Func<TSource, Bodu.Collections.Extensions.RecursiveSelectControl>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: Collections.Generic.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 183
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic.Extensions
  summary: >-
    Recursively flattens and transforms a hierarchical sequence with depth/index tracking

    and a predicate to control recursion.
  example:
  - >-
    <pre><code class="lang-csharp">var filtered = rootNodes.RecursiveSelect(

    node =&gt; node.Children,

    (node, index, depth) =&gt; node.Name,

    node =&gt; node.Children.Count &gt; 0);</code></pre>
  syntax:
    content: public static IEnumerable<TResult> RecursiveSelect<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TSource>> childSelector, Func<TSource, int, int, TResult> selector, Func<TSource, RecursiveSelectControl> recursionControl)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The root sequence to begin recursion from.
    - id: childSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TSource}}}
      description: A function that returns child elements for a given element.
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Int32,{TResult}}
      description: A transform function applied to each element with index and depth.
    - id: recursionControl
      type: System.Func{{TSource},Bodu.Collections.Extensions.RecursiveSelectControl}
      description: A predicate that determines whether to continue recursion for a given element.
    typeParameters:
    - id: TSource
      description: The type of the source elements.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: >-
        A flattened and projected sequence of results, including only elements for which

        recursion is allowed.
    content.vb: Public Shared Function RecursiveSelect(Of TSource, TResult)(source As IEnumerable(Of TSource), childSelector As Func(Of TSource, IEnumerable(Of TSource)), selector As Func(Of TSource, Integer, Integer, TResult), recursionControl As Func(Of TSource, RecursiveSelectControl)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>,

      <code class="paramref">selector</code>, or <code class="paramref">recursionControl</code> is null.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, Integer, Integer, TResult), Func(Of TSource, RecursiveSelectControl))
  fullName.vb: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TSource)), System.Func(Of TSource, Integer, Integer, TResult), System.Func(Of TSource, Bodu.Collections.Extensions.RecursiveSelectControl))
  name.vb: RecursiveSelect(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TSource)), Func(Of TSource, Integer, Integer, TResult), Func(Of TSource, RecursiveSelectControl))
references:
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Bodu.Collections.Generic.Extensions
  commentId: N:Bodu.Collections.Generic.Extensions
  href: Bodu.html
  name: Bodu.Collections.Generic.Extensions
  nameWithType: Bodu.Collections.Generic.Extensions
  fullName: Bodu.Collections.Generic.Extensions
  spec.csharp:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
  - name: .
  - uid: Bodu.Collections.Generic.Extensions
    name: Extensions
    href: Bodu.Collections.Generic.Extensions.html
  spec.vb:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
  - name: .
  - uid: Bodu.Collections.Generic.Extensions
    name: Extensions
    href: Bodu.Collections.Generic.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize*
  commentId: Overload:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize
  href: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.html#Bodu_Collections_Generic_Extensions_IEnumerableExtensions_Randomize__1_System_Collections_Generic_IEnumerable___0__
  name: Randomize
  nameWithType: IEnumerableExtensions.Randomize
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.Randomize
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Bodu.Collections.Generic.Extensions.RandomizationMode
  commentId: T:Bodu.Collections.Generic.Extensions.RandomizationMode
  parent: Bodu.Collections.Generic.Extensions
  href: Bodu.Collections.Generic.Extensions.RandomizationMode.html
  name: RandomizationMode
  nameWithType: RandomizationMode
  fullName: Bodu.Collections.Generic.Extensions.RandomizationMode
- uid: Bodu.IRandomGenerator
  commentId: T:Bodu.IRandomGenerator
  parent: Bodu
  href: Bodu.IRandomGenerator.html
  name: IRandomGenerator
  nameWithType: IRandomGenerator
  fullName: Bodu.IRandomGenerator
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: Bodu
  commentId: N:Bodu
  href: Bodu.html
  name: Bodu
  nameWithType: Bodu
  fullName: Bodu
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect*
  commentId: Overload:Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect
  href: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.html#Bodu_Collections_Generic_Extensions_IEnumerableExtensions_RecursiveSelect__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___0___
  name: RecursiveSelect
  nameWithType: IEnumerableExtensions.RecursiveSelect
  fullName: Bodu.Collections.Generic.Extensions.IEnumerableExtensions.RecursiveSelect
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TSource}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, IEnumerable<TSource>>
  nameWithType: Func<TSource, IEnumerable<TSource>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TSource>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of TSource))
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Func(Of TSource, IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TSource
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TSource},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, TResult>
  nameWithType: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
  fullName.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TSource},System.Int32,{TResult}}
  commentId: T:System.Func{``0,System.Int32,``1}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TSource, int, TResult>
  nameWithType: Func<TSource, int, TResult>
  fullName: System.Func<TSource, int, TResult>
  nameWithType.vb: Func(Of TSource, Integer, TResult)
  fullName.vb: System.Func(Of TSource, Integer, TResult)
  name.vb: Func(Of TSource, Integer, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TSource},System.Int32,System.Int32,{TResult}}
  commentId: T:System.Func{``0,System.Int32,System.Int32,``1}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<TSource, int, int, TResult>
  nameWithType: Func<TSource, int, int, TResult>
  fullName: System.Func<TSource, int, int, TResult>
  nameWithType.vb: Func(Of TSource, Integer, Integer, TResult)
  fullName.vb: System.Func(Of TSource, Integer, Integer, TResult)
  name.vb: Func(Of TSource, Integer, Integer, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TSource},Bodu.Collections.Extensions.RecursiveSelectControl}
  commentId: T:System.Func{``0,Bodu.Collections.Extensions.RecursiveSelectControl}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, RecursiveSelectControl>
  nameWithType: Func<TSource, RecursiveSelectControl>
  fullName: System.Func<TSource, Bodu.Collections.Extensions.RecursiveSelectControl>
  nameWithType.vb: Func(Of TSource, RecursiveSelectControl)
  fullName.vb: System.Func(Of TSource, Bodu.Collections.Extensions.RecursiveSelectControl)
  name.vb: Func(Of TSource, RecursiveSelectControl)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: Bodu.Collections.Extensions.RecursiveSelectControl
    name: RecursiveSelectControl
    href: Bodu.Collections.Extensions.RecursiveSelectControl.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: Bodu.Collections.Extensions.RecursiveSelectControl
    name: RecursiveSelectControl
    href: Bodu.Collections.Extensions.RecursiveSelectControl.html
  - name: )
