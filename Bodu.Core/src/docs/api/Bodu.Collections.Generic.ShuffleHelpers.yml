### YamlMime:ManagedReference
items:
- uid: Bodu.Collections.Generic.ShuffleHelpers
  commentId: T:Bodu.Collections.Generic.ShuffleHelpers
  id: ShuffleHelpers
  parent: Bodu.Collections.Generic
  children:
  - Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.Collections.Generic.IEnumerable{``0},Bodu.IRandomGenerator,System.Int32)
  - Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.Memory{``0},Bodu.IRandomGenerator,System.Int32)
  - Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.ReadOnlySpan{``0},Bodu.IRandomGenerator,System.Int32)
  - Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(``0[],Bodu.IRandomGenerator,System.Int32)
  - Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(System.Memory{``0},Bodu.IRandomGenerator)
  - Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(System.Span{``0},Bodu.IRandomGenerator)
  - Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(``0[],Bodu.IRandomGenerator)
  langs:
  - csharp
  - vb
  name: ShuffleHelpers
  nameWithType: ShuffleHelpers
  fullName: Bodu.Collections.Generic.ShuffleHelpers
  type: Class
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: ShuffleHelpers
    path: Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
    startLine: 7
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Provides shared utilities for in-place and yield-based randomization using Fisher–Yates shuffle.
  example: []
  syntax:
    content: public static class ShuffleHelpers
    content.vb: Public Module ShuffleHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(``0[],Bodu.IRandomGenerator)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(``0[],Bodu.IRandomGenerator)
  id: Shuffle``1(``0[],Bodu.IRandomGenerator)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: Shuffle<T>(T[], IRandomGenerator)
  nameWithType: ShuffleHelpers.Shuffle<T>(T[], IRandomGenerator)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.Shuffle<T>(T[], Bodu.IRandomGenerator)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.Shuffle.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Shuffle
    path: Collections.Generic/ShuffleHelpers.Shuffle.cs
    startLine: 20
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Performs an in-place Fisher–Yates shuffle over the provided array.
  remarks: >-
    This method modifies the original array using the Fisher–Yates algorithm. Each element has an equal probability of ending up in

    any position.
  example: []
  syntax:
    content: public static void Shuffle<T>(T[] array, IRandomGenerator rng)
    parameters:
    - id: array
      type: '{T}[]'
      description: The array of elements to shuffle.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator used to shuffle elements.
    typeParameters:
    - id: T
      description: The type of the elements in the array.
    content.vb: Public Shared Sub Shuffle(Of T)(array As T(), rng As IRandomGenerator)
  overload: Bodu.Collections.Generic.ShuffleHelpers.Shuffle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">array</code> or <code class="paramref">rng</code> is <code>null</code>.
  nameWithType.vb: ShuffleHelpers.Shuffle(Of T)(T(), IRandomGenerator)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.Shuffle(Of T)(T(), Bodu.IRandomGenerator)
  name.vb: Shuffle(Of T)(T(), IRandomGenerator)
- uid: Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(System.Span{``0},Bodu.IRandomGenerator)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(System.Span{``0},Bodu.IRandomGenerator)
  id: Shuffle``1(System.Span{``0},Bodu.IRandomGenerator)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: Shuffle<T>(Span<T>, IRandomGenerator)
  nameWithType: ShuffleHelpers.Shuffle<T>(Span<T>, IRandomGenerator)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.Shuffle<T>(System.Span<T>, Bodu.IRandomGenerator)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.Shuffle.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Shuffle
    path: Collections.Generic/ShuffleHelpers.Shuffle.cs
    startLine: 44
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Performs an in-place Fisher–Yates shuffle over a span of elements.
  remarks: >-
    This method modifies the span in-place using the Fisher–Yates algorithm. It is optimized for shuffling stack-allocated or pooled

    data, and does not allocate memory.
  example: []
  syntax:
    content: public static void Shuffle<T>(Span<T> span, IRandomGenerator rng)
    parameters:
    - id: span
      type: System.Span{{T}}
      description: The span of elements to shuffle.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator used to shuffle elements.
    typeParameters:
    - id: T
      description: The type of the elements in the span.
    content.vb: Public Shared Sub Shuffle(Of T)(span As Span(Of T), rng As IRandomGenerator)
  overload: Bodu.Collections.Generic.ShuffleHelpers.Shuffle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">rng</code> is <code>null</code>.
  nameWithType.vb: ShuffleHelpers.Shuffle(Of T)(Span(Of T), IRandomGenerator)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.Shuffle(Of T)(System.Span(Of T), Bodu.IRandomGenerator)
  name.vb: Shuffle(Of T)(Span(Of T), IRandomGenerator)
- uid: Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(System.Memory{``0},Bodu.IRandomGenerator)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.Shuffle``1(System.Memory{``0},Bodu.IRandomGenerator)
  id: Shuffle``1(System.Memory{``0},Bodu.IRandomGenerator)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: Shuffle<T>(Memory<T>, IRandomGenerator)
  nameWithType: ShuffleHelpers.Shuffle<T>(Memory<T>, IRandomGenerator)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.Shuffle<T>(System.Memory<T>, Bodu.IRandomGenerator)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.Shuffle.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Shuffle
    path: Collections.Generic/ShuffleHelpers.Shuffle.cs
    startLine: 67
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Performs an in-place Fisher–Yates shuffle over a memory region.
  remarks: >-
    This method shuffles the contents of the <code class="paramref">memory</code> region in-place by accessing its underlying span. The

    original memory region is modified.
  example: []
  syntax:
    content: public static void Shuffle<T>(Memory<T> memory, IRandomGenerator rng)
    parameters:
    - id: memory
      type: System.Memory{{T}}
      description: The memory region to shuffle.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator used to shuffle elements.
    typeParameters:
    - id: T
      description: The type of the elements in the memory block.
    content.vb: Public Shared Sub Shuffle(Of T)(memory As Memory(Of T), rng As IRandomGenerator)
  overload: Bodu.Collections.Generic.ShuffleHelpers.Shuffle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">rng</code> is <code>null</code>.
  nameWithType.vb: ShuffleHelpers.Shuffle(Of T)(Memory(Of T), IRandomGenerator)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.Shuffle(Of T)(System.Memory(Of T), Bodu.IRandomGenerator)
  name.vb: Shuffle(Of T)(Memory(Of T), IRandomGenerator)
- uid: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.Collections.Generic.IEnumerable{``0},Bodu.IRandomGenerator,System.Int32)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.Collections.Generic.IEnumerable{``0},Bodu.IRandomGenerator,System.Int32)
  id: ShuffleAndYield``1(System.Collections.Generic.IEnumerable{``0},Bodu.IRandomGenerator,System.Int32)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: ShuffleAndYield<T>(IEnumerable<T>, IRandomGenerator, int)
  nameWithType: ShuffleHelpers.ShuffleAndYield<T>(IEnumerable<T>, IRandomGenerator, int)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield<T>(System.Collections.Generic.IEnumerable<T>, Bodu.IRandomGenerator, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: ShuffleAndYield
    path: Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
    startLine: 26
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Lazily yields a randomized subset of an <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> using a partial Fisher–Yates shuffle.
  remarks: >-
    Enumeration of <code class="paramref">source</code> and shuffling are deferred until the result is first iterated. The entire source is

    buffered in memory before shuffling begins. The original sequence is not modified.
  example: []
  syntax:
    content: public static IEnumerable<T> ShuffleAndYield<T>(IEnumerable<T> source, IRandomGenerator rng, int count)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source sequence to shuffle.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator used to select shuffled items.
    - id: count
      type: System.Int32
      description: The number of elements to yield from the shuffled source.
    typeParameters:
    - id: T
      description: The type of elements in the source sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A lazily-evaluated sequence of randomly selected items from the source.
    content.vb: Public Shared Function ShuffleAndYield(Of T)(source As IEnumerable(Of T), rng As IRandomGenerator, count As Integer) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">source</code> or <code class="paramref">rng</code> is <code>null</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown immediately if <code class="paramref">count</code> is negative.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: May be thrown upon first enumeration if <code class="paramref">count</code> exceeds the total number of elements in <code class="paramref">source</code>.
  nameWithType.vb: ShuffleHelpers.ShuffleAndYield(Of T)(IEnumerable(Of T), IRandomGenerator, Integer)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield(Of T)(System.Collections.Generic.IEnumerable(Of T), Bodu.IRandomGenerator, Integer)
  name.vb: ShuffleAndYield(Of T)(IEnumerable(Of T), IRandomGenerator, Integer)
- uid: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(``0[],Bodu.IRandomGenerator,System.Int32)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(``0[],Bodu.IRandomGenerator,System.Int32)
  id: ShuffleAndYield``1(``0[],Bodu.IRandomGenerator,System.Int32)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: ShuffleAndYield<T>(T[], IRandomGenerator, int)
  nameWithType: ShuffleHelpers.ShuffleAndYield<T>(T[], IRandomGenerator, int)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield<T>(T[], Bodu.IRandomGenerator, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: ShuffleAndYield
    path: Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
    startLine: 65
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Yields a randomized subset of the specified array by copying and shuffling it using a partial Fisher–Yates algorithm.
  remarks: >-
    The input array is copied before shuffling to ensure immutability of the original. Use this method when working with arrays and

    requiring source preservation.
  example: []
  syntax:
    content: public static IEnumerable<T> ShuffleAndYield<T>(T[] array, IRandomGenerator rng, int count)
    parameters:
    - id: array
      type: '{T}[]'
      description: The source array to shuffle. The original array is not modified.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator used for shuffling.
    - id: count
      type: System.Int32
      description: The number of elements to yield.
    typeParameters:
    - id: T
      description: The type of elements in the array.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A sequence of randomly selected elements from the array.
    content.vb: Public Shared Function ShuffleAndYield(Of T)(array As T(), rng As IRandomGenerator, count As Integer) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">array</code> or <code class="paramref">rng</code> is <code>null</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code class="paramref">count</code> is negative or exceeds the array length.
  nameWithType.vb: ShuffleHelpers.ShuffleAndYield(Of T)(T(), IRandomGenerator, Integer)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield(Of T)(T(), Bodu.IRandomGenerator, Integer)
  name.vb: ShuffleAndYield(Of T)(T(), IRandomGenerator, Integer)
- uid: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.ReadOnlySpan{``0},Bodu.IRandomGenerator,System.Int32)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.ReadOnlySpan{``0},Bodu.IRandomGenerator,System.Int32)
  id: ShuffleAndYield``1(System.ReadOnlySpan{``0},Bodu.IRandomGenerator,System.Int32)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: ShuffleAndYield<T>(ReadOnlySpan<T>, IRandomGenerator, int)
  nameWithType: ShuffleHelpers.ShuffleAndYield<T>(ReadOnlySpan<T>, IRandomGenerator, int)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield<T>(System.ReadOnlySpan<T>, Bodu.IRandomGenerator, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: ShuffleAndYield
    path: Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
    startLine: 92
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Yields a randomized subset of a <xref href="System.ReadOnlySpan%601" data-throw-if-not-resolved="false"></xref> using a copied buffer and array shuffle.
  remarks: This method eagerly copies <code class="paramref">span</code> into a new array, which is then shuffled.
  example: []
  syntax:
    content: public static IEnumerable<T> ShuffleAndYield<T>(ReadOnlySpan<T> span, IRandomGenerator rng, int count)
    parameters:
    - id: span
      type: System.ReadOnlySpan{{T}}
      description: The span to shuffle.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator to use.
    - id: count
      type: System.Int32
      description: The number of elements to yield.
    typeParameters:
    - id: T
      description: The type of elements in the span.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A sequence of shuffled items from the span.
    content.vb: Public Shared Function ShuffleAndYield(Of T)(span As ReadOnlySpan(Of T), rng As IRandomGenerator, count As Integer) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield*
  nameWithType.vb: ShuffleHelpers.ShuffleAndYield(Of T)(ReadOnlySpan(Of T), IRandomGenerator, Integer)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield(Of T)(System.ReadOnlySpan(Of T), Bodu.IRandomGenerator, Integer)
  name.vb: ShuffleAndYield(Of T)(ReadOnlySpan(Of T), IRandomGenerator, Integer)
- uid: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.Memory{``0},Bodu.IRandomGenerator,System.Int32)
  commentId: M:Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield``1(System.Memory{``0},Bodu.IRandomGenerator,System.Int32)
  id: ShuffleAndYield``1(System.Memory{``0},Bodu.IRandomGenerator,System.Int32)
  parent: Bodu.Collections.Generic.ShuffleHelpers
  langs:
  - csharp
  - vb
  name: ShuffleAndYield<T>(Memory<T>, IRandomGenerator, int)
  nameWithType: ShuffleHelpers.ShuffleAndYield<T>(Memory<T>, IRandomGenerator, int)
  fullName: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield<T>(System.Memory<T>, Bodu.IRandomGenerator, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: ShuffleAndYield
    path: Collections.Generic/ShuffleHelpers.ShuffleAndYield.cs
    startLine: 105
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Yields a randomized subset of a <xref href="System.Memory%601" data-throw-if-not-resolved="false"></xref> block using a copied buffer and array shuffle.
  remarks: This method eagerly copies <code class="paramref">memory</code> into a new array, which is then shuffled.
  example: []
  syntax:
    content: public static IEnumerable<T> ShuffleAndYield<T>(Memory<T> memory, IRandomGenerator rng, int count)
    parameters:
    - id: memory
      type: System.Memory{{T}}
      description: The memory block to shuffle.
    - id: rng
      type: Bodu.IRandomGenerator
      description: The random number generator to use.
    - id: count
      type: System.Int32
      description: The number of elements to yield.
    typeParameters:
    - id: T
      description: The type of elements in memory.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A sequence of shuffled items from the memory block.
    content.vb: Public Shared Function ShuffleAndYield(Of T)(memory As Memory(Of T), rng As IRandomGenerator, count As Integer) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield*
  nameWithType.vb: ShuffleHelpers.ShuffleAndYield(Of T)(Memory(Of T), IRandomGenerator, Integer)
  fullName.vb: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield(Of T)(System.Memory(Of T), Bodu.IRandomGenerator, Integer)
  name.vb: ShuffleAndYield(Of T)(Memory(Of T), IRandomGenerator, Integer)
references:
- uid: Bodu.Collections.Generic
  commentId: N:Bodu.Collections.Generic
  href: Bodu.html
  name: Bodu.Collections.Generic
  nameWithType: Bodu.Collections.Generic
  fullName: Bodu.Collections.Generic
  spec.csharp:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
  spec.vb:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Bodu.Collections.Generic.ShuffleHelpers.Shuffle*
  commentId: Overload:Bodu.Collections.Generic.ShuffleHelpers.Shuffle
  href: Bodu.Collections.Generic.ShuffleHelpers.html#Bodu_Collections_Generic_ShuffleHelpers_Shuffle__1___0___Bodu_IRandomGenerator_
  name: Shuffle
  nameWithType: ShuffleHelpers.Shuffle
  fullName: Bodu.Collections.Generic.ShuffleHelpers.Shuffle
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: Bodu.IRandomGenerator
  commentId: T:Bodu.IRandomGenerator
  parent: Bodu
  href: Bodu.IRandomGenerator.html
  name: IRandomGenerator
  nameWithType: IRandomGenerator
  fullName: Bodu.IRandomGenerator
- uid: Bodu
  commentId: N:Bodu
  href: Bodu.html
  name: Bodu
  nameWithType: Bodu
  fullName: Bodu
- uid: System.Span{{T}}
  commentId: T:System.Span{``0}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Memory{{T}}
  commentId: T:System.Memory{``0}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Memory`1
  commentId: T:System.Memory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield*
  commentId: Overload:Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield
  href: Bodu.Collections.Generic.ShuffleHelpers.html#Bodu_Collections_Generic_ShuffleHelpers_ShuffleAndYield__1_System_Collections_Generic_IEnumerable___0__Bodu_IRandomGenerator_System_Int32_
  name: ShuffleAndYield
  nameWithType: ShuffleHelpers.ShuffleAndYield
  fullName: Bodu.Collections.Generic.ShuffleHelpers.ShuffleAndYield
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlySpan{{T}}
  commentId: T:System.ReadOnlySpan{``0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
