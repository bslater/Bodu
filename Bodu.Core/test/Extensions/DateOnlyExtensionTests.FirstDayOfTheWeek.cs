// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;
using System.Collections.Generic;

namespace Bodu.Extensions
{
	public partial class DateOnlyExtensionsTests
	{
		[DataTestMethod]
		[DataRow("2024-04-14", "2024-04-14", "en-US")] // Sunday is first day
		[DataRow("2024-04-15", "2024-04-14", "en-US")] // Monday
		[DataRow("2024-04-16", "2024-04-14", "en-US")] // Tuesday

		[DataRow("2024-04-14", "2024-04-08", "en-GB")] // GB: Monday is first day
		[DataRow("2024-04-15", "2024-04-15", "en-GB")] // GB: Monday
		[DataRow("2024-04-20", "2024-04-15", "en-GB")] // GB: Saturday
		public void FirstDayOfTheWeek_WhenUsingDefaultCulture_ShouldReturnExpected(string inputDate, string expectedDate, string cultureName)
		{
			var originalCulture = CultureInfo.CurrentCulture;

			try
			{
				CultureInfo.CurrentCulture = new CultureInfo(cultureName);

				DateOnly input = DateOnly.Parse(inputDate, CultureInfo.CurrentCulture);
				DateOnly expected = DateOnly.Parse(expectedDate, CultureInfo.CurrentCulture);

				DateOnly result = input.FirstDayOfWeek();

				Assert.AreEqual(expected, result, $"Failed for culture: {cultureName}");
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCulture;
			}
		}

		[DataTestMethod]
		[DataRow("2024-04-14", "2024-04-08")] // Sunday → previous Monday
		[DataRow("2024-04-15", "2024-04-15")] // Monday (start of week)
		[DataRow("2024-04-17", "2024-04-15")] // Wednesday
		[DataRow("2024-04-21", "2024-04-15")] // Sunday
		public void FirstDayOfTheWeek_WhenUsingFrenchCulture_ShouldReturnExpected(string inputDate, string expectedDate)
		{
			CultureInfo frenchCulture = new CultureInfo("fr-FR");

			DateOnly input = DateOnly.Parse(inputDate);
			DateOnly expected = DateOnly.Parse(expectedDate);
			DateOnly result = input.FirstDayOfWeek(frenchCulture);

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void FirstDayOfTheWeek_WhenCultureIsNull_ShouldUseCurrentCulture()
		{
			var originalCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = DateTimeExtensionsTests.TestCulture;

				DateOnly input = new DateOnly(2024, 4, 18); // Thursday
															// Backtrack to previous Wednesday → 2024-04-17
				DateOnly expected = new DateOnly(2024, 4, 17);

				DateOnly result = input.FirstDayOfWeek(null!);

				Assert.AreEqual(expected, result, "Expected fallback to CultureInfo.CurrentCulture with Wednesday as start of week.");
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCulture; // Always restore
			}
		}

		[TestMethod]
		public void FirstDayOfTheWeek_WhenMinValue_ShouldReturnMin()
		{
			DateOnly min = DateOnly.MinValue;
			DateOnly result = min.FirstDayOfWeek(new CultureInfo("en-GB")); // Monday is first day

			Assert.AreEqual(min, result);
		}

		[TestMethod]
		public void FirstDayOfTheWeek_WhenMinValueAndCultureIsUS_ShouldReturnThrowArgumentOutOfRangeException()
		{
			DateOnly min = DateOnly.MinValue;
			var culture = new CultureInfo("en-US"); // Sunday is first day

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = min.FirstDayOfWeek(culture); // is outside the range for a DateOnly value
			});
		}

		[TestMethod]
		public void FirstDayOfTheWeek_WhenMaxValue_ShouldReturnStartOfWeek()
		{
			DateOnly max = DateOnly.MaxValue;
			DateOnly result = max.FirstDayOfWeek(new CultureInfo("en-US"));

			Assert.IsTrue(result <= max);
		}
	}
}
