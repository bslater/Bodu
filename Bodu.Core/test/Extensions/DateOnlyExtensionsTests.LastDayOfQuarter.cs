// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateOnlyExtensionsTests
	{

		public static IEnumerable<object[]> GetLastDayOfQuarterWithDefinitionTestData =>
			DateTimeExtensionsTests.QuarterTestData
				.Select(e => new object[] {e.Date, e.Definition, e.EndDate });

		[DataTestMethod]
		[DynamicData(nameof(GetLastDayOfQuarterWithDefinitionTestData), typeof(DateOnlyExtensionsTests))]
		public void LastDayOfQuarter_WhenUsingQuarterDefinition_ShouldReturnExpectedDate(DateTime inputDate, CalendarQuarterDefinition definition, DateTime expectedDate)
		{
			var input = DateOnly.FromDateTime(inputDate);
			var expected = DateOnly.FromDateTime(expectedDate);
			var result = input.LastDayOfQuarter(definition);
			Assert.AreEqual(expected, result);
		}

		public static IEnumerable<object[]> GetLastDayOfQuarterTestData =>
			DateTimeExtensionsTests.QuarterTestData
				.Where(e => e.Definition == CalendarQuarterDefinition.JanuaryDecember)
				.Select(e => new object[] {e.Date,  e.EndDate });

		[DataTestMethod]
		[DynamicData(nameof(GetLastDayOfQuarterTestData), typeof(DateOnlyExtensionsTests))]
		public void LastDayOfQuarter_WhenUsingDateOnly_ShouldReturnExpectedStartOfCalendarQuarter(DateTime inputDate, DateTime expectedDate)
		{
		var input = DateOnly.FromDateTime(inputDate);
		var expected = DateOnly.FromDateTime(expectedDate);
		var result = input.LastDayOfQuarter();
		Assert.AreEqual(expected, result);
		}


		public static IEnumerable<object[]> GetLastDayOfQuarterWithQuarterAndDefinitionTestData =>
			DateTimeExtensionsTests.QuarterTestData
				.Select(e => new object[] {e.Definition, e.Quarter,e.EndDate });

		[DataTestMethod]
		[DynamicData(nameof(GetLastDayOfQuarterWithQuarterAndDefinitionTestData), typeof(DateOnlyExtensionsTests))]
		public void LastDayOfQuarter_WhenUsingQuarterAndDefinition_ShouldReturnExpectedDate(CalendarQuarterDefinition definition, int quarter, DateTime expectedDate)
		{
		var expected = DateOnly.FromDateTime(expectedDate);
			int year = expected.AddMonths(-((quarter - 1) * 3)).Year;
			var result = DateOnlyExtensions.LastDayOfQuarter(definition, quarter, year);
			Assert.AreEqual(expected, result);
		}

		public static IEnumerable<object[]> GetLastDayOfQuarterWithQuarterTestData =>
			DateTimeExtensionsTests.QuarterTestData
				.Where(e => e.Definition == CalendarQuarterDefinition.JanuaryDecember)
				.Select(e => new object[] {e.Date,  e.Quarter,e.EndDate });

		[DataTestMethod]
		[DynamicData(nameof(GetLastDayOfQuarterWithQuarterTestData), typeof(DateOnlyExtensionsTests))]
		public void LastDayOfQuarter_WhenUsingQuarterAndCalendarDefinition_ShouldReturnExpectedDate(DateTime inputDate, int quarter, DateTime expectedDate)
		{
		var expected = DateOnly.FromDateTime(expectedDate);
			int year = expected.AddMonths(-((quarter - 1) * 3)).Year;
			var result = DateOnlyExtensions.LastDayOfQuarter(quarter, year);
			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenUsingInvalidProvider_ShouldThrowArgumentOutOfRange()
		{
			var input = new DateOnly(2024, 4, 20);
			var provider = new DateTimeExtensionsTests.InValidQuarterProvider();

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = input.LastDayOfQuarter(provider);
			});
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenUsingCustomQuarterDefinitionWithoutProvider_ShouldThrowInvalidOperation()
		{
			var input = new DateOnly(2024, 4, 20);

			Assert.ThrowsExactly<InvalidOperationException>(() =>
			{
				_ = input.LastDayOfQuarter(CalendarQuarterDefinition.Custom);
			});
		}

		public static IEnumerable<object[]> LastDayOfQuarterWithCustomProviderTestData =>
			DateTimeExtensionsTests.ValidQuarterProvider.QuarterTestData
				.Select(e => new object[] {e.Date, e.Quarter, e.EndDate });

		/// <summary>
		/// Verifies that LastDayOfQuarter returns the correct date using a valid quarter provider.
		/// </summary>
		[TestMethod]
		[DynamicData(nameof(LastDayOfQuarterWithCustomProviderTestData), DynamicDataSourceType.Property)]
		public void LastDayOfQuarter_WhenUsingValidQuarterProvider_ShouldReturnExpectedDate(DateTime inputDate, int quarter, DateTime expectedDate)
		{
			var input = DateOnly.FromDateTime(inputDate);
			var expected = DateOnly.FromDateTime(expectedDate);
			var provider = new DateTimeExtensionsTests.ValidQuarterProvider();
			var actual = input.LastDayOfQuarter(provider);
			Assert.AreEqual(expected, actual, $"Expected first day of Q{quarter} for {input:yyyy-MM-dd} to be {expected:yyyy-MM-dd}, but got {actual:yyyy-MM-dd}.");
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenInputIsMinValue_ShouldReturnExpectedDate()
		{
			var result = DateOnly.MinValue.LastDayOfQuarter(CalendarQuarterDefinition.JanuaryDecember);
			Assert.AreEqual(new DateOnly(1, 3, 31), result);
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenDefinitionIsInvalid_ShouldThrowExactly()
		{
			var input = new DateOnly(2024, 4, 20);
			var definition = (CalendarQuarterDefinition)999;

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = input.LastDayOfQuarter(definition);
			});
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenDefinitionIsInvalidAndQuarterIsValid_ShouldThrowExactly()
		{
			var definition = (CalendarQuarterDefinition)999;

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = DateOnlyExtensions.LastDayOfQuarter(definition, 1, 2025);
			});
		}

		[DataTestMethod]
		[DataRow(-1)]
		[DataRow(0)]
		[DataRow(5)]
		public void LastDayOfQuarter_WhenQuarterIsOutOfRangeAndDefinitionIsValid_ShouldThrowExactly(int quarter)
		{
			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = DateOnlyExtensions.LastDayOfQuarter(CalendarQuarterDefinition.JanuaryDecember, quarter, 2025);
			});
		}

		[DataTestMethod]
		[DataRow(-1)]
		[DataRow(0)]
		[DataRow(5)]
		public void LastDayOfQuarter_WhenQuarterIsOutOfRange_ShouldThrowExactly(int quarter)
		{
			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = DateOnlyExtensions.LastDayOfQuarter(quarter, 2025);
			});
		}


	}
}