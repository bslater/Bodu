// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateOnlyExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-04-17", "en-US", "2024-04-20")] // Wednesday → Saturday (en-US = Sunday start)
		[DataRow("2024-04-17", "en-GB", "2024-04-21")] // Wednesday → Sunday (en-GB = Monday start)
		[DataRow("2024-04-15", "en-US", "2024-04-20")] // Monday → Saturday
		[DataRow("2024-04-14", "en-US", "2024-04-20")] // Sunday → Saturday
		[DataRow("2024-04-15", "fr-FR", "2024-04-21")] // Monday → Sunday
		public void LastDayOfWeek_WithCulture_ShouldReturnExpected(string inputDate, string cultureName, string expectedDate)
		{
			DateOnly input = DateOnly.Parse(inputDate);
			CultureInfo culture = new CultureInfo(cultureName);
			DateOnly expected = DateOnly.Parse(expectedDate);
			DateOnly result = input.LastDayOfWeek(culture);

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void LastDayOfWeek_WhenCultureIsNull_ShouldUseCurrentCulture()
		{
			var originalCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = DateTimeExtensionsTests.TestCulture; //FirstDayOfWeek = Wednesday

				DateOnly input = new DateOnly(2024, 4, 18); // Thursday
															// Forward to next Tuesday → 2024-04-23
				DateOnly expected = new DateOnly(2024, 4, 23);

				DateOnly result = input.LastDayOfWeek(null!);

				Assert.AreEqual(expected, result, "Expected fallback to CultureInfo.CurrentCulture with Wednesday as start of week.");
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCulture; // Always restore
			}
		}

		[TestMethod]
		public void LastDayOfWeek_WhenUsingMinValue_ShouldSucceed()
		{
			DateOnly input = DateOnly.MinValue;
			DateOnly result = input.LastDayOfWeek(CultureInfo.InvariantCulture);

			Assert.IsTrue(result >= DateOnly.MinValue);
		}


		[TestMethod]
		public void LastDayOfWeek_WhenMinValueAndCultureIsUS_ShouldReturnThrowArgumentOutOfRangeException()
		{
			DateOnly min = DateOnly.MaxValue;
			var culture = new CultureInfo("en-US");// Sunday is first day

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = min.LastDayOfWeek(culture); // is outside the range for a DateOnly value
			});
		}

		[TestMethod]
		public void LastDayOfWeek_WhenUsingMaxValue_ShouldSucceed()
		{
			DateOnly max = DateOnly.MaxValue;
			var result = max.LastDayOfWeek(new CultureInfo("fa-IR")); // Friday is last day of week

			Assert.AreEqual(max, result);
		}


		/// <summary>
		/// Verifies that <see cref="DateOnlyExtensions.LastDayOfWeek"/> returns the expected result based on the specified weekend definition.
		/// </summary>
		[DataTestMethod]
		[DynamicData(nameof(DateTimeExtensionsTests.FirstAndLastDayOfWeekTestData), typeof(DateTimeExtensionsTests), DynamicDataSourceType.Property)]
		public void LastDayOfWeek_WhenUsingWeekendDefinition_ShouldReturnExpectedEnd(DateTime dateTimeInput, CalendarWeekendDefinition weekend, DateTime _, DateTime dateTimeExpected)
		{
			var input = DateOnly.FromDateTime(dateTimeInput);
			var expected = DateOnly.FromDateTime(dateTimeExpected);
			var actual = input.LastDayOfWeek(weekend);
			Assert.AreEqual(expected, actual);
		}

		/// <summary>
		/// Verifies that <see cref="DateOnlyExtensions.LastDayOfWeek"/> throws when given an undefined <see cref="CalendarWeekendDefinition"/>.
		/// </summary>
		[TestMethod]
		public void LastDayOfWeek_WhenWeekendIsUndefined_ShouldThrowArgumentOutOfRangeException()
		{
			var date = new DateOnly(2024, 1, 1);
			var invalidWeekend = (CalendarWeekendDefinition)(-5);

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = date.LastDayOfWeek(invalidWeekend);
			});
		}

		/// <summary>
		/// Verifies that <see cref="DateOnlyExtensions.LastDayOfWeek"/> throws if the calculated result exceeds <see cref="DateOnly.MaxValue"/>.
		/// </summary>
		[TestMethod]
		public void LastDayOfWeek_WhenResultExceedsMaxValue_ShouldThrowArgumentOutOfRangeException()
		{
			var nearMax = DateOnly.MaxValue.AddDays(-1); // e.g., Dec 30, 9999
			var weekend = CalendarWeekendDefinition.SaturdaySunday; // Start of week = Monday → end = Sunday

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = nearMax.LastDayOfWeek(weekend);
			});
		}

		/// <summary>
		/// Verifies that <see cref="DateOnlyExtensions.LastDayOfWeek"/> works near <see cref="DateOnly.MaxValue"/> without throwing.
		/// </summary>
		[TestMethod]
		public void LastDayOfWeek_WhenNearMaxValue_ShouldReturnValidResult()
		{
			var date = DateOnly.MaxValue.AddDays(-6); // 9999-12-25
			var result = date.LastDayOfWeek(CalendarWeekendDefinition.SaturdaySunday);

			Assert.IsTrue(result <= DateOnly.MaxValue);
			Assert.AreEqual(DayOfWeek.Sunday, result.DayOfWeek);
		}
	}
}
