// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateOnlyExtensionsTests
	{
		[DataTestMethod]
		[DynamicData(nameof(DateTimeExtensionsTests. NextDayOfWeekTestData),typeof(DateTimeExtensionsTests), DynamicDataSourceType.Method)]
		public void NextDayOfWeek_WhenCalled_ShouldReturnExpectedDate(DateTime inputDateTime, DayOfWeek targetDay, DateTime expectedDateTime)
		{
			var input = DateOnly.FromDateTime(inputDateTime);
			var expected = DateOnly.FromDateTime(expectedDateTime);

			var actual = input.NextDayOfWeek(targetDay);

				Assert.AreEqual(expected, actual);
		}

		[TestMethod]
		public void NextDayOfWeek_WhenInvalidEnum_ShouldThrowExactly()
		{
			var input = new DateOnly(2024, 4, 18);

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = input.NextDayOfWeek((DayOfWeek)999);
			});
		}

		[TestMethod]
		public void NextDayOfWeek_WhenUsingMinValue_ShouldReturnNextValidDate()
		{
			var actual = DateOnly.MinValue.NextDayOfWeek(DayOfWeek.Friday);

			Assert.IsTrue(actual >= DateOnly.MinValue);
		}

		[TestMethod]
		public void NextDayOfWeek_WhenUsingMaxValueMinus7_ShouldReturnWithinRange()
		{
			var input = DateOnly.MaxValue.AddDays(-7);
			var actual = input.NextDayOfWeek(input.DayOfWeek);

			Assert.IsTrue(actual <= DateOnly.MaxValue);
		}
	}
}