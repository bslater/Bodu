// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateOnlyExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-04-20T15:30:45.1234560Z", DateTimeKind.Utc, "2024-04-20T15:30:45.1234560Z")]
		public void ToIsoString_WhenUtcKind_ShouldReturnUtcFormatted(string inputStr, DateTimeKind kind, string expected)
		{
			DateTime input = DateTime.Parse(inputStr, null, DateTimeStyles.AdjustToUniversal).ToUniversalTime();
			string actual = input.ToIsoString();
			Assert.AreEqual(expected, actual);
		}

		[DataTestMethod]
		[DataRow("2024-04-20T15:30:45", false, "2024-04-20T15:30:45")]
		[DataRow("2024-04-20T15:30:45.1234567", true, null)] // Validate that it returns a valid round-trip
		public void ToIsoString_WithIncludeFractionalSeconds_ShouldRespectOption(string dateTimeStr, bool includeFraction, string? expected)
		{
			DateTime input = DateTime.Parse(dateTimeStr, CultureInfo.InvariantCulture);
			string actual = input.ToIsoString(includeFraction);

			if (expected != null)
				Assert.AreEqual(expected, actual);
			else
				Assert.IsTrue(actual.StartsWith("2024-04-20T15:30:45."));
		}

		[DataTestMethod]
		[DataRow("2024-04-20T15:30:45", DateTimeKind.Utc, "2024-04-20T15:30:45.0000000Z")]
		[DataRow("2024-04-20T15:30:45", DateTimeKind.Local, null)]
		[DataRow("2024-04-20T15:30:45", DateTimeKind.Unspecified, "2024-04-20T15:30:45.0000000")]
		public void ToIsoString_WithExplicitKind_ShouldRespectKind(string dateTimeStr, DateTimeKind kind, string? expected)
		{
			DateTime input = DateTime.SpecifyKind(DateTime.Parse(dateTimeStr, CultureInfo.InvariantCulture), kind);
			string actual = input.ToIsoString(kind);

			if (expected != null)
			{
				Assert.AreEqual(expected, actual);
			}
			else
			{
				// Parse back and confirm the kind is preserved
				DateTime parsed = DateTime.Parse(actual, null, DateTimeStyles.RoundtripKind);
				Assert.AreEqual(DateTimeKind.Local, parsed.Kind, "Expected kind mismatch for local input.");
				Assert.IsTrue(actual.StartsWith("2024-04-20T15:30:45"), "Expected prefix missing.");
			}
		}

		[DataTestMethod]
		[DataRow("2024-04-20T15:30:45", "yyyy-MM-dd", "2024-04-20")]
		[DataRow("2024-04-20T15:30:45", "HH:mm:ss", "15:30:45")]
		public void ToIsoString_WithCustomFormat_ShouldReturnExpected(string inputStr, string format, string expected)
		{
			DateTime input = DateTime.Parse(inputStr, CultureInfo.InvariantCulture);
			string actual = input.ToIsoString(format);
			Assert.AreEqual(expected, actual);
		}

		[TestMethod]
		public void ToIsoString_WithEmptyFormat_ShouldThrowExactly()
		{
			DateTime input = new DateTime(2024, 4, 20);
			Assert.ThrowsExactly<ArgumentNullException>(() => input.ToIsoString(""));
		}
	}
}