// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2000-01-01", "2024-04-18", 24)]                   // Birthday passed this year
		[DataRow("2000-04-18", "2024-04-18", 24)]                   // Birthday today
		[DataRow("2000-12-31", "2024-04-18", 23)]                   // Birthday not yet reached
		[DataRow("2000-02-29", "2023-02-28", 23)]                   // Leap year logic
		[DataRow("2024-04-18", "2000-04-18", -24)]                  // Reversed input
		[DataRow("2000-04-18T23:59:59", "2024-04-18T00:00:00", 23)] // Time ignored
		[DataRow("2000-04-18", "2000-04-18", 0)]                    // Same day
		public void Age_WhenCalculatedAgainstToday_ShouldReturnExpected(string birthAsString, string todayAsString, int expected)
        {
            DateTime birth = DateTime.Parse(birthAsString);
            DateTime today = DateTime.Parse(todayAsString);
            int age = birth.Age(today);

            Assert.AreEqual(expected, age);
        }

        [TestMethod]
        public void Age_WhenUsingDefaultToday_ShouldMatchExplicit()
        {
            DateTime birth = DateTime.Today.AddYears(-1);
            int expected = birth.Age(DateTime.Today);
            int actual = birth.Age();

            Assert.AreEqual(expected, actual);
        }

		[TestMethod]
		public void Age_WhenDateTimeIsUtc_ShouldCalculateCorrectly()
		{
			var birth = DateTime.SpecifyKind(new DateTime(2000, 4, 18), DateTimeKind.Utc);
			var today = DateTime.SpecifyKind(new DateTime(2024, 4, 18), DateTimeKind.Utc);

			Assert.AreEqual(24, birth.Age(today));
		}

	}
}
