// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions.Tests
{
	public partial class DateTimeExtensions
	{
		[DataTestMethod]
		[DataRow("2024-04-01", DayOfWeek.Monday, WeekOfMonthOrdinal.First, "2024-04-01")]   // 1st Monday
		[DataRow("2024-04-01", DayOfWeek.Friday, WeekOfMonthOrdinal.Second, "2024-04-12")]  // 2nd Friday
		[DataRow("2024-04-01", DayOfWeek.Sunday, WeekOfMonthOrdinal.Third, "2024-04-21")]   // 3rd Sunday
		[DataRow("2024-04-01", DayOfWeek.Monday, WeekOfMonthOrdinal.Fourth, "2024-04-22")]  // 4th Monday
		[DataRow("2024-04-01", DayOfWeek.Monday, WeekOfMonthOrdinal.Last, "2024-04-29")]    // Last Monday

		[DataRow("2024-02-01", DayOfWeek.Thursday, WeekOfMonthOrdinal.First, "2024-02-01")] // Feb 1st Thursday
		[DataRow("2024-02-01", DayOfWeek.Thursday, WeekOfMonthOrdinal.Last, "2024-02-29")]  // Leap year — last Thursday

		[DataRow("2023-02-01", DayOfWeek.Sunday, WeekOfMonthOrdinal.Last, "2023-02-26")]    // Non-leap Feb — last Sunday
		[DataRow("2023-02-01", DayOfWeek.Monday, WeekOfMonthOrdinal.Third, "2023-02-20")]   // Feb 2023 — 3rd Monday
		public void GetNthDayOfWeekInMonth_WhenCalled_ShouldReturnExpected(string inputDate, DayOfWeek dayOfWeek, WeekOfMonthOrdinal ordinal, string expectedStr)
		{
			DateTime input = DateTime.Parse(inputDate);
			DateTime expected = DateTime.Parse(expectedStr);
			DateTime actual = input.NthDayOfWeekInMonth(dayOfWeek, ordinal);

			Assert.AreEqual(expected, actual);
		}
	}
}
