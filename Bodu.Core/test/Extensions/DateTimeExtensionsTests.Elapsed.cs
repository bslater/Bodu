// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{
		private static readonly DateTime AnchorNow = DateTime.Now;

		[DataTestMethod]
		[DataRow(-5)]   // 5 minutes ago
		[DataRow(-10)]  // 10 minutes ago
		[DataRow(-30)]  // 30 minutes ago
		public void Elapsed_WhenPastTime_ShouldReturnPositiveTimeSpan(int minutesOffset)
		{
			DateTime past = AnchorNow.AddMinutes(minutesOffset);
			TimeSpan elapsed = past.GetElapsedTimeSince();

			Assert.IsTrue(elapsed.TotalMinutes >= Math.Abs(minutesOffset) - 0.01,
				$"Expected at least {Math.Abs(minutesOffset)} minutes elapsed, got {elapsed.TotalMinutes:F2}");
			Assert.IsTrue(elapsed.TotalMilliseconds > 0, "GetElapsedTimeSince should be positive for past dates.");
		}

		[TestMethod]
		public void Elapsed_WhenNow_ShouldReturnNearZero()
		{
			DateTime now = AnchorNow;
			TimeSpan elapsed = now.GetElapsedTimeSince();

			Assert.IsTrue(elapsed.TotalMilliseconds >= 0);
			Assert.IsTrue(elapsed.TotalSeconds < 1, $"GetElapsedTimeSince from 'now' should be near-zero but was {elapsed.TotalSeconds:F3}s.");
		}

		[DataTestMethod]
		[DataRow(1)]  // 1 minute in the future
		[DataRow(5)]  // 5 minutes in the future
		public void Elapsed_WhenFutureTime_ShouldReturnNegativeTimeSpan(int minutesOffset)
		{
			DateTime future = AnchorNow.AddMinutes(minutesOffset);
			TimeSpan elapsed = future.GetElapsedTimeSince();

			Assert.IsTrue(elapsed.TotalMilliseconds < 0, "GetElapsedTimeSince should be negative for future dates.");
			Assert.IsTrue(elapsed.TotalMinutes <= -minutesOffset + 0.01);
		}
	}
}
