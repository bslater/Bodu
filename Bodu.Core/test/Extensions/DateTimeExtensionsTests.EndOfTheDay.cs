// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-04-18T00:00:00", "2024-04-18T23:59:59.9999999")]
		[DataRow("2024-04-18T12:00:00", "2024-04-18T23:59:59.9999999")]
		[DataRow("2024-04-18T23:59:59", "2024-04-18T23:59:59.9999999")]
		[DataRow("0001-01-01T00:00:00", "0001-01-01T23:59:59.9999999")]
		public void EndOfTheDay_WhenCalled_ShouldReturnExpected(string inputDate, string expectedDate)
		{
			DateTime input = DateTime.Parse(inputDate, null, System.Globalization.DateTimeStyles.RoundtripKind);
			DateTime expected = DateTime.Parse(expectedDate, null, System.Globalization.DateTimeStyles.RoundtripKind);
			DateTime result = input.EndOfDay();

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void EndOfTheDay_WhenMaxDateTime_ShouldReturnMaxValue()
		{
			DateTime maxDate = DateTime.MaxValue.Date;
						var result  = maxDate.EndOfDay();

			Assert.AreEqual(DateTime.MaxValue, result);
		}

		[TestMethod]
		public void EndOfTheDay_ShouldPreserveKind()
		{
			DateTime local = new DateTime(2024, 4, 18, 10, 0, 0, DateTimeKind.Local);
			DateTime utc = new DateTime(2024, 4, 18, 10, 0, 0, DateTimeKind.Utc);
			DateTime unspecified = new DateTime(2024, 4, 18, 10, 0, 0, DateTimeKind.Unspecified);

			Assert.AreEqual(DateTimeKind.Local, local.EndOfDay().Kind);
			Assert.AreEqual(DateTimeKind.Utc, utc.EndOfDay().Kind);
			Assert.AreEqual(DateTimeKind.Unspecified, unspecified.EndOfDay().Kind);
		}
	}
}
