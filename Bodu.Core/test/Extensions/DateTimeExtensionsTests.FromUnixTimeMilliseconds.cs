// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public class DateTimeExtensions_FromUnixTimeMillisecondsTests
	{
		[DataTestMethod]
		[DataRow(0, "1970-01-01T00:00:00.0000000Z")]                            // Epoch
		[DataRow(1000, "1970-01-01T00:00:01.0000000Z")]                         // +1 second
		[DataRow(60000, "1970-01-01T00:01:00.0000000Z")]                        // +1 minute
		[DataRow(3600000, "1970-01-01T01:00:00.0000000Z")]                      // +1 hour
		[DataRow(-1000, "1969-12-31T23:59:59.0000000Z")]                        // -1 second (before epoch)
		[DataRow(946684800000, "2000-01-01T00:00:00.0000000Z")]                 // Y2K
		[DataRow(2147483647000, "2038-01-19T03:14:07.0000000Z")]                // 32-bit signed int max seconds
		[DataRow(-62135596800000, "0001-01-01T00:00:00.0000000Z")]              // DateTime.MinValue
		[DataRow(253402300799999, "9999-12-31T23:59:59.9990000Z")]              // DateTime.MaxValue
		public void FromUnixTimeMilliseconds_WhenValidInput_ShouldReturnExpected(long input, string expectedUtcIso)
		{
			DateTime actual = input.FromUnixTimeMilliseconds();

			Assert.AreEqual(DateTime.Parse(expectedUtcIso).ToUniversalTime(), actual);
			Assert.AreEqual(DateTimeKind.Utc, actual.Kind);
		}

		[TestMethod]
		public void FromUnixTimeMilliseconds_WhenBelowMinimum_ShouldThrow()
		{
			long belowMin = -62135596800001; // 1 ms before DateTime.MinValue

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = belowMin.FromUnixTimeMilliseconds();
			});
		}

		[TestMethod]
		public void FromUnixTimeMilliseconds_WhenAboveMaximum_ShouldThrow()
		{
			long aboveMax = 253402300800000; // 1 ms after DateTime.MaxValue

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = aboveMax.FromUnixTimeMilliseconds();
			});
		}
	}
}