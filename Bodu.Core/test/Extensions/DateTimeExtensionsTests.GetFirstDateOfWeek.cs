// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		public static IEnumerable<object[]> IsoWeekTestCases => new[]
		{
			new object[] { 2024, 1, new DateTime(2024, 1, 1) },  // Monday
			new object[] { 2024, 2, new DateTime(2024, 1, 8) },
			new object[] { 2024, 3, new DateTime(2024, 1, 15) },
			new object[] { 2024, 4, new DateTime(2024, 1, 22) },
			new object[] { 2024, 52, new DateTime(2024, 12, 23) },
			new object[] { 2024, 53, new DateTime(2024, 12, 30) }
		};

		[TestMethod]
		[DynamicData(nameof(IsoWeekTestCases))]
		public void GetFirstDateOfWeek_WithCultureInfo_ShouldReturnExpectedDate(int year, int week, DateTime expected)
		{
			CultureInfo culture = CultureInfo.GetCultureInfo("en-GB"); // ISO-8601 based calendar rule
			DateTime result = DateTimeExtensions.GetFirstDateOfWeek(year, week, culture);

			Assert.AreEqual(expected, result);
		}

		public static IEnumerable<object[]> WeekendBasedTestCases => new[]
		{
			new object[] { 2024, 1, CalendarWeekendDefinition.SaturdaySunday, new DateTime(2024, 1, 1) },  // Mon-start
			new object[] { 2024, 1, CalendarWeekendDefinition.FridaySaturday, new DateTime(2023, 12, 31) }, // Sun-start
			new object[] { 2024, 1, CalendarWeekendDefinition.SundayOnly, new DateTime(2024, 1, 1) },       // Mon-start
			new object[] { 2024, 1, CalendarWeekendDefinition.FridayOnly, new DateTime(2023, 12, 30) }      // Sat-start
		};

		[TestMethod]
		[DynamicData(nameof(WeekendBasedTestCases))]
		public void GetFirstDateOfWeek_WithStandardWeekend_ShouldReturnExpectedDate(int year, int week, CalendarWeekendDefinition weekend, DateTime expected)
		{
			DateTime result = DateTimeExtensions.GetFirstDateOfWeek(year, week, weekend);

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void GetFirstDateOfWeek_WithInvalidWeekNumber_ShouldThrowExactly()
		{
			// en-US: Week 54 does not exist
			CultureInfo culture = CultureInfo.GetCultureInfo("en-US");

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				DateTimeExtensions.GetFirstDateOfWeek(2024, 54, culture);
			});
		}

		[TestMethod]
		public void GetFirstDateOfWeek_WithInvalidWeekendEnum_ShouldThrowExactly()
		{
			CalendarWeekendDefinition invalid = (CalendarWeekendDefinition)999;

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				DateTimeExtensions.GetFirstDateOfWeek(2024, 1, invalid);
			});
		}

		/// <summary>
		/// Verifies that the current culture is used when the culture argument is null.
		/// </summary>
		[TestMethod]
		public void GetFirstDateOfWeek_WhenCultureIsNull_ShouldUseCurrentCulture()
		{
			var knownCulture = new CultureInfo("en-GB"); // Week starts on Monday, FirstFourDayWeek
			var year = 2024;
			var week = 1;

			var originalCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = knownCulture;
				var resultWithNull = DateTimeExtensions.GetFirstDateOfWeek(year, week, null);
				var resultWithExplicit = DateTimeExtensions.GetFirstDateOfWeek(year, week, knownCulture);

				// Assert
				Assert.AreEqual(resultWithExplicit, resultWithNull, "The method should default to CultureInfo.CurrentCulture when null is passed.");
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCulture;
			}
		}
	}

}