// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;
using Bodu.Extensions.Tests;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{


		[DataTestMethod]
		[DynamicData(nameof(QuarterDefinitionTestData), typeof(DateTimeExtensionsTests))]
		public void GetStartMonthFromQuarter_WhenCalledWithValidInputs_ShouldReturnExpectedMonth(DateTime _, CalendarQuarterDefinition definition, int quarter, DateTime expected, DateTime __)
		{
			int result = DateTimeExtensions.GetStartMonthFromQuarter(definition, quarter);

			Assert.AreEqual(expected.Month, result);
		}

		[TestMethod]
		public void GetStartMonthFromQuarter_WhenCustomQuarterDefinition_ShouldThrowOutOfRangeException()
		{
			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = DateTimeExtensions.GetStartMonthFromQuarter(CalendarQuarterDefinition.Custom, 1);
			});
		}

		[DataTestMethod]
		[DataRow(-1)]
		[DataRow(0)]
		[DataRow(5)]
		public void GetStartMonthFromQuarter_WhenQuarterIsOutOfRange_ShouldThrowArgumentOutOfRangeException(int quarter)
		{
			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = DateTimeExtensions.GetStartMonthFromQuarter(CalendarQuarterDefinition.CalendarYear,quarter);
			});
		}

		[TestMethod]
		public void GetStartMonthFromQuarter_WhenDefinitionIsInvalid_ShouldThrowArgumentOutOfRangeException()
		{
			var invalidDefinition = (CalendarQuarterDefinition)999;

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = DateTimeExtensions.GetStartMonthFromQuarter(invalidDefinition, 1);
			});
		}



		[DataTestMethod]
		[DynamicData(nameof(AllQuarterDefinitionsExceptCustom), typeof(DateTimeExtensionsTests))]
		public void GetStartMonthFromQuarter_WhenUsedWithQuarterMethod_ShouldMatchReverseMapping(CalendarQuarterDefinition definition)
		{
			for (int month = 1; month <= 12; month++)
			{
				var date = new DateTime(2024, month, 1);
				int quarter = date.Quarter(definition);
				int startMonth = DateTimeExtensions.GetStartMonthFromQuarter(definition, quarter);

				Assert.IsTrue(startMonth >= 1 && startMonth <= 12);
				Assert.AreEqual(quarter, new DateTime(2024, startMonth, 1).Quarter(definition));
			}
		}

	}
}