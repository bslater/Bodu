// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{


		[DataTestMethod]
		[DynamicData(nameof(WeekendTestData), typeof(DateTimeExtensionsTests))]
		public void IsWeekday_WhenUsingStandardWeekend_ShouldReturnExpected(DateTime input, CalendarWeekendDefinition weekend, Type? providerType, bool expected)
		{
			ICalendarWeekendProvider? provider = providerType is null ? null : (ICalendarWeekendProvider)Activator.CreateInstance(providerType)!;

			bool result = input.IsWeekday(weekend, provider);
			Assert.AreEqual(!expected, result, $"Failed for {input} with weekend {weekend}");
		}

		[TestMethod]
		public void IsWeekday_WhenCustomRuleMissingProvider_ShouldThrow()
		{
			DateTime date = new DateTime(2024, 4, 19);
			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = date.IsWeekday(CalendarWeekendDefinition.Custom, null!);
			});
		}

	}
}