// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;
using System.Data;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{


		[DataTestMethod]
		[DynamicData(nameof(WeekendTestData), DynamicDataSourceType.Method)]
		public void IsWeekend_WhenUsingStandardWeekend_ShouldReturnExpected(DateTime input, CalendarWeekendDefinition weekend, Type? providerType, bool expected)
		{
			IWeekendDefinitionProvider? provider = providerType is null ? null : (IWeekendDefinitionProvider)Activator.CreateInstance(providerType)!;

			bool actual = input.IsWeekend(weekend, provider);
			Assert.AreEqual(expected, actual, $"Failed for {input} with weekend {weekend}");
		}

		[TestMethod]
		public void IsWeekend_WhenCustomRuleMissingProvider_ShouldThrowExactly()
		{
			DateTime date = new DateTime(2024, 4, 19);
			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = date.IsWeekend(CalendarWeekendDefinition.Custom, null!);
			});
		}

		[TestMethod]
		public void IsWeekend_WhenInvalidEnum_ShouldThrowExactly()
		{
			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = DateTimeExtensions.IsWeekend((DayOfWeek)99, CalendarWeekendDefinition.SaturdaySunday);
			});
		}


	}
}