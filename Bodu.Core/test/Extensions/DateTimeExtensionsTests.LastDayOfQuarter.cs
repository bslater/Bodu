// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DynamicData(nameof(QuarterDefinitionTestData), typeof(DateTimeExtensionsTests))]
		public void LastDayOfQuarter_WhenUsingQuarterDefinition_ShouldReturnExpectedDate(DateTime input, CalendarQuarterDefinition definition, int _, DateTime ___, DateTime expected)
		{
			var result = input.LastDayOfQuarter(definition);

			Assert.AreEqual(expected, result);
		}

		[DataTestMethod]
		[DynamicData(nameof(CalendarQuarterDefinitionTestData), typeof(DateTimeExtensionsTests))]
		public void LastDayOfQuarter_WhenOnlyDateTime_ShouldReturnExpectedQuarter(DateTime input, CalendarQuarterDefinition _, int __, DateTime ___, DateTime expected)
		{
			var result = input.LastDayOfQuarter();

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenUsingInvalidProvider_ShouldThrowExactly()
		{
			var input = new DateTime(2024, 4, 20);
			var provider = new DateTimeExtensionsTests.InValidQuarterProvider();

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = input.LastDayOfQuarter(provider);
			});
		}

		[TestMethod]
		public void LastDayOfQuarter_WhenUsingCustomQuarterDefinitionWithoutProvider_ShouldThrowExactly()
		{
			var input = new DateTime(2024, 4, 20);

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = input.LastDayOfQuarter(CalendarQuarterDefinition.Custom);
			});
		}

		/// <summary>
		/// Verifies that LastDayOfQuarter returns the correct date using a custom quarter provider.
		/// </summary>
		/// <param name="input">The date for which the last day of the quarter is evaluated.</param>
		/// <param name="quarter">The expected quarter number.</param>
		/// <param name="firstDay">The expected first day of the quarter (unused in this test).</param>
		/// <param name="expectedLastDay">The expected last day of the quarter.</param>
		[TestMethod]
		[DynamicData(nameof(ValidQuarterProvider.QuarterDefinitionTestData), typeof(ValidQuarterProvider))]
		public void LastDayOfQuarter_WhenUsingValidQuarterProvider_ShouldReturnExpected(DateTime input, int quarter, DateTime firstDay, DateTime expectedLastDay)
		{
			var provider =new  ValidQuarterProvider();
			DateTime actual = input.LastDayOfQuarter(provider);
			Assert.AreEqual(expectedLastDay, actual, $"Expected last day of Q{quarter} for {input:yyyy-MM-dd} to be {expectedLastDay:yyyy-MM-dd}, but got {actual:yyyy-MM-dd}.");
		}

	}
}