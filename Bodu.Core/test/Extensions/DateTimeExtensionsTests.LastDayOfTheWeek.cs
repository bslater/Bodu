// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-04-17", "en-US", "2024-04-20")] // Wednesday → Saturday (en-US = Sunday start)
		[DataRow("2024-04-17", "en-GB", "2024-04-21")] // Wednesday → Sunday (en-GB = Monday start)
		[DataRow("2024-04-15", "en-US", "2024-04-20")] // Monday → Saturday
		[DataRow("2024-04-14", "en-US", "2024-04-20")] // Sunday → Saturday
		[DataRow("2024-04-15", "fr-FR", "2024-04-21")] // Monday → Sunday
		public void LastDayOfTheWeek_WithCulture_ShouldReturnExpected(string inputDate, string cultureName, string expectedDate)
		{
			DateTime input = DateTime.Parse(inputDate);
			CultureInfo culture = new CultureInfo(cultureName);
			DateTime expected = DateTime.Parse(expectedDate).Date;
			DateTime result = input.LastDayOfWeek(culture);

			Assert.AreEqual(expected, result);
			Assert.AreEqual(input.Kind, result.Kind);
			Assert.AreEqual(TimeSpan.Zero, result.TimeOfDay);
		}

		[TestMethod]
		public void LastDayOfTheWeek_WhenCultureIsNull_ShouldUseCurrentCulture()
		{
			var originalCulture = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = DateTimeExtensionsTests.TestCulture; //FirstDayOfWeek = Wednesday

				DateTime input = new DateTime(2024, 4, 18); // Thursday
															// Forward to next Tuesday → 2024-04-23
				DateTime expected = new DateTime(2024, 4, 23);

				DateTime result = input.LastDayOfWeek(null!);

				Assert.AreEqual(expected, result, "Expected fallback to CultureInfo.CurrentCulture with Wednesday as start of week.");
			}
			finally
			{
				CultureInfo.CurrentCulture = originalCulture; // Always restore
			}
		}

		[TestMethod]
		public void LastDayOfTheWeek_WhenKindIsUtc_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 17, 12, 0, 0, DateTimeKind.Utc);
			DateTime result = input.LastDayOfWeek(new CultureInfo("en-US"));

			Assert.AreEqual(DateTimeKind.Utc, result.Kind);
		}

		[TestMethod]
		public void LastDayOfTheWeek_WhenKindIsLocal_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 17, 12, 0, 0, DateTimeKind.Local);
			DateTime result = input.LastDayOfWeek(new CultureInfo("en-US"));

			Assert.AreEqual(DateTimeKind.Local, result.Kind);
		}

		[TestMethod]
		public void LastDayOfTheWeek_WhenUsingMinValue_ShouldSucceed()
		{
			DateTime input = DateTime.MinValue;
			DateTime result = input.LastDayOfWeek(CultureInfo.InvariantCulture);

			Assert.AreEqual(DateTimeKind.Unspecified, result.Kind);
			Assert.IsTrue(result >= DateTime.MinValue);
		}


		[TestMethod]
		public void LastDayOfTheWeek_WhenMinValueAndCultureIsUS_ShouldReturnThrowArgumentOutOfRangeException()
		{
			DateTime min = DateTime.MaxValue;
			var culture = new CultureInfo("en-US");// Sunday is first day

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = min.LastDayOfWeek(culture); // is outside the range for a DateTime value
			});
		}

		[TestMethod]
		public void LastDayOfTheWeek_WhenUsingMaxValue_ShouldSucceed()
		{
			DateTime max = DateTime.MaxValue;
			var result = max.LastDayOfWeek(new CultureInfo("fa-IR")); // Friday is last day of week

			Assert.AreEqual(max.Date, result);
		}
	}
}
