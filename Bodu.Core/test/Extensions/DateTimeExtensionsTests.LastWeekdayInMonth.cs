// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-04-01", DayOfWeek.Monday, "2024-04-29")]
		[DataRow("2024-04-01", DayOfWeek.Sunday, "2024-04-28")]
		[DataRow("2024-02-15", DayOfWeek.Wednesday, "2024-02-28")] // Leap year
		[DataRow("2023-02-15", DayOfWeek.Tuesday, "2023-02-28")]   // Non-leap year
		[DataRow("2024-12-01", DayOfWeek.Saturday, "2024-12-28")]
		[DataRow("2024-06-10", DayOfWeek.Sunday, "2024-06-30")]
		public void LastWeekdayInMonth_WhenCalled_ShouldReturnExpectedDate(string inputDate, DayOfWeek dayOfWeek, string expectedDate)
		{
			DateTime input = DateTime.Parse(inputDate);
			DateTime expected = DateTime.Parse(expectedDate);
			DateTime result = input.LastWeekdayInMonth(dayOfWeek);

			Assert.AreEqual(expected, result);
			Assert.AreEqual(input.Kind, result.Kind);
			Assert.AreEqual(TimeSpan.Zero, result.TimeOfDay);
		}

		[TestMethod]
		public void LastWeekdayInMonth_WhenInvalidDayOfWeek_ShouldThrow()
		{
			DateTime input = new DateTime(2024, 4, 1);
			var invalidDay = (DayOfWeek)999;

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = input.LastWeekdayInMonth(invalidDay);
			});
		}

		[TestMethod]
		public void LastWeekdayInMonth_WhenKindIsUtc_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 7, 5, 10, 0, 0, DateTimeKind.Utc);
			DateTime result = input.LastWeekdayInMonth(DayOfWeek.Sunday);

			Assert.AreEqual(DateTimeKind.Utc, result.Kind);
		}

		[TestMethod]
		public void LastWeekdayInMonth_WhenKindIsLocal_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 7, 5, 10, 0, 0, DateTimeKind.Local);
			DateTime result = input.LastWeekdayInMonth(DayOfWeek.Saturday);

			Assert.AreEqual(DateTimeKind.Local, result.Kind);
		}

		[TestMethod]
		public void LastWeekdayInMonth_WhenMinValue_ShouldReturnValidResult()
		{
			DateTime result = DateTime.MinValue.LastWeekdayInMonth(DayOfWeek.Monday);

			Assert.IsTrue(result >= DateTime.MinValue && result <= DateTime.MinValue.AddMonths(1).AddDays(-1));
		}

		[TestMethod]
		public void LastWeekdayInMonth_WhenMaxValue_ShouldReturnValidResult()
		{
			DateTime result = DateTime.MaxValue.LastWeekdayInMonth(DayOfWeek.Friday);

			Assert.IsTrue(result <= DateTime.MaxValue);
		}
	}
}
