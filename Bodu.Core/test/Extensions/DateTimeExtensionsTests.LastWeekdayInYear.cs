// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{
		[DataTestMethod]
		[DataRow("2024-01-01", DayOfWeek.Sunday, "2024-12-29")]    // Last Sunday of 2024
		[DataRow("2024-01-01", DayOfWeek.Tuesday, "2024-12-31")]   // Dec 31 is Tuesday
		[DataRow("2023-06-15", DayOfWeek.Saturday, "2023-12-30")]  // Last Saturday in 2023
		[DataRow("2022-09-01", DayOfWeek.Monday, "2022-12-26")]
		[DataRow("1900-07-15", DayOfWeek.Wednesday, "1900-12-26")]
		[DataRow("2000-02-29", DayOfWeek.Friday, "2000-12-29")]    // Leap year
		public void LastWeekdayInYear_WhenCalled_ShouldReturnExpectedDate(string inputDate, DayOfWeek dayOfWeek, string expectedDate)
		{
			DateTime input = DateTime.Parse(inputDate);
			var expected = DateTime.Parse(expectedDate);
			DateTime result = input.LastWeekdayInYear(dayOfWeek);

			Assert.AreEqual(expected, result);
			Assert.AreEqual(input.Kind, result.Kind);
			Assert.AreEqual(TimeSpan.Zero, result.TimeOfDay);
		}

		[TestMethod]
		public void LastWeekdayInYear_WhenDayOfWeekIsInvalid_ShouldThrowExactly()
		{
			DateTime input = new DateTime(2024, 1, 1);
			var invalidDay = (DayOfWeek)999;

			Assert.ThrowsExactly<ArgumentOutOfRangeException>(() =>
			{
				_ = input.LastWeekdayInYear(invalidDay);
			});
		}

		[TestMethod]
		public void LastWeekdayInYear_WhenKindIsUtc_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 3, 10, 12, 0, 0, DateTimeKind.Utc);
			DateTime result = input.LastWeekdayInYear(DayOfWeek.Thursday);

			Assert.AreEqual(DateTimeKind.Utc, result.Kind);
		}

		[TestMethod]
		public void LastWeekdayInYear_WhenKindIsLocal_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 3, 10, 12, 0, 0, DateTimeKind.Local);
			DateTime result = input.LastWeekdayInYear(DayOfWeek.Monday);

			Assert.AreEqual(DateTimeKind.Local, result.Kind);
		}

		[TestMethod]
		public void LastWeekdayInYear_WhenUsingMinValue_ShouldReturnInYear1()
		{
			DateTime input = DateTime.MinValue;
			DateTime result = input.LastWeekdayInYear(DayOfWeek.Monday);

			Assert.IsTrue(result.Year == 1);
			Assert.IsTrue(result <= new DateTime(1, 12, 31));
		}

		[TestMethod]
		public void LastWeekdayInYear_WhenUsingMaxValue_ShouldReturnValidDate()
		{
			DateTime input = DateTime.MaxValue;
			DateTime result = input.LastWeekdayInYear(DayOfWeek.Friday);

			Assert.IsTrue(result <= DateTime.MaxValue);
		}
	}
}