// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow(2024, 1, "January", "en-US")]
		[DataRow(2024, 2, "February", "en-US")]
		[DataRow(2024, 3, "März", "de-DE")]
		[DataRow(2024, 4, "avril", "fr-FR")]
		[DataRow(2024, 5, "maggio", "it-IT")]
		[DataRow(2024, 6, "июнь", "ru-RU")]
		[DataRow(2024, 12, "desember", "nb-NO")]
		public void MonthName_WithCulture_ShouldReturnLocalizedName(int year, int month, string expectedMonthName, string cultureCode)
		{
			DateTime input = new DateTime(year, month, 1);
			CultureInfo culture = new CultureInfo(cultureCode);
			string result = input.MonthName(culture);

			Assert.AreEqual(expectedMonthName, result);
		}

		[TestMethod]
		public void MonthName_WhenCultureIsNull_ShouldFallbackToCurrentCulture()
		{
			var original = CultureInfo.CurrentCulture;
			try
			{
				CultureInfo.CurrentCulture = new CultureInfo("fr-FR");
				DateTime input = new DateTime(2024, 1, 1);

				string result = input.MonthName(null!);

				Assert.AreEqual("janvier", result);
			}
			finally
			{
				CultureInfo.CurrentCulture = original;
			}
		}

		[TestMethod]
		public void MonthName_WhenUsingMinValue_ShouldReturnExpected()
		{
			DateTime input = DateTime.MinValue; // 0001-01-01
			string result = input.MonthName(new CultureInfo("en-US"));

			Assert.AreEqual("January", result);
		}

		[TestMethod]
		public void MonthName_WhenUsingMaxValue_ShouldReturnExpected()
		{
			DateTime input = DateTime.MaxValue; // 9999-12-31
			string result = input.MonthName(new CultureInfo("en-US"));

			Assert.AreEqual("December", result);
		}
	}
}
