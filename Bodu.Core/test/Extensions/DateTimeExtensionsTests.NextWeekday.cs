// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{
		[DataTestMethod]
		[DataRow("2024-04-19T02:30:10", DayOfWeek.Monday, "2024-04-22T02:30:10")]
		[DataRow("2024-04-15T12:00:00", DayOfWeek.Tuesday, "2024-04-16T12:00:00")]
		[DataRow("2024-04-15T12:00:00", DayOfWeek.Wednesday, "2024-04-17T12:00:00")]
		[DataRow("2024-04-18T17:45:00", DayOfWeek.Thursday, "2024-04-25T17:45:00")]
		[DataRow("2024-04-18T08:15:30", DayOfWeek.Friday, "2024-04-19T08:15:30")]
		[DataRow("2024-04-21T23:59:59", DayOfWeek.Saturday, "2024-04-27T23:59:59" )]
		[DataRow("2024-04-15T06:33:44", DayOfWeek.Sunday, "2024-04-21T06:33:44")]
		public void NextWeekday_WhenCalled_ShouldReturnExpectedDate(string inputDate, DayOfWeek targetDay, string expectedDate)
		{
				DateTime input = DateTime.Parse(inputDate);
				DateTime expected = DateTime.Parse(expectedDate);
				DateTime result = input.NextWeekday(targetDay);

				Assert.AreEqual(expected, result, "Expected date mismatch.");
		}

		[TestMethod]
		public void NextWeekday_WhenInvalidEnum_ShouldThrow()
		{
			DateTime input = new DateTime(2024, 4, 18);

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = input.NextWeekday((DayOfWeek)999);
			});
		}

		[TestMethod]
		public void NextWeekday_WhenKindIsLocal_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 18, 10, 0, 0, DateTimeKind.Local);
			DateTime result = input.NextWeekday(DayOfWeek.Wednesday);

			Assert.AreEqual(DateTimeKind.Local, result.Kind);
		}

		[TestMethod]
		public void NextWeekday_WhenKindIsUnspecified_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 18, 10, 0, 0, DateTimeKind.Unspecified);
			DateTime result = input.NextWeekday(DayOfWeek.Sunday);

			Assert.AreEqual(DateTimeKind.Unspecified, result.Kind);
		}

		[TestMethod]
		public void NextWeekday_WhenUsingMinValue_ShouldReturnNextValidDate()
		{
			DateTime result = DateTime.MinValue.NextWeekday(DayOfWeek.Friday);

			Assert.IsTrue(result >= DateTime.MinValue);
		}

		[TestMethod]
		public void NextWeekday_WhenUsingMaxValueMinus7_ShouldReturnWithinRange()
		{
			DateTime input = DateTime.MaxValue.AddDays(-7);
			DateTime result = input.NextWeekday(input.DayOfWeek);

			Assert.IsTrue(result <= DateTime.MaxValue);
		}
	}
}