// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-04-18T14:30:00", DayOfWeek.Monday, "2024-04-15T14:30:00"	)]
		[DataRow("2024-04-21T05:00:00", DayOfWeek.Tuesday, "2024-04-16T05:00:00")]
		[DataRow("2024-04-21T05:00:00", DayOfWeek.Wednesday, "2024-04-17T05:00:00")]
		[DataRow("2024-04-18T14:30:00", DayOfWeek.Thursday, "2024-04-11T14:30:00")]
		[DataRow("2024-04-19T03:00:00", DayOfWeek.Friday, "2024-04-12T03:00:00"	)]
		[DataRow("2024-04-19T03:00:00", DayOfWeek.Saturday, "2024-04-13T03:00:00")]
		[DataRow("2024-04-15T23:59:59", DayOfWeek.Sunday, "2024-04-14T23:59:59")]
		public void PreviousWeekday_WhenCalled_ShouldReturnExpectedDate(string inputDate, DayOfWeek targetDay, string expectedDate)
		{
			DateTime input = DateTime.Parse(inputDate);
			DateTime expected = DateTime.Parse(expectedDate);
			DateTime result = input.PreviousDayOfWeek(targetDay);

			Assert.AreEqual(expected, result, "Expected date mismatch.");
		}

		[TestMethod]
		public void PreviousWeekday_WhenEnumIsInvalid_ShouldThrow()
		{
			DateTime input = new DateTime(2024, 4, 18);

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = input.PreviousDayOfWeek((DayOfWeek)999);
			});
		}

		[TestMethod]
		public void PreviousWeekday_WhenKindIsUtc_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 20, 11, 30, 0, DateTimeKind.Utc);
			DateTime result = input.PreviousDayOfWeek(DayOfWeek.Tuesday);

			Assert.AreEqual(DateTimeKind.Utc, result.Kind);
		}

		[TestMethod]
		public void PreviousWeekday_WhenKindIsLocal_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 20, 11, 30, 0, DateTimeKind.Local);
			DateTime result = input.PreviousDayOfWeek(DayOfWeek.Sunday);

			Assert.AreEqual(DateTimeKind.Local, result.Kind);
		}

		[TestMethod]
		public void PreviousWeekday_WhenKindIsUnspecified_ShouldPreserveKind()
		{
			DateTime input = new DateTime(2024, 4, 20, 11, 30, 0, DateTimeKind.Unspecified);
			DateTime result = input.PreviousDayOfWeek(DayOfWeek.Monday);

			Assert.AreEqual(DateTimeKind.Unspecified, result.Kind);
		}

		[TestMethod]
		public void PreviousWeekday_WhenUsingMinValue_ShouldReturnSameOrGreater()
		{
			DateTime result = DateTime.MinValue.AddDays(7).PreviousDayOfWeek(DayOfWeek.Monday);

			Assert.IsTrue(result >= DateTime.MinValue);
		}

		[TestMethod]
		public void PreviousWeekday_WhenUsingMaxValue_ShouldSucceed()
		{
			DateTime input = DateTime.MaxValue;
			DateTime result = input.PreviousDayOfWeek(DayOfWeek.Saturday);

			Assert.IsTrue(result <= DateTime.MaxValue);
		}
	}
}
