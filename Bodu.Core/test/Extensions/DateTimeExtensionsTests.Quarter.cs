// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		public static IEnumerable<object[]> CalendarQuarterDefinitionTestData =>
			DateTimeExtensionsTests.QuarterDefinitionTestData
				.Where(e => e.Length >= 2 && e[1] is QuarterDefinition q && q == QuarterDefinition.CalendarYear);

		public static IEnumerable<object[]> AllQuarterDefinitionsExceptCustom =>
					Enum.GetValues(typeof(QuarterDefinition))
						.Cast<QuarterDefinition>()
						.Where(q => q != QuarterDefinition.Custom)
						.Select(q => new object[] { q });
		public static IEnumerable<object[]> QuarterDefinitionTestData
		{
			get
			{
				// Calendar Year (Jan됤ar = Q1, Apr됡un = Q2, Jul됩ep = Q3, Oct됛ec = Q4)
				yield return new object[] { new DateTime(2024, 01, 01), QuarterDefinition.CalendarYear, 1, new DateTime(2024, 01, 01), new DateTime(2024, 03, 31) };
				yield return new object[] { new DateTime(2024, 02, 01), QuarterDefinition.CalendarYear, 1, new DateTime(2024, 01, 01), new DateTime(2024, 03, 31) };
				yield return new object[] { new DateTime(2024, 03, 01), QuarterDefinition.CalendarYear, 1, new DateTime(2024, 01, 01), new DateTime(2024, 03, 31) };
				yield return new object[] { new DateTime(2024, 04, 01), QuarterDefinition.CalendarYear, 2, new DateTime(2024, 04, 01), new DateTime(2024, 06, 30) };
				yield return new object[] { new DateTime(2024, 05, 01), QuarterDefinition.CalendarYear, 2, new DateTime(2024, 04, 01), new DateTime(2024, 06, 30) };
				yield return new object[] { new DateTime(2024, 06, 01), QuarterDefinition.CalendarYear, 2, new DateTime(2024, 04, 01), new DateTime(2024, 06, 30) };
				yield return new object[] { new DateTime(2024, 07, 01), QuarterDefinition.CalendarYear, 3, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 08, 01), QuarterDefinition.CalendarYear, 3, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 09, 01), QuarterDefinition.CalendarYear, 3, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 10, 01), QuarterDefinition.CalendarYear, 4, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 11, 01), QuarterDefinition.CalendarYear, 4, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 12, 01), QuarterDefinition.CalendarYear, 4, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };

				// Financial July (Jul됩ep = Q1, Oct됛ec = Q2, Jan됤ar = Q3, Apr됡un = Q4)
				yield return new object[] { new DateTime(2024, 07, 01), QuarterDefinition.FinancialJuly, 1, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 08, 01), QuarterDefinition.FinancialJuly, 1, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 09, 01), QuarterDefinition.FinancialJuly, 1, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 10, 01), QuarterDefinition.FinancialJuly, 2, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 11, 01), QuarterDefinition.FinancialJuly, 2, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 12, 01), QuarterDefinition.FinancialJuly, 2, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2025, 01, 01), QuarterDefinition.FinancialJuly, 3, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 02, 01), QuarterDefinition.FinancialJuly, 3, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 03, 01), QuarterDefinition.FinancialJuly, 3, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 04, 01), QuarterDefinition.FinancialJuly, 4, new DateTime(2025, 04, 01), new DateTime(2025, 06, 30) };
				yield return new object[] { new DateTime(2025, 05, 01), QuarterDefinition.FinancialJuly, 4, new DateTime(2025, 04, 01), new DateTime(2025, 06, 30) };
				yield return new object[] { new DateTime(2025, 06, 01), QuarterDefinition.FinancialJuly, 4, new DateTime(2025, 04, 01), new DateTime(2025, 06, 30) };

				// Financial April (Apr됡un = Q1, Jul됩ep = Q2, Oct됛ec = Q3, Jan됤ar = Q4)
				yield return new object[] { new DateTime(2024, 04, 01), QuarterDefinition.FinancialApril, 1, new DateTime(2024, 04, 01), new DateTime(2024, 06, 30) };
				yield return new object[] { new DateTime(2024, 05, 01), QuarterDefinition.FinancialApril, 1, new DateTime(2024, 04, 01), new DateTime(2024, 06, 30) };
				yield return new object[] { new DateTime(2024, 06, 01), QuarterDefinition.FinancialApril, 1, new DateTime(2024, 04, 01), new DateTime(2024, 06, 30) };
				yield return new object[] { new DateTime(2024, 07, 01), QuarterDefinition.FinancialApril, 2, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 08, 01), QuarterDefinition.FinancialApril, 2, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 09, 01), QuarterDefinition.FinancialApril, 2, new DateTime(2024, 07, 01), new DateTime(2024, 09, 30) };
				yield return new object[] { new DateTime(2024, 10, 01), QuarterDefinition.FinancialApril, 3, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 11, 01), QuarterDefinition.FinancialApril, 3, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 12, 01), QuarterDefinition.FinancialApril, 3, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2025, 01, 01), QuarterDefinition.FinancialApril, 4, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 02, 01), QuarterDefinition.FinancialApril, 4, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 03, 01), QuarterDefinition.FinancialApril, 4, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };

				// Financial October (Oct됛ec = Q1, Jan됤ar = Q2, Apr됡un = Q3, Jul됩ep = Q4)
				yield return new object[] { new DateTime(2024, 10, 01), QuarterDefinition.FinancialOctober, 1, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 11, 01), QuarterDefinition.FinancialOctober, 1, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2024, 12, 01), QuarterDefinition.FinancialOctober, 1, new DateTime(2024, 10, 01), new DateTime(2024, 12, 31) };
				yield return new object[] { new DateTime(2025, 01, 01), QuarterDefinition.FinancialOctober, 2, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 02, 01), QuarterDefinition.FinancialOctober, 2, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 03, 01), QuarterDefinition.FinancialOctober, 2, new DateTime(2025, 01, 01), new DateTime(2025, 03, 31) };
				yield return new object[] { new DateTime(2025, 04, 01), QuarterDefinition.FinancialOctober, 3, new DateTime(2025, 04, 01), new DateTime(2025, 06, 30) };
				yield return new object[] { new DateTime(2025, 05, 01), QuarterDefinition.FinancialOctober, 3, new DateTime(2025, 04, 01), new DateTime(2025, 06, 30) };
				yield return new object[] { new DateTime(2025, 06, 01), QuarterDefinition.FinancialOctober, 3, new DateTime(2025, 04, 01), new DateTime(2025, 06, 30) };
				yield return new object[] { new DateTime(2025, 07, 01), QuarterDefinition.FinancialOctober, 4, new DateTime(2025, 07, 01), new DateTime(2025, 09, 30) };
				yield return new object[] { new DateTime(2025, 08, 01), QuarterDefinition.FinancialOctober, 4, new DateTime(2025, 07, 01), new DateTime(2025, 09, 30) };
				yield return new object[] { new DateTime(2025, 09, 01), QuarterDefinition.FinancialOctober, 4, new DateTime(2025, 07, 01), new DateTime(2025, 09, 30) };

				// Financial February (Feb되pr = Q1, May됡ul = Q2, Aug됦ct = Q3, Nov됡an = Q4)
				yield return new object[] { new DateTime(2024, 02, 01), QuarterDefinition.FinancialFebruary, 1, new DateTime(2024, 02, 01), new DateTime(2024, 04, 30) };
				yield return new object[] { new DateTime(2024, 03, 01), QuarterDefinition.FinancialFebruary, 1, new DateTime(2024, 02, 01), new DateTime(2024, 04, 30) };
				yield return new object[] { new DateTime(2024, 04, 01), QuarterDefinition.FinancialFebruary, 1, new DateTime(2024, 02, 01), new DateTime(2024, 04, 30) };
				yield return new object[] { new DateTime(2024, 05, 01), QuarterDefinition.FinancialFebruary, 2, new DateTime(2024, 05, 01), new DateTime(2024, 07, 31) };
				yield return new object[] { new DateTime(2024, 06, 01), QuarterDefinition.FinancialFebruary, 2, new DateTime(2024, 05, 01), new DateTime(2024, 07, 31) };
				yield return new object[] { new DateTime(2024, 07, 01), QuarterDefinition.FinancialFebruary, 2, new DateTime(2024, 05, 01), new DateTime(2024, 07, 31) };
				yield return new object[] { new DateTime(2024, 08, 01), QuarterDefinition.FinancialFebruary, 3, new DateTime(2024, 08, 01), new DateTime(2024, 10, 31) };
				yield return new object[] { new DateTime(2024, 09, 01), QuarterDefinition.FinancialFebruary, 3, new DateTime(2024, 08, 01), new DateTime(2024, 10, 31) };
				yield return new object[] { new DateTime(2024, 10, 01), QuarterDefinition.FinancialFebruary, 3, new DateTime(2024, 08, 01), new DateTime(2024, 10, 31) };
				yield return new object[] { new DateTime(2024, 11, 01), QuarterDefinition.FinancialFebruary, 4, new DateTime(2024, 11, 01), new DateTime(2025, 01, 31) };
				yield return new object[] { new DateTime(2024, 12, 01), QuarterDefinition.FinancialFebruary, 4, new DateTime(2024, 11, 01), new DateTime(2025, 01, 31) };
				yield return new object[] { new DateTime(2025, 01, 01), QuarterDefinition.FinancialFebruary, 4, new DateTime(2024, 11, 01), new DateTime(2025, 01, 31) };
			}
		}


		[DataTestMethod]
		[DynamicData(nameof(QuarterDefinitionTestData), typeof(DateTimeExtensionsTests))]
		public void GetQuarter_WhenUsingQuarterDefinition_ShouldReturnExpectedQuarter(DateTime input, QuarterDefinition definition, int expected, DateTime _, DateTime __)
		{
			int result = input.Quarter(definition);

			Assert.AreEqual(expected, result);
		}

		[DataTestMethod]
		[DynamicData(nameof(CalendarQuarterDefinitionTestData), typeof(DateTimeExtensionsTests))]
		public void GetQuarter_WhenOnlyDateTime_ShouldReturnExpectedQuarter(DateTime input, QuarterDefinition _, int expected, DateTime __, DateTime ___)
		{
			int result = input.Quarter();

			Assert.AreEqual(expected, result);
		}

		[DataTestMethod]
		[DynamicData(nameof(QuarterDefinitionTestData), typeof(DateTimeExtensionsTests.ValidQuarterProvider))]
		public void GetQuarter_WhenUsingValidProvider_ShouldReturnExpectedQuarter(DateTime input, int expected, DateTime _, DateTime __)
		{
			var provider = new DateTimeExtensionsTests.ValidQuarterProvider();
			int result = input.Quarter(provider);

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void GetQuarter_WhenUsingInvalidProvider_ShouldThrowOutOfRangeException()
		{
			var input = new DateTime(2024, 4, 20);
			var provider = new DateTimeExtensionsTests.InValidQuarterProvider();

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = input.Quarter(provider);
			});
		}

		[TestMethod]
		public void GetQuarter_WhenUsingCustomQuarterDefinitionWithoutProvider_ShouldThrowArgumentOutOfRangeException()
		{
			var input = new DateTime(2024, 4, 20);

			Assert.ThrowsException<ArgumentOutOfRangeException>(() =>
			{
				_ = input.Quarter(QuarterDefinition.Custom);
			});
		}
	}
}