// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("1970-01-01T00:00:00Z", 0)]                   // epoch
		[DataRow("1970-01-01T00:00:01Z", 1)]                   // +1 sec
		[DataRow("1970-01-01T00:01:00Z", 60)]                  // +1 min
		[DataRow("1970-01-01T01:00:00Z", 3600)]                // +1 hr
		[DataRow("1969-12-31T23:59:59Z", -1)]                  // -1 sec
		[DataRow("1969-12-31T23:59:00Z", -60)]                 // -1 min
		public void ToUnixTimeSeconds_WhenUtcInput_ShouldReturnExpected(string inputDate, long expected)
		{
			DateTime input = DateTime.Parse(inputDate).ToUniversalTime();

			long result = input.ToUnixTimeSeconds();

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void ToUnixTimeSeconds_WhenKindIsUtc_ShouldReturnUtcSeconds()
		{
			DateTime input = new DateTime(1970, 1, 1, 0, 0, 5, DateTimeKind.Utc);
			long result = input.ToUnixTimeSeconds();

			Assert.AreEqual(5, result);
		}

		[TestMethod]
		public void ToUnixTimeSeconds_WhenKindIsLocal_ShouldConvertToUtc()
		{
			DateTime utc = new DateTime(2024, 4, 18, 14, 0, 0, DateTimeKind.Utc);
			DateTime local = utc.ToLocalTime();
			long expected = utc.ToUnixTimeSeconds();

			long result = local.ToUnixTimeSeconds();

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void ToUnixTimeSeconds_WhenKindIsUnspecified_ShouldAssumeLocal()
		{
			DateTime nowLocal = DateTime.Now;
			DateTime unspecified = DateTime.SpecifyKind(nowLocal, DateTimeKind.Unspecified);

			long localResult = nowLocal.ToUnixTimeSeconds();
			long unspecifiedResult = unspecified.ToUnixTimeSeconds();

			Assert.IsTrue(Math.Abs(localResult - unspecifiedResult) < 1);
		}

		[TestMethod]
		public void ToUnixTimeSeconds_WhenUsingMinValue_ShouldBeNegativeLarge()
		{
			long result = DateTime.MinValue.ToUnixTimeSeconds();

			Assert.IsTrue(result < 0);
		}

		[TestMethod]
		public void ToUnixTimeSeconds_WhenUsingMaxValue_ShouldBePositiveLarge()
		{
			long result = DateTime.MaxValue.ToUnixTimeSeconds();

			Assert.IsTrue(result > 0);
		}

		[TestMethod]
		public void ToUnixTimeSeconds_RoundTripWithFromUnixTimeSeconds_ShouldMatchUtc()
		{
			DateTime input = new DateTime(2024, 4, 18, 14, 30, 0, DateTimeKind.Utc);
			long seconds = input.ToUnixTimeSeconds();

			DateTime roundTrip = DateTimeExtensions.FromUnixTimeSeconds(seconds);

			Assert.AreEqual(input, roundTrip);
		}
	}
}
