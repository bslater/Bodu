// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{
		private static readonly DateTime Sample = new DateTime(2024, 4, 18, 14, 37, 56, 789).AddTicks(1234); // 7891234 ticks

		[DataTestMethod]
		[DataRow(DateTimeResolution.Year, "2024-01-01T00:00:00.0000000")]
		[DataRow(DateTimeResolution.Month, "2024-04-01T00:00:00.0000000")]
		[DataRow(DateTimeResolution.Day, "2024-04-18T00:00:00.0000000")]
		[DataRow(DateTimeResolution.Hour, "2024-04-18T14:00:00.0000000")]
		[DataRow(DateTimeResolution.Minute, "2024-04-18T14:37:00.0000000")]
		[DataRow(DateTimeResolution.Second, "2024-04-18T14:37:56.0000000")]
		[DataRow(DateTimeResolution.Millisecond, "2024-04-18T14:37:56.7890000")]
		[DataRow(DateTimeResolution.Tick, "2024-04-18T14:37:56.7891234")]
		public void Truncate_WhenCalledWithResolution_ShouldReturnExpected(DateTimeResolution resolution, string expectedDate)
		{
			var expected = DateTime.Parse(expectedDate);
			DateTime result = Sample.Truncate(resolution);

			Assert.AreEqual(expected, result);
			Assert.AreEqual(Sample.Kind, result.Kind, "Kind should be preserved.");
		}

		[TestMethod]
		public void Truncate_WhenResolutionIsInvalid_ShouldThrowArgumentException()
		{
			DateTimeResolution invalid = (DateTimeResolution)999;

			Assert.ThrowsException<ArgumentException>(() =>
			{
				_ = Sample.Truncate(invalid);
			});
		}

		[TestMethod]
		public void Truncate_WhenInputIsMinValue_ShouldNotThrow()
		{
			foreach (DateTimeResolution res in Enum.GetValues(typeof(DateTimeResolution)))
			{
				DateTime result = DateTime.MinValue.Truncate(res);

				Assert.IsTrue(result <= DateTime.MinValue.AddDays(1), $"Failed at {res}");
			}
		}

		[TestMethod]
		public void Truncate_WhenInputIsMaxValue_ShouldNotThrow()
		{
			foreach (DateTimeResolution res in Enum.GetValues(typeof(DateTimeResolution)))
			{
				DateTime result = DateTime.MaxValue.Truncate(res);

				Assert.IsTrue(result <= DateTime.MaxValue, $"Failed at {res}");
			}
		}

		[TestMethod]
		public void Truncate_WhenKindIsPreserved_ShouldMatchOriginalKind()
		{
			var kinds = new[] { DateTimeKind.Utc, DateTimeKind.Local, DateTimeKind.Unspecified };
			foreach (var kind in kinds)
			{
				DateTime input = DateTime.SpecifyKind(Sample, kind);
				DateTime result = input.Truncate(DateTimeResolution.Minute);

				Assert.AreEqual(kind, result.Kind);
			}
		}
	}
}
