// ---------------------------------------------------------------------------------------------------------------
// <auto-generated />
// ---------------------------------------------------------------------------------------------------------------

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bodu.Extensions;
using System.Globalization;

namespace Bodu.Extensions
{
	public partial class DateTimeExtensionsTests
	{

		[DataTestMethod]
		[DataRow("2024-01-01", "en-US", 1)]  // Monday, Jan 1, 2024, First week in US culture
		[DataRow("2024-01-01", "fr-FR", 1)]  // First ISO week in French culture
		[DataRow("2024-12-31", "en-US", 53)] // Last day 
		[DataRow("2024-12-31", "fr-FR", 53)]  // Tuesday, Dec 31, 2024 — week #1 if ISO
		[DataRow("2020-12-31", "en-US", 53)] // Leap year boundary (US)
		[DataRow("2020-12-31", "de-DE", 53)] // ISO culture
		[DataRow("2021-01-01", "de-DE", 53)] // Jan 1, 2021 still in last ISO week of 2020
		[DataRow("2021-01-04", "de-DE", 1)]  // First full ISO week
		public void WeekOfYear_WithCulture_ShouldReturnExpected(string inputDate, string cultureName, int expectedWeek)
		{
			DateTime input = DateTime.Parse(inputDate, CultureInfo.InvariantCulture);
			CultureInfo culture = new CultureInfo(cultureName);
			int result = input.WeekOfYear(culture);

			Assert.AreEqual(expectedWeek, result, $"Week mismatch for {input:days} in {cultureName}");
		}

		[TestMethod]
		public void WeekOfYear_WhenCultureIsNull_ShouldUseCurrentCulture()
		{
			DateTime input = new DateTime(2024, 1, 3); // Mid-week input
			int expected = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(
				input,
				CultureInfo.CurrentCulture.DateTimeFormat.CalendarWeekRule,
				CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek);
			int result = input.WeekOfYear(null!);

			Assert.AreEqual(expected, result);
		}

		[TestMethod]
		public void WeekOfYear_DefaultOverload_ShouldDelegateToCurrentCulture()
		{
			DateTime input = new DateTime(2024, 4, 18);
			int expected = input.WeekOfYear(CultureInfo.CurrentCulture);
			int actual = input.WeekOfYear();

			Assert.AreEqual(expected, actual);
		}

		[DataTestMethod]
		[DataRow("2023-01-01")] // Sunday - may be week 52 or 1 depending on culture
		[DataRow("2023-01-02")] // Monday - start of new week in ISO
		[DataRow("2023-12-31")] // Year end edge case
		public void WeekOfYear_EdgeCaseDates_ShouldNotThrow(string isoDate)
		{
			DateTime input = DateTime.Parse(isoDate, CultureInfo.InvariantCulture);
			int usWeek = input.WeekOfYear(new CultureInfo("en-US"));
			int isoWeek = input.WeekOfYear(CultureInfo.InvariantCulture);

			Assert.IsTrue(usWeek >= 1 && usWeek <= 53);
			Assert.IsTrue(isoWeek >= 1 && isoWeek <= 53);
		}
	}
}
