//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated auto-generated by a T4 template.
//     Generated: 01-June-2022 15:44:57
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bodu.Security.Cryptography
{
    /// <content>
    /// Represents the configuration settings used when creating a <see cref="Bodu.Security.Cryptography.Crc"/> object.
    /// </content>
    public sealed partial class CrcStandard
    {
        #region Fields

        // --------------------------------
        // 3-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc3_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-3/GSM",                        // name
                3,                                  // size
                0x0003UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0007UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc3_ROHC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-3/ROHC",                       // name
                3,                                  // size
                0x0003UL,                           // polynomial
                0x0007UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 4-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc4_G704 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-4/G-704",                      // name
                4,                                  // size
                0x0003UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc4_INTERLAKEN = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-4/INTERLAKEN",                 // name
                4,                                  // size
                0x0003UL,                           // polynomial
                0x000fUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x000fUL));                         // xor out


        // --------------------------------
        // 5-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc5_EPCC1G2 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-5/EPC-C1G2",                   // name
                5,                                  // size
                0x0009UL,                           // polynomial
                0x0009UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc5_G704 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-5/G-704",                      // name
                5,                                  // size
                0x0015UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc5_USB = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-5/USB",                        // name
                5,                                  // size
                0x0005UL,                           // polynomial
                0x001fUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x001fUL));                         // xor out


        // --------------------------------
        // 6-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc6_CDMA2000A = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-6/CDMA2000-A",                 // name
                6,                                  // size
                0x0027UL,                           // polynomial
                0x003fUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc6_CDMA2000B = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-6/CDMA2000-B",                 // name
                6,                                  // size
                0x0007UL,                           // polynomial
                0x003fUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc6_DARC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-6/DARC",                       // name
                6,                                  // size
                0x0019UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc6_G704 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-6/G-704",                      // name
                6,                                  // size
                0x0003UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc6_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-6/GSM",                        // name
                6,                                  // size
                0x002fUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x003fUL));                         // xor out


        // --------------------------------
        // 7-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc7_MMC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-7/MMC",                        // name
                7,                                  // size
                0x0009UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc7_ROHC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-7/ROHC",                       // name
                7,                                  // size
                0x004fUL,                           // polynomial
                0x007fUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc7_UMTS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-7/UMTS",                       // name
                7,                                  // size
                0x0045UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 8-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc8_AUTOSAR = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/AUTOSAR",                    // name
                8,                                  // size
                0x002fUL,                           // polynomial
                0x00ffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x00ffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_BLUETOOTH = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/BLUETOOTH",                  // name
                8,                                  // size
                0x00a7UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_CDMA2000 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/CDMA2000",                   // name
                8,                                  // size
                0x009bUL,                           // polynomial
                0x00ffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_DARC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/DARC",                       // name
                8,                                  // size
                0x0039UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_DVBS2 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/DVB-S2",                     // name
                8,                                  // size
                0x00d5UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_GSMA = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/GSM-A",                      // name
                8,                                  // size
                0x001dUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_GSMB = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/GSM-B",                      // name
                8,                                  // size
                0x0049UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x00ffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_HITAG = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/HITAG",                      // name
                8,                                  // size
                0x001dUL,                           // polynomial
                0x00ffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_I4321 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/I-432-1",                    // name
                8,                                  // size
                0x0007UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0055UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_ICODE = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/I-CODE",                     // name
                8,                                  // size
                0x001dUL,                           // polynomial
                0x00fdUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_LTE = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/LTE",                        // name
                8,                                  // size
                0x009bUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_MAXIMDOW = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/MAXIM-DOW",                  // name
                8,                                  // size
                0x0031UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_MIFAREMAD = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/MIFARE-MAD",                 // name
                8,                                  // size
                0x001dUL,                           // polynomial
                0x00c7UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_NRSC5 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/NRSC-5",                     // name
                8,                                  // size
                0x0031UL,                           // polynomial
                0x00ffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_OPENSAFETY = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/OPENSAFETY",                 // name
                8,                                  // size
                0x002fUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_ROHC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/ROHC",                       // name
                8,                                  // size
                0x0007UL,                           // polynomial
                0x00ffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_SAEJ1850 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/SAE-J1850",                  // name
                8,                                  // size
                0x001dUL,                           // polynomial
                0x00ffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x00ffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_SMBUS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/SMBUS",                      // name
                8,                                  // size
                0x0007UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_TECH3250 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/TECH-3250",                  // name
                8,                                  // size
                0x001dUL,                           // polynomial
                0x00ffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc8_WCDMA = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-8/WCDMA",                      // name
                8,                                  // size
                0x009bUL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 10-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc10_ATM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-10/ATM",                       // name
                10,                                 // size
                0x0233UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc10_CDMA2000 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-10/CDMA2000",                  // name
                10,                                 // size
                0x03d9UL,                           // polynomial
                0x03ffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc10_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-10/GSM",                       // name
                10,                                 // size
                0x0175UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x03ffUL));                         // xor out


        // --------------------------------
        // 11-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc11_FLEXRAY = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-11/FLEXRAY",                   // name
                11,                                 // size
                0x0385UL,                           // polynomial
                0x001aUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc11_UMTS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-11/UMTS",                      // name
                11,                                 // size
                0x0307UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 12-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc12_CDMA2000 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-12/CDMA2000",                  // name
                12,                                 // size
                0x0f13UL,                           // polynomial
                0x0fffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc12_DECT = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-12/DECT",                      // name
                12,                                 // size
                0x080fUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc12_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-12/GSM",                       // name
                12,                                 // size
                0x0d31UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0fffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc12_UMTS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-12/UMTS",                      // name
                12,                                 // size
                0x080fUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 13-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc13_BBC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-13/BBC",                       // name
                13,                                 // size
                0x1cf5UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 14-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc14_DARC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-14/DARC",                      // name
                14,                                 // size
                0x0805UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc14_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-14/GSM",                       // name
                14,                                 // size
                0x202dUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x3fffUL));                         // xor out


        // --------------------------------
        // 15-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc15_CAN = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-15/CAN",                       // name
                15,                                 // size
                0x4599UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc15_MPT1327 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-15/MPT1327",                   // name
                15,                                 // size
                0x6815UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0001UL));                         // xor out


        // --------------------------------
        // 16-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc16_ARC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/ARC",                       // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_CDMA2000 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/CDMA2000",                  // name
                16,                                 // size
                0xc867UL,                           // polynomial
                0xffffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_CMS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/CMS",                       // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0xffffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_DDS110 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/DDS-110",                   // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0x800dUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_DECTR = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/DECT-R",                    // name
                16,                                 // size
                0x0589UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0001UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_DECTX = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/DECT-X",                    // name
                16,                                 // size
                0x0589UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_DNP = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/DNP",                       // name
                16,                                 // size
                0x3d65UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_EN13757 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/EN-13757",                  // name
                16,                                 // size
                0x3d65UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_GENIBUS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/GENIBUS",                   // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0xffffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/GSM",                       // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_IBM3740 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/IBM-3740",                  // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0xffffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_IBMSDLC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/IBM-SDLC",                  // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0xffffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_ISOIEC144433A = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/ISO-IEC-14443-3-A",         // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0xc6c6UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_KERMIT = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/KERMIT",                    // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_LJ1200 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/LJ1200",                    // name
                16,                                 // size
                0x6f63UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_M17 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/M17",                       // name
                16,                                 // size
                0x5935UL,                           // polynomial
                0xffffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_MAXIMDOW = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/MAXIM-DOW",                 // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_MCRF4XX = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/MCRF4XX",                   // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0xffffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_MODBUS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/MODBUS",                    // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0xffffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_NRSC5 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/NRSC-5",                    // name
                16,                                 // size
                0x080bUL,                           // polynomial
                0xffffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_OPENSAFETYA = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/OPENSAFETY-A",              // name
                16,                                 // size
                0x5935UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_OPENSAFETYB = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/OPENSAFETY-B",              // name
                16,                                 // size
                0x755bUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_PROFIBUS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/PROFIBUS",                  // name
                16,                                 // size
                0x1dcfUL,                           // polynomial
                0xffffUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_RIELLO = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/RIELLO",                    // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0xb2aaUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_SPIFUJITSU = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/SPI-FUJITSU",               // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0x1d0fUL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_T10DIF = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/T10-DIF",                   // name
                16,                                 // size
                0x8bb7UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_TELEDISK = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/TELEDISK",                  // name
                16,                                 // size
                0xa097UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_TMS37157 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/TMS37157",                  // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0x89ecUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_UMTS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/UMTS",                      // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_USB = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/USB",                       // name
                16,                                 // size
                0x8005UL,                           // polynomial
                0xffffUL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffUL));                         // xor out

        private static readonly Lazy<CrcStandard> crc16_XMODEM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-16/XMODEM",                    // name
                16,                                 // size
                0x1021UL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 17-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc17_CANFD = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-17/CAN-FD",                    // name
                17,                                 // size
                0x1685bUL,                          // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 21-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc21_CANFD = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-21/CAN-FD",                    // name
                21,                                 // size
                0x102899UL,                         // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 24-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc24_BLE = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/BLE",                       // name
                24,                                 // size
                0x065bUL,                           // polynomial
                0x555555UL,                         // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc24_FLEXRAYA = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/FLEXRAY-A",                 // name
                24,                                 // size
                0x5d6dcbUL,                         // polynomial
                0xfedcbaUL,                         // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc24_FLEXRAYB = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/FLEXRAY-B",                 // name
                24,                                 // size
                0x5d6dcbUL,                         // polynomial
                0xabcdefUL,                         // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc24_INTERLAKEN = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/INTERLAKEN",                // name
                24,                                 // size
                0x328b63UL,                         // polynomial
                0xffffffUL,                         // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffffUL));                       // xor out

        private static readonly Lazy<CrcStandard> crc24_LTEA = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/LTE-A",                     // name
                24,                                 // size
                0x864cfbUL,                         // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc24_LTEB = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/LTE-B",                     // name
                24,                                 // size
                0x800063UL,                         // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc24_OPENPGP = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/OPENPGP",                   // name
                24,                                 // size
                0x864cfbUL,                         // polynomial
                0xb704ceUL,                         // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc24_OS9 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-24/OS-9",                      // name
                24,                                 // size
                0x800063UL,                         // polynomial
                0xffffffUL,                         // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffffUL));                       // xor out


        // --------------------------------
        // 30-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc30_CDMA = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-30/CDMA",                      // name
                30,                                 // size
                0x2030b9c7UL,                       // polynomial
                0x3fffffffUL,                       // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x3fffffffUL));                     // xor out


        // --------------------------------
        // 31-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc31_PHILIPS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-31/PHILIPS",                   // name
                31,                                 // size
                0x4c11db7UL,                        // polynomial
                0x7fffffffUL,                       // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x7fffffffUL));                     // xor out


        // --------------------------------
        // 32-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc32_AIXM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/AIXM",                      // name
                32,                                 // size
                0x814141abUL,                       // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc32_AUTOSAR = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/AUTOSAR",                   // name
                32,                                 // size
                0xf4acfb13UL,                       // polynomial
                0xffffffffUL,                       // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffffffUL));                     // xor out

        private static readonly Lazy<CrcStandard> crc32_BASE91D = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/BASE91-D",                  // name
                32,                                 // size
                0xa833982bUL,                       // polynomial
                0xffffffffUL,                       // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffffffUL));                     // xor out

        private static readonly Lazy<CrcStandard> crc32_BZIP2 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/BZIP2",                     // name
                32,                                 // size
                0x4c11db7UL,                        // polynomial
                0xffffffffUL,                       // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffffffUL));                     // xor out

        private static readonly Lazy<CrcStandard> crc32_CDROMEDC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/CD-ROM-EDC",                // name
                32,                                 // size
                0x8001801bUL,                       // polynomial
                0x0000UL,                           // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc32_CKSUM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/CKSUM",                     // name
                32,                                 // size
                0x4c11db7UL,                        // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffffffUL));                     // xor out

        private static readonly Lazy<CrcStandard> crc32_ISCSI = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/ISCSI",                     // name
                32,                                 // size
                0x1edc6f41UL,                       // polynomial
                0xffffffffUL,                       // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffffffUL));                     // xor out

        private static readonly Lazy<CrcStandard> crc32_ISOHDLC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/ISO-HDLC",                  // name
                32,                                 // size
                0x4c11db7UL,                        // polynomial
                0xffffffffUL,                       // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffffffUL));                     // xor out

        private static readonly Lazy<CrcStandard> crc32_JAMCRC = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/JAMCRC",                    // name
                32,                                 // size
                0x4c11db7UL,                        // polynomial
                0xffffffffUL,                       // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc32_MEF = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/MEF",                       // name
                32,                                 // size
                0x741b8cd7UL,                       // polynomial
                0xffffffffUL,                       // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc32_MPEG2 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/MPEG-2",                    // name
                32,                                 // size
                0x4c11db7UL,                        // polynomial
                0xffffffffUL,                       // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc32_XFER = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-32/XFER",                      // name
                32,                                 // size
                0x00afUL,                           // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out


        // --------------------------------
        // 40-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc40_GSM = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-40/GSM",                       // name
                40,                                 // size
                0x4820009UL,                        // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffffffffUL));                   // xor out


        // --------------------------------
        // 64-bit CRC standards
        // --------------------------------
        private static readonly Lazy<CrcStandard> crc64_ECMA182 = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-64/ECMA-182",                  // name
                64,                                 // size
                0x42f0e1eba9ea3693UL,               // polynomial
                0x0000UL,                           // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc64_GOISO = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-64/GO-ISO",                    // name
                64,                                 // size
                0x001bUL,                           // polynomial
                0xffffffffffffffffUL,               // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffffffffffffffUL));             // xor out

        private static readonly Lazy<CrcStandard> crc64_JONES = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-64/JONES",                     // name
                64,                                 // size
                0xad93d23594c935a9UL,               // polynomial
                0xffffffffffffffffUL,               // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc64_MS = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-64/MS",                        // name
                64,                                 // size
                0x259c84cba6426349UL,               // polynomial
                0xffffffffffffffffUL,               // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0x0000UL));                         // xor out

        private static readonly Lazy<CrcStandard> crc64_WE = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-64/WE",                        // name
                64,                                 // size
                0x42f0e1eba9ea3693UL,               // polynomial
                0xffffffffffffffffUL,               // initial value
                false,                              // reflect block in
                false,                              // reflect block out
                0xffffffffffffffffUL));             // xor out

        private static readonly Lazy<CrcStandard> crc64_XZ = new Lazy<CrcStandard>(() =>
            new CrcStandard(
                "CRC-64/XZ",                        // name
                64,                                 // size
                0x42f0e1eba9ea3693UL,               // polynomial
                0xffffffffffffffffUL,               // initial value
                true,                               // reflect block in
                true,                               // reflect block out
                0xffffffffffffffffUL));             // xor out

        #endregion Fields
		
        #region Properties

        // --------------------------------
        // 3-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-3/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-3/GSM</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-3/GSM</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-3/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-3-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>3</c></description></item>
        /// <item><description>Polynomial: <c>0x03</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x07</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC3_GSM => CrcStandard.crc3_GSM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-3/ROHC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-3/ROHC</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-3/ROHC</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-3/ROHC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-3-rohc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 December 2009, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>3</c></description></item>
        /// <item><description>Polynomial: <c>0x03</c></description></item>
        /// <item><description>Initial Value: <c>0x07</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC3_ROHC => CrcStandard.crc3_ROHC.Value;

        // --------------------------------
        // 4-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-4/G-704</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-4/G-704</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-4/G-704</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-4/G-704</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-4-g-704">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 October 2008, Updated: 21 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>4</c></description></item>
        /// <item><description>Polynomial: <c>0x03</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-4/G-704</c> standard is also known by the alias <c>CRC-4/ITU</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC4_ITU"/>
        public static CrcStandard CRC4_G704 => CrcStandard.crc4_G704.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-4/G-704</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-4/ITU</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC4_ITU</c> is an alias of the <see cref="CrcStandard.CRC4_G704"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC4_G704"/>
        [CrcAlias]
        public static CrcStandard CRC4_ITU => CrcStandard.CRC4_G704;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-4/INTERLAKEN</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-4/INTERLAKEN</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-4/INTERLAKEN</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-4/INTERLAKEN</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-4-interlaken">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 February 2016, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>4</c></description></item>
        /// <item><description>Polynomial: <c>0x03</c></description></item>
        /// <item><description>Initial Value: <c>0x0F</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0F</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC4_INTERLAKEN => CrcStandard.crc4_INTERLAKEN.Value;

        // --------------------------------
        // 5-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-5/EPC-C1G2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-5/EPC-C1G2</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-5/EPC-C1G2</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-5-epc-c1g2">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 20 May 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>5</c></description></item>
        /// <item><description>Polynomial: <c>0x09</c></description></item>
        /// <item><description>Initial Value: <c>0x09</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-5/EPC-C1G2</c> standard is also known by the alias <c>CRC-5/EPC</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC5_EPC"/>
        public static CrcStandard CRC5_EPCC1G2 => CrcStandard.crc5_EPCC1G2.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-5/EPC-C1G2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-5/EPC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC5_EPC</c> is an alias of the <see cref="CrcStandard.CRC5_EPCC1G2"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC5_EPCC1G2"/>
        [CrcAlias]
        public static CrcStandard CRC5_EPC => CrcStandard.CRC5_EPCC1G2;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-5/G-704</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-5/G-704</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-5/G-704</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-5/G-704</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-5-g-704">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 October 2008, Updated: 21 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>5</c></description></item>
        /// <item><description>Polynomial: <c>0x15</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-5/G-704</c> standard is also known by the alias <c>CRC-5/ITU</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC5_ITU"/>
        public static CrcStandard CRC5_G704 => CrcStandard.crc5_G704.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-5/G-704</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-5/ITU</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC5_ITU</c> is an alias of the <see cref="CrcStandard.CRC5_G704"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC5_G704"/>
        [CrcAlias]
        public static CrcStandard CRC5_ITU => CrcStandard.CRC5_G704;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-5/USB</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-5/USB</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-5/USB</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-5/USB</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-5-usb">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 1 December 2007, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>5</c></description></item>
        /// <item><description>Polynomial: <c>0x05</c></description></item>
        /// <item><description>Initial Value: <c>0x1F</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x1F</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC5_USB => CrcStandard.crc5_USB.Value;

        // --------------------------------
        // 6-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-6/CDMA2000-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-6/CDMA2000-A</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-6/CDMA2000-A</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-6-cdma2000-a">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>6</c></description></item>
        /// <item><description>Polynomial: <c>0x27</c></description></item>
        /// <item><description>Initial Value: <c>0x3F</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC6_CDMA2000A => CrcStandard.crc6_CDMA2000A.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-6/CDMA2000-B</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-6/CDMA2000-B</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-6/CDMA2000-B</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-6/CDMA2000-B</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-6-cdma2000-b">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>6</c></description></item>
        /// <item><description>Polynomial: <c>0x07</c></description></item>
        /// <item><description>Initial Value: <c>0x3F</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC6_CDMA2000B => CrcStandard.crc6_CDMA2000B.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-6/DARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-6/DARC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-6/DARC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-6-darc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 December 2009, Updated: 20 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>6</c></description></item>
        /// <item><description>Polynomial: <c>0x19</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC6_DARC => CrcStandard.crc6_DARC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-6/G-704</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-6/G-704</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-6/G-704</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-6/G-704</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-6-g-704">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 October 2008, Updated: 21 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>6</c></description></item>
        /// <item><description>Polynomial: <c>0x03</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-6/G-704</c> standard is also known by the alias <c>CRC-6/ITU</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC6_ITU"/>
        public static CrcStandard CRC6_G704 => CrcStandard.crc6_G704.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-6/G-704</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-6/ITU</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC6_ITU</c> is an alias of the <see cref="CrcStandard.CRC6_G704"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC6_G704"/>
        [CrcAlias]
        public static CrcStandard CRC6_ITU => CrcStandard.CRC6_G704;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-6/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-6/GSM</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-6/GSM</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-6/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-6-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>6</c></description></item>
        /// <item><description>Polynomial: <c>0x2F</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x3F</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC6_GSM => CrcStandard.crc6_GSM.Value;

        // --------------------------------
        // 7-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-7/MMC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-7/MMC</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-7/MMC</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-7/MMC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-7-mmc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 October 2008, Updated: 11 January 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>7</c></description></item>
        /// <item><description>Polynomial: <c>0x09</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-7/MMC</c> standard is also known by the alias <c>CRC-7</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC7"/>
        public static CrcStandard CRC7_MMC => CrcStandard.crc7_MMC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-7/MMC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-7</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC7</c> is an alias of the <see cref="CrcStandard.CRC7_MMC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC7_MMC"/>
        [CrcAlias]
        public static CrcStandard CRC7 => CrcStandard.CRC7_MMC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-7/ROHC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-7/ROHC</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-7/ROHC</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-7/ROHC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-7-rohc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 December 2009, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>7</c></description></item>
        /// <item><description>Polynomial: <c>0x4F</c></description></item>
        /// <item><description>Initial Value: <c>0x7F</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC7_ROHC => CrcStandard.crc7_ROHC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-7/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-7/UMTS</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-7/UMTS</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-7/UMTS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-7-umts">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 8 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>7</c></description></item>
        /// <item><description>Polynomial: <c>0x45</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC7_UMTS => CrcStandard.crc7_UMTS.Value;

        // --------------------------------
        // 8-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/AUTOSAR</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/AUTOSAR</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/AUTOSAR</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-autosar">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 24 July 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x2F</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_AUTOSAR => CrcStandard.crc8_AUTOSAR.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/BLUETOOTH</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/BLUETOOTH</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/BLUETOOTH</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-bluetooth">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 20 June 2017, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0xA7</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_BLUETOOTH => CrcStandard.crc8_BLUETOOTH.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/CDMA2000</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/CDMA2000</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/CDMA2000</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/CDMA2000</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-cdma2000">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x9B</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_CDMA2000 => CrcStandard.crc8_CDMA2000.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/DARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/DARC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/DARC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-darc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 December 2009, Updated: 29 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x39</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_DARC => CrcStandard.crc8_DARC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/DVB-S2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/DVB-S2</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/DVB-S2</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/DVB-S2</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-dvb-s2">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 January 2014, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0xD5</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_DVBS2 => CrcStandard.crc8_DVBS2.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/GSM-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/GSM-A</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/GSM-A</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/GSM-A</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-gsm-a">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x1D</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_GSMA => CrcStandard.crc8_GSMA.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/GSM-B</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/GSM-B</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/GSM-B</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/GSM-B</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-gsm-b">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x49</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_GSMB => CrcStandard.crc8_GSMB.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/HITAG</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/HITAG</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/HITAG</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-hitag">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 23 December 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x1D</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_HITAG => CrcStandard.crc8_HITAG.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/I-432-1</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/I-432-1</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/I-432-1</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/I-432-1</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-i-432-1">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 19 April 2009, Updated: 21 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x07</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x55</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-8/I-432-1</c> standard is also known by the alias <c>CRC-8/ITU</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_ITU"/>
        public static CrcStandard CRC8_I4321 => CrcStandard.crc8_I4321.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/I-432-1</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/ITU</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC8_ITU</c> is an alias of the <see cref="CrcStandard.CRC8_I4321"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_I4321"/>
        [CrcAlias]
        public static CrcStandard CRC8_ITU => CrcStandard.CRC8_I4321;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/I-CODE</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/I-CODE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/I-CODE</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-i-code">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 3 November 2007, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x1D</c></description></item>
        /// <item><description>Initial Value: <c>0xFD</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_ICODE => CrcStandard.crc8_ICODE.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/LTE</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/LTE</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/LTE</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/LTE</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-lte">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 13 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x9B</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_LTE => CrcStandard.crc8_LTE.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/MAXIM-DOW</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/MAXIM-DOW</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/MAXIM-DOW</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-maxim-dow">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 26 April 2009, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x31</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-8/MAXIM-DOW</c> standard is also known by the aliases <c>CRC-8/MAXIM</c>, and <c>DOW-CRC</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_MAXIM"/>
        /// <seealso cref="CrcStandard.DOWCRC"/>
        public static CrcStandard CRC8_MAXIMDOW => CrcStandard.crc8_MAXIMDOW.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/MAXIM-DOW</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/MAXIM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC8_MAXIM</c> is an alias of the <see cref="CrcStandard.CRC8_MAXIMDOW"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_MAXIMDOW"/>
        /// <seealso cref="CrcStandard.DOWCRC"/>
        [CrcAlias]
        public static CrcStandard CRC8_MAXIM => CrcStandard.CRC8_MAXIMDOW;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/MAXIM-DOW</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>DOW-CRC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>DOWCRC</c> is an alias of the <see cref="CrcStandard.CRC8_MAXIMDOW"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_MAXIMDOW"/>
        /// <seealso cref="CrcStandard.CRC8_MAXIM"/>
        [CrcAlias]
        public static CrcStandard DOWCRC => CrcStandard.CRC8_MAXIMDOW;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/MIFARE-MAD</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/MIFARE-MAD</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/MIFARE-MAD</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-mifare-mad">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 21 February 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x1D</c></description></item>
        /// <item><description>Initial Value: <c>0xC7</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_MIFAREMAD => CrcStandard.crc8_MIFAREMAD.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/NRSC-5</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/NRSC-5</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/NRSC-5</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-nrsc-5">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 16 November 2018, Updated: 20 March 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x31</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_NRSC5 => CrcStandard.crc8_NRSC5.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/OPENSAFETY</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/OPENSAFETY</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/OPENSAFETY</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-opensafety">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 22 July 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x2F</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_OPENSAFETY => CrcStandard.crc8_OPENSAFETY.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/ROHC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/ROHC</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/ROHC</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/ROHC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-rohc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 December 2009, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x07</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_ROHC => CrcStandard.crc8_ROHC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/SAE-J1850</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/SAE-J1850</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/SAE-J1850</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-sae-j1850">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x1D</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_SAEJ1850 => CrcStandard.crc8_SAEJ1850.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/SMBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/SMBUS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/SMBUS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-smbus">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x07</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-8/SMBUS</c> standard is also known by the alias <c>CRC-8</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8"/>
        public static CrcStandard CRC8_SMBUS => CrcStandard.crc8_SMBUS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/SMBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC8</c> is an alias of the <see cref="CrcStandard.CRC8_SMBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_SMBUS"/>
        [CrcAlias]
        public static CrcStandard CRC8 => CrcStandard.CRC8_SMBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/TECH-3250</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/TECH-3250</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-8/TECH-3250</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-tech-3250">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 19 July 2012, Updated: 21 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x1D</c></description></item>
        /// <item><description>Initial Value: <c>0xFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-8/TECH-3250</c> standard is also known by the aliases <c>CRC-8/AES</c>, and <c>CRC-8/EBU</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_AES"/>
        /// <seealso cref="CrcStandard.CRC8_EBU"/>
        public static CrcStandard CRC8_TECH3250 => CrcStandard.crc8_TECH3250.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/TECH-3250</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/AES</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC8_AES</c> is an alias of the <see cref="CrcStandard.CRC8_TECH3250"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_TECH3250"/>
        /// <seealso cref="CrcStandard.CRC8_EBU"/>
        [CrcAlias]
        public static CrcStandard CRC8_AES => CrcStandard.CRC8_TECH3250;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/TECH-3250</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/EBU</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC8_EBU</c> is an alias of the <see cref="CrcStandard.CRC8_TECH3250"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC8_TECH3250"/>
        /// <seealso cref="CrcStandard.CRC8_AES"/>
        [CrcAlias]
        public static CrcStandard CRC8_EBU => CrcStandard.CRC8_TECH3250;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-8/WCDMA</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-8/WCDMA</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-8/WCDMA</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-8/WCDMA</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-8-wcdma">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 8 November 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>8</c></description></item>
        /// <item><description>Polynomial: <c>0x9B</c></description></item>
        /// <item><description>Initial Value: <c>0x00</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC8_WCDMA => CrcStandard.crc8_WCDMA.Value;

        // --------------------------------
        // 10-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-10/ATM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-10/ATM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-10/ATM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-10-atm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 19 April 2009, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>10</c></description></item>
        /// <item><description>Polynomial: <c>0x0233</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-10/ATM</c> standard is also known by the aliases <c>CRC-10</c>, and <c>CRC-10/I-610</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC10"/>
        /// <seealso cref="CrcStandard.CRC10_I610"/>
        public static CrcStandard CRC10_ATM => CrcStandard.crc10_ATM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-10/ATM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-10</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC10</c> is an alias of the <see cref="CrcStandard.CRC10_ATM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC10_ATM"/>
        /// <seealso cref="CrcStandard.CRC10_I610"/>
        [CrcAlias]
        public static CrcStandard CRC10 => CrcStandard.CRC10_ATM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-10/ATM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-10/I-610</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC10_I610</c> is an alias of the <see cref="CrcStandard.CRC10_ATM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC10_ATM"/>
        /// <seealso cref="CrcStandard.CRC10"/>
        [CrcAlias]
        public static CrcStandard CRC10_I610 => CrcStandard.CRC10_ATM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-10/CDMA2000</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-10/CDMA2000</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-10/CDMA2000</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-10/CDMA2000</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-10-cdma2000">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>10</c></description></item>
        /// <item><description>Polynomial: <c>0x03D9</c></description></item>
        /// <item><description>Initial Value: <c>0x03FF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC10_CDMA2000 => CrcStandard.crc10_CDMA2000.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-10/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-10/GSM</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-10/GSM</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-10/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-10-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>10</c></description></item>
        /// <item><description>Polynomial: <c>0x0175</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x03FF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC10_GSM => CrcStandard.crc10_GSM.Value;

        // --------------------------------
        // 11-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-11/FLEXRAY</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-11/FLEXRAY</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-11/FLEXRAY</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-11-flexray">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 3 November 2007, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>11</c></description></item>
        /// <item><description>Polynomial: <c>0x0385</c></description></item>
        /// <item><description>Initial Value: <c>0x001A</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-11/FLEXRAY</c> standard is also known by the alias <c>CRC-11</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC11"/>
        public static CrcStandard CRC11_FLEXRAY => CrcStandard.crc11_FLEXRAY.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-11/FLEXRAY</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-11</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC11</c> is an alias of the <see cref="CrcStandard.CRC11_FLEXRAY"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC11_FLEXRAY"/>
        [CrcAlias]
        public static CrcStandard CRC11 => CrcStandard.CRC11_FLEXRAY;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-11/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-11/UMTS</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-11/UMTS</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-11/UMTS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-11-umts">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 8 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>11</c></description></item>
        /// <item><description>Polynomial: <c>0x0307</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC11_UMTS => CrcStandard.crc11_UMTS.Value;

        // --------------------------------
        // 12-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-12/CDMA2000</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-12/CDMA2000</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-12/CDMA2000</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-12/CDMA2000</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-12-cdma2000">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>12</c></description></item>
        /// <item><description>Polynomial: <c>0x0F13</c></description></item>
        /// <item><description>Initial Value: <c>0x0FFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC12_CDMA2000 => CrcStandard.crc12_CDMA2000.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-12/DECT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-12/DECT</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-12/DECT</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-12/DECT</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-12-dect">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 29 July 2010, Updated: 15 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>12</c></description></item>
        /// <item><description>Polynomial: <c>0x080F</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-12/DECT</c> standard is also known by the alias <c>X-CRC-12</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.XCRC12"/>
        public static CrcStandard CRC12_DECT => CrcStandard.crc12_DECT.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-12/DECT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>X-CRC-12</c> definition.</value>
        /// <remarks>
        /// <para>The <c>XCRC12</c> is an alias of the <see cref="CrcStandard.CRC12_DECT"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC12_DECT"/>
        [CrcAlias]
        public static CrcStandard XCRC12 => CrcStandard.CRC12_DECT;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-12/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-12/GSM</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-12/GSM</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-12/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-12-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>12</c></description></item>
        /// <item><description>Polynomial: <c>0x0D31</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0FFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC12_GSM => CrcStandard.crc12_GSM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-12/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-12/UMTS</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-12/UMTS</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-12/UMTS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-12-umts">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 December 2009, Updated: 25 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>12</c></description></item>
        /// <item><description>Polynomial: <c>0x080F</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-12/UMTS</c> standard is also known by the alias <c>CRC-12/3GPP</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC12_3GPP"/>
        public static CrcStandard CRC12_UMTS => CrcStandard.crc12_UMTS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-12/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-12/3GPP</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC12_3GPP</c> is an alias of the <see cref="CrcStandard.CRC12_UMTS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC12_UMTS"/>
        [CrcAlias]
        public static CrcStandard CRC12_3GPP => CrcStandard.CRC12_UMTS;

        // --------------------------------
        // 13-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-13/BBC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-13/BBC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-13/BBC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-13-bbc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>13</c></description></item>
        /// <item><description>Polynomial: <c>0x1CF5</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC13_BBC => CrcStandard.crc13_BBC.Value;

        // --------------------------------
        // 14-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-14/DARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-14/DARC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-14/DARC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-14-darc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 December 2009, Updated: 20 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>14</c></description></item>
        /// <item><description>Polynomial: <c>0x0805</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC14_DARC => CrcStandard.crc14_DARC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-14/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-14/GSM</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-14/GSM</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-14/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-14-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>14</c></description></item>
        /// <item><description>Polynomial: <c>0x202D</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x3FFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC14_GSM => CrcStandard.crc14_GSM.Value;

        // --------------------------------
        // 15-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-15/CAN</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-15/CAN</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-15/CAN</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-15/CAN</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-15-can">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 2 November 2007, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>15</c></description></item>
        /// <item><description>Polynomial: <c>0x4599</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-15/CAN</c> standard is also known by the alias <c>CRC-15</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC15"/>
        public static CrcStandard CRC15_CAN => CrcStandard.crc15_CAN.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-15/CAN</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-15</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC15</c> is an alias of the <see cref="CrcStandard.CRC15_CAN"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC15_CAN"/>
        [CrcAlias]
        public static CrcStandard CRC15 => CrcStandard.CRC15_CAN;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-15/MPT1327</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-15/MPT1327</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-15/MPT1327</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-15-mpt1327">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 16 July 2012, Updated: 29 December 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>15</c></description></item>
        /// <item><description>Polynomial: <c>0x6815</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0001</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC15_MPT1327 => CrcStandard.crc15_MPT1327.Value;

        // --------------------------------
        // 16-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/ARC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/ARC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-arc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/ARC</c> standard is also known by the aliases <c>ARC</c>, <c>CRC-16</c>, <c>CRC-16/LHA</c>, and <c>CRC-IBM</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.ARC"/>
        /// <seealso cref="CrcStandard.CRC16"/>
        /// <seealso cref="CrcStandard.CRC16_LHA"/>
        /// <seealso cref="CrcStandard.CRCIBM"/>
        public static CrcStandard CRC16_ARC => CrcStandard.crc16_ARC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>ARC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>ARC</c> is an alias of the <see cref="CrcStandard.CRC16_ARC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ARC"/>
        /// <seealso cref="CrcStandard.CRC16"/>
        /// <seealso cref="CrcStandard.CRC16_LHA"/>
        /// <seealso cref="CrcStandard.CRCIBM"/>
        [CrcAlias]
        public static CrcStandard ARC => CrcStandard.CRC16_ARC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16</c> is an alias of the <see cref="CrcStandard.CRC16_ARC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ARC"/>
        /// <seealso cref="CrcStandard.ARC"/>
        /// <seealso cref="CrcStandard.CRC16_LHA"/>
        /// <seealso cref="CrcStandard.CRCIBM"/>
        [CrcAlias]
        public static CrcStandard CRC16 => CrcStandard.CRC16_ARC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/LHA</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_LHA</c> is an alias of the <see cref="CrcStandard.CRC16_ARC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ARC"/>
        /// <seealso cref="CrcStandard.ARC"/>
        /// <seealso cref="CrcStandard.CRC16"/>
        /// <seealso cref="CrcStandard.CRCIBM"/>
        [CrcAlias]
        public static CrcStandard CRC16_LHA => CrcStandard.CRC16_ARC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ARC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-IBM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRCIBM</c> is an alias of the <see cref="CrcStandard.CRC16_ARC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ARC"/>
        /// <seealso cref="CrcStandard.ARC"/>
        /// <seealso cref="CrcStandard.CRC16"/>
        /// <seealso cref="CrcStandard.CRC16_LHA"/>
        [CrcAlias]
        public static CrcStandard CRCIBM => CrcStandard.CRC16_ARC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/CDMA2000</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/CDMA2000</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-16/CDMA2000</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-16/CDMA2000</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-cdma2000">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 14 October 2013, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0xC867</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_CDMA2000 => CrcStandard.crc16_CDMA2000.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/CMS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/CMS</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-16/CMS</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-16/CMS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-cms">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 13 July 2016, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_CMS => CrcStandard.crc16_CMS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/DDS-110</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/DDS-110</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/DDS-110</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-dds-110">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 November 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0x800D</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_DDS110 => CrcStandard.crc16_DDS110.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/DECT-R</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/DECT-R</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/DECT-R</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-dect-r">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 December 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x0589</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0001</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/DECT-R</c> standard is also known by the alias <c>R-CRC-16</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.RCRC16"/>
        public static CrcStandard CRC16_DECTR => CrcStandard.crc16_DECTR.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/DECT-R</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>R-CRC-16</c> definition.</value>
        /// <remarks>
        /// <para>The <c>RCRC16</c> is an alias of the <see cref="CrcStandard.CRC16_DECTR"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_DECTR"/>
        [CrcAlias]
        public static CrcStandard RCRC16 => CrcStandard.CRC16_DECTR;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/DECT-X</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/DECT-X</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/DECT-X</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-dect-x">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 July 2010, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x0589</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/DECT-X</c> standard is also known by the alias <c>X-CRC-16</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.XCRC16"/>
        public static CrcStandard CRC16_DECTX => CrcStandard.crc16_DECTX.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/DECT-X</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>X-CRC-16</c> definition.</value>
        /// <remarks>
        /// <para>The <c>XCRC16</c> is an alias of the <see cref="CrcStandard.CRC16_DECTX"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_DECTX"/>
        [CrcAlias]
        public static CrcStandard XCRC16 => CrcStandard.CRC16_DECTX;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/DNP</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/DNP</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/DNP</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-dnp">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 2 November 2007, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x3D65</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_DNP => CrcStandard.crc16_DNP.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/EN-13757</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/EN-13757</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/EN-13757</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-en-13757">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 1 October 2008, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x3D65</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_EN13757 => CrcStandard.crc16_EN13757.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/GENIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/GENIBUS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/GENIBUS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-genibus">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 2 November 2007, Updated: 3 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/GENIBUS</c> standard is also known by the aliases <c>CRC-16/DARC</c>, <c>CRC-16/EPC</c>, <c>CRC-16/EPC-C1G2</c>, and <c>CRC-16/I-CODE</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_DARC"/>
        /// <seealso cref="CrcStandard.CRC16_EPC"/>
        /// <seealso cref="CrcStandard.CRC16_EPCC1G2"/>
        /// <seealso cref="CrcStandard.CRC16_ICODE"/>
        public static CrcStandard CRC16_GENIBUS => CrcStandard.crc16_GENIBUS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/GENIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/DARC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_DARC</c> is an alias of the <see cref="CrcStandard.CRC16_GENIBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_GENIBUS"/>
        /// <seealso cref="CrcStandard.CRC16_EPC"/>
        /// <seealso cref="CrcStandard.CRC16_EPCC1G2"/>
        /// <seealso cref="CrcStandard.CRC16_ICODE"/>
        [CrcAlias]
        public static CrcStandard CRC16_DARC => CrcStandard.CRC16_GENIBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/GENIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/EPC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_EPC</c> is an alias of the <see cref="CrcStandard.CRC16_GENIBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_GENIBUS"/>
        /// <seealso cref="CrcStandard.CRC16_DARC"/>
        /// <seealso cref="CrcStandard.CRC16_EPCC1G2"/>
        /// <seealso cref="CrcStandard.CRC16_ICODE"/>
        [CrcAlias]
        public static CrcStandard CRC16_EPC => CrcStandard.CRC16_GENIBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/GENIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/EPC-C1G2</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_EPCC1G2</c> is an alias of the <see cref="CrcStandard.CRC16_GENIBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_GENIBUS"/>
        /// <seealso cref="CrcStandard.CRC16_DARC"/>
        /// <seealso cref="CrcStandard.CRC16_EPC"/>
        /// <seealso cref="CrcStandard.CRC16_ICODE"/>
        [CrcAlias]
        public static CrcStandard CRC16_EPCC1G2 => CrcStandard.CRC16_GENIBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/GENIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/I-CODE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_ICODE</c> is an alias of the <see cref="CrcStandard.CRC16_GENIBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_GENIBUS"/>
        /// <seealso cref="CrcStandard.CRC16_DARC"/>
        /// <seealso cref="CrcStandard.CRC16_EPC"/>
        /// <seealso cref="CrcStandard.CRC16_EPCC1G2"/>
        [CrcAlias]
        public static CrcStandard CRC16_ICODE => CrcStandard.CRC16_GENIBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/GSM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 February 2017, Updated: 19 April 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_GSM => CrcStandard.crc16_GSM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-3740</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/IBM-3740</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/IBM-3740</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-ibm-3740">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/IBM-3740</c> standard is also known by the aliases <c>CRC-16/AUTOSAR</c>, and <c>CRC-16/CCITT-FALSE</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_AUTOSAR"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTFALSE"/>
        public static CrcStandard CRC16_IBM3740 => CrcStandard.crc16_IBM3740.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-3740</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/AUTOSAR</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_AUTOSAR</c> is an alias of the <see cref="CrcStandard.CRC16_IBM3740"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBM3740"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTFALSE"/>
        [CrcAlias]
        public static CrcStandard CRC16_AUTOSAR => CrcStandard.CRC16_IBM3740;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-3740</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/CCITT-FALSE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_CCITTFALSE</c> is an alias of the <see cref="CrcStandard.CRC16_IBM3740"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBM3740"/>
        /// <seealso cref="CrcStandard.CRC16_AUTOSAR"/>
        [CrcAlias]
        public static CrcStandard CRC16_CCITTFALSE => CrcStandard.CRC16_IBM3740;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-SDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/IBM-SDLC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/IBM-SDLC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-ibm-sdlc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 September 2005, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/IBM-SDLC</c> standard is also known by the aliases <c>CRC-16/ISO-HDLC</c>, <c>CRC-16/ISO-IEC-14443-3-B</c>, <c>CRC-16/X-25</c>, <c>CRC-B</c>, and <c>X-25</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOIEC144433B"/>
        /// <seealso cref="CrcStandard.CRC16_X25"/>
        /// <seealso cref="CrcStandard.CRCB"/>
        /// <seealso cref="CrcStandard.X25"/>
        public static CrcStandard CRC16_IBMSDLC => CrcStandard.crc16_IBMSDLC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-SDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/ISO-HDLC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_ISOHDLC</c> is an alias of the <see cref="CrcStandard.CRC16_IBMSDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBMSDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOIEC144433B"/>
        /// <seealso cref="CrcStandard.CRC16_X25"/>
        /// <seealso cref="CrcStandard.CRCB"/>
        /// <seealso cref="CrcStandard.X25"/>
        [CrcAlias]
        public static CrcStandard CRC16_ISOHDLC => CrcStandard.CRC16_IBMSDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-SDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/ISO-IEC-14443-3-B</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_ISOIEC144433B</c> is an alias of the <see cref="CrcStandard.CRC16_IBMSDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBMSDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC16_X25"/>
        /// <seealso cref="CrcStandard.CRCB"/>
        /// <seealso cref="CrcStandard.X25"/>
        [CrcAlias]
        public static CrcStandard CRC16_ISOIEC144433B => CrcStandard.CRC16_IBMSDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-SDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/X-25</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_X25</c> is an alias of the <see cref="CrcStandard.CRC16_IBMSDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBMSDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOIEC144433B"/>
        /// <seealso cref="CrcStandard.CRCB"/>
        /// <seealso cref="CrcStandard.X25"/>
        [CrcAlias]
        public static CrcStandard CRC16_X25 => CrcStandard.CRC16_IBMSDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-SDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-B</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRCB</c> is an alias of the <see cref="CrcStandard.CRC16_IBMSDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBMSDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOIEC144433B"/>
        /// <seealso cref="CrcStandard.CRC16_X25"/>
        /// <seealso cref="CrcStandard.X25"/>
        [CrcAlias]
        public static CrcStandard CRCB => CrcStandard.CRC16_IBMSDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/IBM-SDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>X-25</c> definition.</value>
        /// <remarks>
        /// <para>The <c>X25</c> is an alias of the <see cref="CrcStandard.CRC16_IBMSDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IBMSDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC16_ISOIEC144433B"/>
        /// <seealso cref="CrcStandard.CRC16_X25"/>
        /// <seealso cref="CrcStandard.CRCB"/>
        [CrcAlias]
        public static CrcStandard X25 => CrcStandard.CRC16_IBMSDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ISO-IEC-14443-3-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/ISO-IEC-14443-3-A</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/ISO-IEC-14443-3-A</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-iso-iec-14443-3-a">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 April 2011, Updated: 29 December 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0xC6C6</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/ISO-IEC-14443-3-A</c> standard is also known by the alias <c>CRC-A</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRCA"/>
        public static CrcStandard CRC16_ISOIEC144433A => CrcStandard.crc16_ISOIEC144433A.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/ISO-IEC-14443-3-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-A</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRCA</c> is an alias of the <see cref="CrcStandard.CRC16_ISOIEC144433A"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ISOIEC144433A"/>
        [CrcAlias]
        public static CrcStandard CRCA => CrcStandard.CRC16_ISOIEC144433A;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/KERMIT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/KERMIT</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/KERMIT</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-kermit">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 September 2005, Updated: 23 December 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/KERMIT</c> standard is also known by the aliases <c>CRC-16/CCITT</c>, <c>CRC-16/CCITT-TRUE</c>, <c>CRC-16/V-41-LSB</c>, <c>CRC-CCITT</c>, and <c>KERMIT</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_CCITT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTTRUE"/>
        /// <seealso cref="CrcStandard.CRC16_V41LSB"/>
        /// <seealso cref="CrcStandard.CRCCCITT"/>
        /// <seealso cref="CrcStandard.KERMIT"/>
        public static CrcStandard CRC16_KERMIT => CrcStandard.crc16_KERMIT.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/KERMIT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/CCITT</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_CCITT</c> is an alias of the <see cref="CrcStandard.CRC16_KERMIT"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_KERMIT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTTRUE"/>
        /// <seealso cref="CrcStandard.CRC16_V41LSB"/>
        /// <seealso cref="CrcStandard.CRCCCITT"/>
        /// <seealso cref="CrcStandard.KERMIT"/>
        [CrcAlias]
        public static CrcStandard CRC16_CCITT => CrcStandard.CRC16_KERMIT;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/KERMIT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/CCITT-TRUE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_CCITTTRUE</c> is an alias of the <see cref="CrcStandard.CRC16_KERMIT"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_KERMIT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITT"/>
        /// <seealso cref="CrcStandard.CRC16_V41LSB"/>
        /// <seealso cref="CrcStandard.CRCCCITT"/>
        /// <seealso cref="CrcStandard.KERMIT"/>
        [CrcAlias]
        public static CrcStandard CRC16_CCITTTRUE => CrcStandard.CRC16_KERMIT;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/KERMIT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/V-41-LSB</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_V41LSB</c> is an alias of the <see cref="CrcStandard.CRC16_KERMIT"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_KERMIT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTTRUE"/>
        /// <seealso cref="CrcStandard.CRCCCITT"/>
        /// <seealso cref="CrcStandard.KERMIT"/>
        [CrcAlias]
        public static CrcStandard CRC16_V41LSB => CrcStandard.CRC16_KERMIT;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/KERMIT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-CCITT</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRCCCITT</c> is an alias of the <see cref="CrcStandard.CRC16_KERMIT"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_KERMIT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTTRUE"/>
        /// <seealso cref="CrcStandard.CRC16_V41LSB"/>
        /// <seealso cref="CrcStandard.KERMIT"/>
        [CrcAlias]
        public static CrcStandard CRCCCITT => CrcStandard.CRC16_KERMIT;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/KERMIT</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>KERMIT</c> definition.</value>
        /// <remarks>
        /// <para>The <c>KERMIT</c> is an alias of the <see cref="CrcStandard.CRC16_KERMIT"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_KERMIT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITT"/>
        /// <seealso cref="CrcStandard.CRC16_CCITTTRUE"/>
        /// <seealso cref="CrcStandard.CRC16_V41LSB"/>
        /// <seealso cref="CrcStandard.CRCCCITT"/>
        [CrcAlias]
        public static CrcStandard KERMIT => CrcStandard.CRC16_KERMIT;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/LJ1200</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/LJ1200</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-16/LJ1200</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-16/LJ1200</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-lj1200">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 20 February 2016, Updated: 6 June 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x6F63</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_LJ1200 => CrcStandard.crc16_LJ1200.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/M17</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/M17</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/M17</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-m17">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x5935</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_M17 => CrcStandard.crc16_M17.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/MAXIM-DOW</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/MAXIM-DOW</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/MAXIM-DOW</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-maxim-dow">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 26 April 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/MAXIM-DOW</c> standard is also known by the alias <c>CRC-16/MAXIM</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_MAXIM"/>
        public static CrcStandard CRC16_MAXIMDOW => CrcStandard.crc16_MAXIMDOW.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/MAXIM-DOW</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/MAXIM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_MAXIM</c> is an alias of the <see cref="CrcStandard.CRC16_MAXIMDOW"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_MAXIMDOW"/>
        [CrcAlias]
        public static CrcStandard CRC16_MAXIM => CrcStandard.CRC16_MAXIMDOW;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/MCRF4XX</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/MCRF4XX</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/MCRF4XX</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-mcrf4xx">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 18 January 2008, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_MCRF4XX => CrcStandard.crc16_MCRF4XX.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/MODBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/MODBUS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/MODBUS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-modbus">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 27 February 2007, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/MODBUS</c> standard is also known by the alias <c>MODBUS</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.MODBUS"/>
        public static CrcStandard CRC16_MODBUS => CrcStandard.crc16_MODBUS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/MODBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>MODBUS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>MODBUS</c> is an alias of the <see cref="CrcStandard.CRC16_MODBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_MODBUS"/>
        [CrcAlias]
        public static CrcStandard MODBUS => CrcStandard.CRC16_MODBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/NRSC-5</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/NRSC-5</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/NRSC-5</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-nrsc-5">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 16 November 2018, Updated: 20 March 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x080B</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_NRSC5 => CrcStandard.crc16_NRSC5.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/OPENSAFETY-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/OPENSAFETY-A</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/OPENSAFETY-A</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-opensafety-a">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 22 July 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x5935</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_OPENSAFETYA => CrcStandard.crc16_OPENSAFETYA.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/OPENSAFETY-B</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/OPENSAFETY-B</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/OPENSAFETY-B</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-opensafety-b">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 22 July 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x755B</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_OPENSAFETYB => CrcStandard.crc16_OPENSAFETYB.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/PROFIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/PROFIBUS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/PROFIBUS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-profibus">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 5 July 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1DCF</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/PROFIBUS</c> standard is also known by the alias <c>CRC-16/IEC-61158-2</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_IEC611582"/>
        public static CrcStandard CRC16_PROFIBUS => CrcStandard.crc16_PROFIBUS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/PROFIBUS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/IEC-61158-2</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_IEC611582</c> is an alias of the <see cref="CrcStandard.CRC16_PROFIBUS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_PROFIBUS"/>
        [CrcAlias]
        public static CrcStandard CRC16_IEC611582 => CrcStandard.CRC16_PROFIBUS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/RIELLO</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/RIELLO</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-16/RIELLO</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-16/RIELLO</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-riello">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 18 April 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0xB2AA</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_RIELLO => CrcStandard.crc16_RIELLO.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/SPI-FUJITSU</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/SPI-FUJITSU</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/SPI-FUJITSU</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-spi-fujitsu">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 October 2007, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0x1D0F</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/SPI-FUJITSU</c> standard is also known by the alias <c>CRC-16/AUG-CCITT</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_AUGCCITT"/>
        public static CrcStandard CRC16_SPIFUJITSU => CrcStandard.crc16_SPIFUJITSU.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/SPI-FUJITSU</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/AUG-CCITT</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_AUGCCITT</c> is an alias of the <see cref="CrcStandard.CRC16_SPIFUJITSU"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_SPIFUJITSU"/>
        [CrcAlias]
        public static CrcStandard CRC16_AUGCCITT => CrcStandard.CRC16_SPIFUJITSU;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/T10-DIF</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/T10-DIF</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/T10-DIF</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-t10-dif">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 29 September 2009, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8BB7</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_T10DIF => CrcStandard.crc16_T10DIF.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/TELEDISK</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/TELEDISK</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/TELEDISK</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-teledisk">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 December 2009, Updated: 6 June 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0xA097</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_TELEDISK => CrcStandard.crc16_TELEDISK.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/TMS37157</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/TMS37157</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/TMS37157</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-tms37157">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 17 April 2011, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0x89EC</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_TMS37157 => CrcStandard.crc16_TMS37157.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/UMTS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/UMTS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-umts">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 4 June 2008, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/UMTS</c> standard is also known by the aliases <c>CRC-16/BUYPASS</c>, and <c>CRC-16/VERIFONE</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_BUYPASS"/>
        /// <seealso cref="CrcStandard.CRC16_VERIFONE"/>
        public static CrcStandard CRC16_UMTS => CrcStandard.crc16_UMTS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/BUYPASS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_BUYPASS</c> is an alias of the <see cref="CrcStandard.CRC16_UMTS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_UMTS"/>
        /// <seealso cref="CrcStandard.CRC16_VERIFONE"/>
        [CrcAlias]
        public static CrcStandard CRC16_BUYPASS => CrcStandard.CRC16_UMTS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/UMTS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/VERIFONE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_VERIFONE</c> is an alias of the <see cref="CrcStandard.CRC16_UMTS"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_UMTS"/>
        /// <seealso cref="CrcStandard.CRC16_BUYPASS"/>
        [CrcAlias]
        public static CrcStandard CRC16_VERIFONE => CrcStandard.CRC16_UMTS;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/USB</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/USB</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-16/USB</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-16/USB</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-usb">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 1 December 2007, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x8005</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC16_USB => CrcStandard.crc16_USB.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/XMODEM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/XMODEM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-16/XMODEM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-16-xmodem">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>16</c></description></item>
        /// <item><description>Polynomial: <c>0x1021</c></description></item>
        /// <item><description>Initial Value: <c>0x0000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-16/XMODEM</c> standard is also known by the aliases <c>CRC-16/ACORN</c>, <c>CRC-16/LTE</c>, <c>CRC-16/V-41-MSB</c>, <c>XMODEM</c>, and <c>ZMODEM</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_ACORN"/>
        /// <seealso cref="CrcStandard.CRC16_LTE"/>
        /// <seealso cref="CrcStandard.CRC16_V41MSB"/>
        /// <seealso cref="CrcStandard.XMODEM"/>
        /// <seealso cref="CrcStandard.ZMODEM"/>
        public static CrcStandard CRC16_XMODEM => CrcStandard.crc16_XMODEM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/XMODEM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/ACORN</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_ACORN</c> is an alias of the <see cref="CrcStandard.CRC16_XMODEM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_XMODEM"/>
        /// <seealso cref="CrcStandard.CRC16_LTE"/>
        /// <seealso cref="CrcStandard.CRC16_V41MSB"/>
        /// <seealso cref="CrcStandard.XMODEM"/>
        /// <seealso cref="CrcStandard.ZMODEM"/>
        [CrcAlias]
        public static CrcStandard CRC16_ACORN => CrcStandard.CRC16_XMODEM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/XMODEM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/LTE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_LTE</c> is an alias of the <see cref="CrcStandard.CRC16_XMODEM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_XMODEM"/>
        /// <seealso cref="CrcStandard.CRC16_ACORN"/>
        /// <seealso cref="CrcStandard.CRC16_V41MSB"/>
        /// <seealso cref="CrcStandard.XMODEM"/>
        /// <seealso cref="CrcStandard.ZMODEM"/>
        [CrcAlias]
        public static CrcStandard CRC16_LTE => CrcStandard.CRC16_XMODEM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/XMODEM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-16/V-41-MSB</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC16_V41MSB</c> is an alias of the <see cref="CrcStandard.CRC16_XMODEM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_XMODEM"/>
        /// <seealso cref="CrcStandard.CRC16_ACORN"/>
        /// <seealso cref="CrcStandard.CRC16_LTE"/>
        /// <seealso cref="CrcStandard.XMODEM"/>
        /// <seealso cref="CrcStandard.ZMODEM"/>
        [CrcAlias]
        public static CrcStandard CRC16_V41MSB => CrcStandard.CRC16_XMODEM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/XMODEM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>XMODEM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>XMODEM</c> is an alias of the <see cref="CrcStandard.CRC16_XMODEM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_XMODEM"/>
        /// <seealso cref="CrcStandard.CRC16_ACORN"/>
        /// <seealso cref="CrcStandard.CRC16_LTE"/>
        /// <seealso cref="CrcStandard.CRC16_V41MSB"/>
        /// <seealso cref="CrcStandard.ZMODEM"/>
        [CrcAlias]
        public static CrcStandard XMODEM => CrcStandard.CRC16_XMODEM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-16/XMODEM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>ZMODEM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>ZMODEM</c> is an alias of the <see cref="CrcStandard.CRC16_XMODEM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC16_XMODEM"/>
        /// <seealso cref="CrcStandard.CRC16_ACORN"/>
        /// <seealso cref="CrcStandard.CRC16_LTE"/>
        /// <seealso cref="CrcStandard.CRC16_V41MSB"/>
        /// <seealso cref="CrcStandard.XMODEM"/>
        [CrcAlias]
        public static CrcStandard ZMODEM => CrcStandard.CRC16_XMODEM;

        // --------------------------------
        // 17-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-17/CAN-FD</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-17/CAN-FD</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-17/CAN-FD</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-17/CAN-FD</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-17-can-fd">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 20 June 2017, Updated: 3 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>17</c></description></item>
        /// <item><description>Polynomial: <c>0x0001685B</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC17_CANFD => CrcStandard.crc17_CANFD.Value;

        // --------------------------------
        // 21-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-21/CAN-FD</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-21/CAN-FD</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-21/CAN-FD</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-21/CAN-FD</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-21-can-fd">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 20 June 2017, Updated: 3 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>21</c></description></item>
        /// <item><description>Polynomial: <c>0x00102899</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC21_CANFD => CrcStandard.crc21_CANFD.Value;

        // --------------------------------
        // 24-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/BLE</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/BLE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-24/BLE</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-ble">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x0000065B</c></description></item>
        /// <item><description>Initial Value: <c>0x00555555</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_BLE => CrcStandard.crc24_BLE.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/FLEXRAY-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/FLEXRAY-A</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-24/FLEXRAY-A</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-flexray-a">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 3 November 2007, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x005D6DCB</c></description></item>
        /// <item><description>Initial Value: <c>0x00FEDCBA</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_FLEXRAYA => CrcStandard.crc24_FLEXRAYA.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/FLEXRAY-B</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/FLEXRAY-B</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-24/FLEXRAY-B</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-flexray-b">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 3 November 2007, Updated: 6 February 2017), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x005D6DCB</c></description></item>
        /// <item><description>Initial Value: <c>0x00ABCDEF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_FLEXRAYB => CrcStandard.crc24_FLEXRAYB.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/INTERLAKEN</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/INTERLAKEN</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-24/INTERLAKEN</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-24/INTERLAKEN</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-interlaken">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 February 2016, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x00328B63</c></description></item>
        /// <item><description>Initial Value: <c>0x00FFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00FFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_INTERLAKEN => CrcStandard.crc24_INTERLAKEN.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/LTE-A</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/LTE-A</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-24/LTE-A</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-24/LTE-A</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-lte-a">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 13 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x00864CFB</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_LTEA => CrcStandard.crc24_LTEA.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/LTE-B</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/LTE-B</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-24/LTE-B</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-24/LTE-B</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-lte-b">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 13 February 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x00800063</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_LTEB => CrcStandard.crc24_LTEB.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/OPENPGP</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/OPENPGP</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-24/OPENPGP</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-openpgp">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 2 November 2007, Updated: 25 March 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x00864CFB</c></description></item>
        /// <item><description>Initial Value: <c>0x00B704CE</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-24/OPENPGP</c> standard is also known by the alias <c>CRC-24</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC24"/>
        public static CrcStandard CRC24_OPENPGP => CrcStandard.crc24_OPENPGP.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/OPENPGP</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC24</c> is an alias of the <see cref="CrcStandard.CRC24_OPENPGP"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC24_OPENPGP"/>
        [CrcAlias]
        public static CrcStandard CRC24 => CrcStandard.CRC24_OPENPGP;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-24/OS-9</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-24/OS-9</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-24/OS-9</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-24-os-9">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 25 July 2018, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>24</c></description></item>
        /// <item><description>Polynomial: <c>0x00800063</c></description></item>
        /// <item><description>Initial Value: <c>0x00FFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00FFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC24_OS9 => CrcStandard.crc24_OS9.Value;

        // --------------------------------
        // 30-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-30/CDMA</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-30/CDMA</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-30/CDMA</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-30/CDMA</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-30-cdma">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 20 February 2016, Updated: 3 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>30</c></description></item>
        /// <item><description>Polynomial: <c>0x2030B9C7</c></description></item>
        /// <item><description>Initial Value: <c>0x3FFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x3FFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC30_CDMA => CrcStandard.crc30_CDMA.Value;

        // --------------------------------
        // 31-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-31/PHILIPS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-31/PHILIPS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-31/PHILIPS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-31-philips">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 12 April 2012, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>31</c></description></item>
        /// <item><description>Polynomial: <c>0x04C11DB7</c></description></item>
        /// <item><description>Initial Value: <c>0x7FFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x7FFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC31_PHILIPS => CrcStandard.crc31_PHILIPS.Value;

        // --------------------------------
        // 32-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/AIXM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/AIXM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/AIXM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-aixm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 29 April 2009, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x814141AB</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/AIXM</c> standard is also known by the alias <c>CRC-32Q</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32Q"/>
        public static CrcStandard CRC32_AIXM => CrcStandard.crc32_AIXM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/AIXM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32Q</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32Q</c> is an alias of the <see cref="CrcStandard.CRC32_AIXM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_AIXM"/>
        [CrcAlias]
        public static CrcStandard CRC32Q => CrcStandard.CRC32_AIXM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/AUTOSAR</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/AUTOSAR</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/AUTOSAR</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-autosar">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 24 July 2016, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0xF4ACFB13</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC32_AUTOSAR => CrcStandard.crc32_AUTOSAR.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/BASE91-D</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/BASE91-D</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/BASE91-D</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-base91-d">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 28 November 2008, Updated: 21 March 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0xA833982B</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/BASE91-D</c> standard is also known by the alias <c>CRC-32D</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32D"/>
        public static CrcStandard CRC32_BASE91D => CrcStandard.crc32_BASE91D.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/BASE91-D</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32D</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32D</c> is an alias of the <see cref="CrcStandard.CRC32_BASE91D"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_BASE91D"/>
        [CrcAlias]
        public static CrcStandard CRC32D => CrcStandard.CRC32_BASE91D;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/BZIP2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/BZIP2</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/BZIP2</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-bzip2">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 8 October 2008, Updated: 20 March 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x04C11DB7</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/BZIP2</c> standard is also known by the aliases <c>CRC-32/AAL5</c>, <c>CRC-32/DECT-B</c>, and <c>B-CRC-32</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_AAL5"/>
        /// <seealso cref="CrcStandard.CRC32_DECTB"/>
        /// <seealso cref="CrcStandard.BCRC32"/>
        public static CrcStandard CRC32_BZIP2 => CrcStandard.crc32_BZIP2.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/BZIP2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/AAL5</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_AAL5</c> is an alias of the <see cref="CrcStandard.CRC32_BZIP2"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_BZIP2"/>
        /// <seealso cref="CrcStandard.CRC32_DECTB"/>
        /// <seealso cref="CrcStandard.BCRC32"/>
        [CrcAlias]
        public static CrcStandard CRC32_AAL5 => CrcStandard.CRC32_BZIP2;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/BZIP2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/DECT-B</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_DECTB</c> is an alias of the <see cref="CrcStandard.CRC32_BZIP2"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_BZIP2"/>
        /// <seealso cref="CrcStandard.CRC32_AAL5"/>
        /// <seealso cref="CrcStandard.BCRC32"/>
        [CrcAlias]
        public static CrcStandard CRC32_DECTB => CrcStandard.CRC32_BZIP2;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/BZIP2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>B-CRC-32</c> definition.</value>
        /// <remarks>
        /// <para>The <c>BCRC32</c> is an alias of the <see cref="CrcStandard.CRC32_BZIP2"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_BZIP2"/>
        /// <seealso cref="CrcStandard.CRC32_AAL5"/>
        /// <seealso cref="CrcStandard.CRC32_DECTB"/>
        [CrcAlias]
        public static CrcStandard BCRC32 => CrcStandard.CRC32_BZIP2;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/CD-ROM-EDC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/CD-ROM-EDC</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-32/CD-ROM-EDC</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-32/CD-ROM-EDC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-cd-rom-edc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 19 April 2019, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x8001801B</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC32_CDROMEDC => CrcStandard.crc32_CDROMEDC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/CKSUM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/CKSUM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/CKSUM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-cksum">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x04C11DB7</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/CKSUM</c> standard is also known by the aliases <c>CKSUM</c>, and <c>CRC-32/POSIX</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CKSUM"/>
        /// <seealso cref="CrcStandard.CRC32_POSIX"/>
        public static CrcStandard CRC32_CKSUM => CrcStandard.crc32_CKSUM.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/CKSUM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CKSUM</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CKSUM</c> is an alias of the <see cref="CrcStandard.CRC32_CKSUM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_CKSUM"/>
        /// <seealso cref="CrcStandard.CRC32_POSIX"/>
        [CrcAlias]
        public static CrcStandard CKSUM => CrcStandard.CRC32_CKSUM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/CKSUM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/POSIX</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_POSIX</c> is an alias of the <see cref="CrcStandard.CRC32_CKSUM"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_CKSUM"/>
        /// <seealso cref="CrcStandard.CKSUM"/>
        [CrcAlias]
        public static CrcStandard CRC32_POSIX => CrcStandard.CRC32_CKSUM;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISCSI</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/ISCSI</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/ISCSI</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-iscsi">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 September 2005, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x1EDC6F41</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/ISCSI</c> standard is also known by the aliases <c>CRC-32/BASE91-C</c>, <c>CRC-32/CASTAGNOLI</c>, <c>CRC-32/INTERLAKEN</c>, and <c>CRC-32C</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_BASE91C"/>
        /// <seealso cref="CrcStandard.CRC32_CASTAGNOLI"/>
        /// <seealso cref="CrcStandard.CRC32_INTERLAKEN"/>
        /// <seealso cref="CrcStandard.CRC32C"/>
        public static CrcStandard CRC32_ISCSI => CrcStandard.crc32_ISCSI.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISCSI</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/BASE91-C</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_BASE91C</c> is an alias of the <see cref="CrcStandard.CRC32_ISCSI"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISCSI"/>
        /// <seealso cref="CrcStandard.CRC32_CASTAGNOLI"/>
        /// <seealso cref="CrcStandard.CRC32_INTERLAKEN"/>
        /// <seealso cref="CrcStandard.CRC32C"/>
        [CrcAlias]
        public static CrcStandard CRC32_BASE91C => CrcStandard.CRC32_ISCSI;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISCSI</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/CASTAGNOLI</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_CASTAGNOLI</c> is an alias of the <see cref="CrcStandard.CRC32_ISCSI"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISCSI"/>
        /// <seealso cref="CrcStandard.CRC32_BASE91C"/>
        /// <seealso cref="CrcStandard.CRC32_INTERLAKEN"/>
        /// <seealso cref="CrcStandard.CRC32C"/>
        [CrcAlias]
        public static CrcStandard CRC32_CASTAGNOLI => CrcStandard.CRC32_ISCSI;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISCSI</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/INTERLAKEN</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_INTERLAKEN</c> is an alias of the <see cref="CrcStandard.CRC32_ISCSI"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISCSI"/>
        /// <seealso cref="CrcStandard.CRC32_BASE91C"/>
        /// <seealso cref="CrcStandard.CRC32_CASTAGNOLI"/>
        /// <seealso cref="CrcStandard.CRC32C"/>
        [CrcAlias]
        public static CrcStandard CRC32_INTERLAKEN => CrcStandard.CRC32_ISCSI;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISCSI</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32C</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32C</c> is an alias of the <see cref="CrcStandard.CRC32_ISCSI"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISCSI"/>
        /// <seealso cref="CrcStandard.CRC32_BASE91C"/>
        /// <seealso cref="CrcStandard.CRC32_CASTAGNOLI"/>
        /// <seealso cref="CrcStandard.CRC32_INTERLAKEN"/>
        [CrcAlias]
        public static CrcStandard CRC32C => CrcStandard.CRC32_ISCSI;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISO-HDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/ISO-HDLC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/ISO-HDLC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-iso-hdlc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x04C11DB7</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/ISO-HDLC</c> standard is also known by the aliases <c>CRC-32</c>, <c>CRC-32/ADCCP</c>, <c>CRC-32/V-42</c>, <c>CRC-32/XZ</c>, and <c>PKZIP</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32"/>
        /// <seealso cref="CrcStandard.CRC32_ADCCP"/>
        /// <seealso cref="CrcStandard.CRC32_V42"/>
        /// <seealso cref="CrcStandard.CRC32_XZ"/>
        /// <seealso cref="CrcStandard.PKZIP"/>
        public static CrcStandard CRC32_ISOHDLC => CrcStandard.crc32_ISOHDLC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISO-HDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32</c> is an alias of the <see cref="CrcStandard.CRC32_ISOHDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC32_ADCCP"/>
        /// <seealso cref="CrcStandard.CRC32_V42"/>
        /// <seealso cref="CrcStandard.CRC32_XZ"/>
        /// <seealso cref="CrcStandard.PKZIP"/>
        [CrcAlias]
        public static CrcStandard CRC32 => CrcStandard.CRC32_ISOHDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISO-HDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/ADCCP</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_ADCCP</c> is an alias of the <see cref="CrcStandard.CRC32_ISOHDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC32"/>
        /// <seealso cref="CrcStandard.CRC32_V42"/>
        /// <seealso cref="CrcStandard.CRC32_XZ"/>
        /// <seealso cref="CrcStandard.PKZIP"/>
        [CrcAlias]
        public static CrcStandard CRC32_ADCCP => CrcStandard.CRC32_ISOHDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISO-HDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/V-42</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_V42</c> is an alias of the <see cref="CrcStandard.CRC32_ISOHDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC32"/>
        /// <seealso cref="CrcStandard.CRC32_ADCCP"/>
        /// <seealso cref="CrcStandard.CRC32_XZ"/>
        /// <seealso cref="CrcStandard.PKZIP"/>
        [CrcAlias]
        public static CrcStandard CRC32_V42 => CrcStandard.CRC32_ISOHDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISO-HDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/XZ</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC32_XZ</c> is an alias of the <see cref="CrcStandard.CRC32_ISOHDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC32"/>
        /// <seealso cref="CrcStandard.CRC32_ADCCP"/>
        /// <seealso cref="CrcStandard.CRC32_V42"/>
        /// <seealso cref="CrcStandard.PKZIP"/>
        [CrcAlias]
        public static CrcStandard CRC32_XZ => CrcStandard.CRC32_ISOHDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/ISO-HDLC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>PKZIP</c> definition.</value>
        /// <remarks>
        /// <para>The <c>PKZIP</c> is an alias of the <see cref="CrcStandard.CRC32_ISOHDLC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_ISOHDLC"/>
        /// <seealso cref="CrcStandard.CRC32"/>
        /// <seealso cref="CrcStandard.CRC32_ADCCP"/>
        /// <seealso cref="CrcStandard.CRC32_V42"/>
        /// <seealso cref="CrcStandard.CRC32_XZ"/>
        [CrcAlias]
        public static CrcStandard PKZIP => CrcStandard.CRC32_ISOHDLC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/JAMCRC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/JAMCRC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/JAMCRC</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-jamcrc">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 21 November 2018), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x04C11DB7</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/JAMCRC</c> standard is also known by the alias <c>JAMCRC</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.JAMCRC"/>
        public static CrcStandard CRC32_JAMCRC => CrcStandard.crc32_JAMCRC.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/JAMCRC</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>JAMCRC</c> definition.</value>
        /// <remarks>
        /// <para>The <c>JAMCRC</c> is an alias of the <see cref="CrcStandard.CRC32_JAMCRC"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_JAMCRC"/>
        [CrcAlias]
        public static CrcStandard JAMCRC => CrcStandard.CRC32_JAMCRC;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/MEF</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/MEF</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/MEF</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-mef">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 January 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x741B8CD7</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC32_MEF => CrcStandard.crc32_MEF.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/MPEG-2</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/MPEG-2</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/MPEG-2</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-mpeg-2">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 8 October 2008, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x04C11DB7</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC32_MPEG2 => CrcStandard.crc32_MPEG2.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/XFER</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-32/XFER</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-32/XFER</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-32-xfer">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 30 March 2005, Updated: 2 January 2021), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>32</c></description></item>
        /// <item><description>Polynomial: <c>0x000000AF</c></description></item>
        /// <item><description>Initial Value: <c>0x00000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x00000000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-32/XFER</c> standard is also known by the alias <c>XFER</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.XFER"/>
        public static CrcStandard CRC32_XFER => CrcStandard.crc32_XFER.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-32/XFER</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>XFER</c> definition.</value>
        /// <remarks>
        /// <para>The <c>XFER</c> is an alias of the <see cref="CrcStandard.CRC32_XFER"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC32_XFER"/>
        [CrcAlias]
        public static CrcStandard XFER => CrcStandard.CRC32_XFER;

        // --------------------------------
        // 40-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-40/GSM</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-40/GSM</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-40/GSM</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-40/GSM</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-40-gsm">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 10 December 2009, Updated: 25 March 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>40</c></description></item>
        /// <item><description>Polynomial: <c>0x0000000004820009</c></description></item>
        /// <item><description>Initial Value: <c>0x0000000000000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x000000FFFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC40_GSM => CrcStandard.crc40_GSM.Value;

        // --------------------------------
        // 64-bit CRC standards
        // --------------------------------
        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/ECMA-182</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/ECMA-182</c> definition.</value>
        /// <remarks>
        /// <note type="note">The parameters for the <c>CRC-64/ECMA-182</c> standard are not widely tested or confirmed.</note>
        /// <para>The <c>CRC-64/ECMA-182</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-64-ecma-182">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 6 April 2009, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>64</c></description></item>
        /// <item><description>Polynomial: <c>0x42F0E1EBA9EA3693</c></description></item>
        /// <item><description>Initial Value: <c>0x0000000000000000</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0x0000000000000000</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-64/ECMA-182</c> standard is also known by the alias <c>CRC-64</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC64"/>
        public static CrcStandard CRC64_ECMA182 => CrcStandard.crc64_ECMA182.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/ECMA-182</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC64</c> is an alias of the <see cref="CrcStandard.CRC64_ECMA182"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC64_ECMA182"/>
        [CrcAlias]
        public static CrcStandard CRC64 => CrcStandard.CRC64_ECMA182;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/GO-ISO</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/GO-ISO</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-64/GO-ISO</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-64-go-iso">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 28 January 2017, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>64</c></description></item>
        /// <item><description>Polynomial: <c>0x000000000000001B</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC64_GOISO => CrcStandard.crc64_GOISO.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/JONES</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/JONES</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-64/JONES</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-64-jones">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 31 December 9999), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>64</c></description></item>
        /// <item><description>Polynomial: <c>0xAD93D23594C935A9</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000000000000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC64_JONES => CrcStandard.crc64_JONES.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/MS</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/MS</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-64/MS</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-64-ms">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 7 January 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>64</c></description></item>
        /// <item><description>Polynomial: <c>0x259C84CBA6426349</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0x0000000000000000</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC64_MS => CrcStandard.crc64_MS.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/WE</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/WE</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-64/WE</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-64-we">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 8 November 2009, Updated: 28 December 2019), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>64</c></description></item>
        /// <item><description>Polynomial: <c>0x42F0E1EBA9EA3693</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>False</c></description></item>
        /// <item><description>Reflect Out: <c>False</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// </remarks>
        public static CrcStandard CRC64_WE => CrcStandard.crc64_WE.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/XZ</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/XZ</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC-64/XZ</c> standard was taken from <a href="http://reveng.sourceforge.net/crc-catalogue/all.htm#crc.cat.crc-64-xz">http://reveng.sourceforge.net/crc-catalogue/</a> (Created: 4 July 2011, Updated: 7 May 2022), with the following definition.</para>
        /// <para>
        /// <list type="bullet">
        /// <item><description>Width: <c>64</c></description></item>
        /// <item><description>Polynomial: <c>0x42F0E1EBA9EA3693</c></description></item>
        /// <item><description>Initial Value: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// <item><description>Reflect In: <c>True</c></description></item>
        /// <item><description>Reflect Out: <c>True</c></description></item>
        /// <item><description>XOR Out: <c>0xFFFFFFFFFFFFFFFF</c></description></item>
        /// </list>
        /// </para>
        /// <para>The <c>CRC-64/XZ</c> standard is also known by the alias <c>CRC-64/GO-ECMA</c>.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC64_GOECMA"/>
        public static CrcStandard CRC64_XZ => CrcStandard.crc64_XZ.Value;

        /// <summary>Gets the <see cref="CrcStandard"/> that defines the <c>CRC-64/XZ</c> cyclic redundancy check algorithm standard.</summary>
        /// <value>A <see cref="CrcStandard"/> object with the properties set to the <c>CRC-64/GO-ECMA</c> definition.</value>
        /// <remarks>
        /// <para>The <c>CRC64_GOECMA</c> is an alias of the <see cref="CrcStandard.CRC64_XZ"/> standard.</para>
        /// </remarks>
        /// <seealso cref="CrcStandard.CRC64_XZ"/>
        [CrcAlias]
        public static CrcStandard CRC64_GOECMA => CrcStandard.CRC64_XZ;

        #endregion Properties
		
        #region Methods

		/// <summary>
		/// Return the <see cref="CrcStandard"/> with the specified cyclic redundancy check algorithm standard.
		/// </summary>
		/// <param name="name">The name of the CRC Standard to use. See Remarks.</param>
		/// <returns>The <see cref="CrcStandard"/> associated with the specified cyclic redundancy check algorithm standard.</returns>
        /// <exception cref="System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/> (Nothing in Visual Basic).</exception>
        /// <exception cref="Bodu.Security.Cryptography.CrcStandardNotFoundException"><paramref name="name"/> is a an unknown cyclic redundancy check standard.</exception>
        /// <remarks>
		/// <para>The properties for the CRC Standards were taken from <a href="http://reveng.sourceforge.net/crc-catalogue/">http://reveng.sourceforge.net/crc-catalogue/</a>.</para>
        /// <para>The following permutationTable shows the valid values for the <paramref name="name"/> parameter and the CRC Standard it maps to.</para>
        /// <list type="permutationTable">
        /// <listheader><term>Parameter value</term><description>Implements</description></listheader>
        /// <item><term>CRC-3/GSM</term><description><see cref="CrcStandard.CRC3_GSM"/></description></item>
        /// <item><term>CRC-3/ROHC</term><description><see cref="CrcStandard.CRC3_ROHC"/></description></item>
        /// <item><term>CRC-4/G-704</term><description><see cref="CrcStandard.CRC4_G704"/></description></item>
        /// <item><term>CRC-4/INTERLAKEN</term><description><see cref="CrcStandard.CRC4_INTERLAKEN"/></description></item>
        /// <item><term>CRC-4/ITU</term><description><see cref="CrcStandard.CRC4_ITU"/></description></item>
        /// <item><term>CRC-5/EPC</term><description><see cref="CrcStandard.CRC5_EPC"/></description></item>
        /// <item><term>CRC-5/EPC-C1G2</term><description><see cref="CrcStandard.CRC5_EPCC1G2"/></description></item>
        /// <item><term>CRC-5/G-704</term><description><see cref="CrcStandard.CRC5_G704"/></description></item>
        /// <item><term>CRC-5/ITU</term><description><see cref="CrcStandard.CRC5_ITU"/></description></item>
        /// <item><term>CRC-5/USB</term><description><see cref="CrcStandard.CRC5_USB"/></description></item>
        /// <item><term>CRC-6/CDMA2000-A</term><description><see cref="CrcStandard.CRC6_CDMA2000A"/></description></item>
        /// <item><term>CRC-6/CDMA2000-B</term><description><see cref="CrcStandard.CRC6_CDMA2000B"/></description></item>
        /// <item><term>CRC-6/DARC</term><description><see cref="CrcStandard.CRC6_DARC"/></description></item>
        /// <item><term>CRC-6/G-704</term><description><see cref="CrcStandard.CRC6_G704"/></description></item>
        /// <item><term>CRC-6/GSM</term><description><see cref="CrcStandard.CRC6_GSM"/></description></item>
        /// <item><term>CRC-6/ITU</term><description><see cref="CrcStandard.CRC6_ITU"/></description></item>
        /// <item><term>CRC-7</term><description><see cref="CrcStandard.CRC7"/></description></item>
        /// <item><term>CRC-7/MMC</term><description><see cref="CrcStandard.CRC7_MMC"/></description></item>
        /// <item><term>CRC-7/ROHC</term><description><see cref="CrcStandard.CRC7_ROHC"/></description></item>
        /// <item><term>CRC-7/UMTS</term><description><see cref="CrcStandard.CRC7_UMTS"/></description></item>
        /// <item><term>CRC-8</term><description><see cref="CrcStandard.CRC8"/></description></item>
        /// <item><term>CRC-8/AES</term><description><see cref="CrcStandard.CRC8_AES"/></description></item>
        /// <item><term>CRC-8/AUTOSAR</term><description><see cref="CrcStandard.CRC8_AUTOSAR"/></description></item>
        /// <item><term>CRC-8/BLUETOOTH</term><description><see cref="CrcStandard.CRC8_BLUETOOTH"/></description></item>
        /// <item><term>CRC-8/CDMA2000</term><description><see cref="CrcStandard.CRC8_CDMA2000"/></description></item>
        /// <item><term>CRC-8/DARC</term><description><see cref="CrcStandard.CRC8_DARC"/></description></item>
        /// <item><term>CRC-8/DVB-S2</term><description><see cref="CrcStandard.CRC8_DVBS2"/></description></item>
        /// <item><term>CRC-8/EBU</term><description><see cref="CrcStandard.CRC8_EBU"/></description></item>
        /// <item><term>CRC-8/GSM-A</term><description><see cref="CrcStandard.CRC8_GSMA"/></description></item>
        /// <item><term>CRC-8/GSM-B</term><description><see cref="CrcStandard.CRC8_GSMB"/></description></item>
        /// <item><term>CRC-8/HITAG</term><description><see cref="CrcStandard.CRC8_HITAG"/></description></item>
        /// <item><term>CRC-8/I-432-1</term><description><see cref="CrcStandard.CRC8_I4321"/></description></item>
        /// <item><term>CRC-8/I-CODE</term><description><see cref="CrcStandard.CRC8_ICODE"/></description></item>
        /// <item><term>CRC-8/ITU</term><description><see cref="CrcStandard.CRC8_ITU"/></description></item>
        /// <item><term>CRC-8/LTE</term><description><see cref="CrcStandard.CRC8_LTE"/></description></item>
        /// <item><term>CRC-8/MAXIM</term><description><see cref="CrcStandard.CRC8_MAXIM"/></description></item>
        /// <item><term>CRC-8/MAXIM-DOW</term><description><see cref="CrcStandard.CRC8_MAXIMDOW"/></description></item>
        /// <item><term>CRC-8/MIFARE-MAD</term><description><see cref="CrcStandard.CRC8_MIFAREMAD"/></description></item>
        /// <item><term>CRC-8/NRSC-5</term><description><see cref="CrcStandard.CRC8_NRSC5"/></description></item>
        /// <item><term>CRC-8/OPENSAFETY</term><description><see cref="CrcStandard.CRC8_OPENSAFETY"/></description></item>
        /// <item><term>CRC-8/ROHC</term><description><see cref="CrcStandard.CRC8_ROHC"/></description></item>
        /// <item><term>CRC-8/SAE-J1850</term><description><see cref="CrcStandard.CRC8_SAEJ1850"/></description></item>
        /// <item><term>CRC-8/SMBUS</term><description><see cref="CrcStandard.CRC8_SMBUS"/></description></item>
        /// <item><term>CRC-8/TECH-3250</term><description><see cref="CrcStandard.CRC8_TECH3250"/></description></item>
        /// <item><term>CRC-8/WCDMA</term><description><see cref="CrcStandard.CRC8_WCDMA"/></description></item>
        /// <item><term>DOW-CRC</term><description><see cref="CrcStandard.DOWCRC"/></description></item>
        /// <item><term>CRC-10</term><description><see cref="CrcStandard.CRC10"/></description></item>
        /// <item><term>CRC-10/ATM</term><description><see cref="CrcStandard.CRC10_ATM"/></description></item>
        /// <item><term>CRC-10/CDMA2000</term><description><see cref="CrcStandard.CRC10_CDMA2000"/></description></item>
        /// <item><term>CRC-10/GSM</term><description><see cref="CrcStandard.CRC10_GSM"/></description></item>
        /// <item><term>CRC-10/I-610</term><description><see cref="CrcStandard.CRC10_I610"/></description></item>
        /// <item><term>CRC-11</term><description><see cref="CrcStandard.CRC11"/></description></item>
        /// <item><term>CRC-11/FLEXRAY</term><description><see cref="CrcStandard.CRC11_FLEXRAY"/></description></item>
        /// <item><term>CRC-11/UMTS</term><description><see cref="CrcStandard.CRC11_UMTS"/></description></item>
        /// <item><term>CRC-12/3GPP</term><description><see cref="CrcStandard.CRC12_3GPP"/></description></item>
        /// <item><term>CRC-12/CDMA2000</term><description><see cref="CrcStandard.CRC12_CDMA2000"/></description></item>
        /// <item><term>CRC-12/DECT</term><description><see cref="CrcStandard.CRC12_DECT"/></description></item>
        /// <item><term>CRC-12/GSM</term><description><see cref="CrcStandard.CRC12_GSM"/></description></item>
        /// <item><term>CRC-12/UMTS</term><description><see cref="CrcStandard.CRC12_UMTS"/></description></item>
        /// <item><term>X-CRC-12</term><description><see cref="CrcStandard.XCRC12"/></description></item>
        /// <item><term>CRC-13/BBC</term><description><see cref="CrcStandard.CRC13_BBC"/></description></item>
        /// <item><term>CRC-14/DARC</term><description><see cref="CrcStandard.CRC14_DARC"/></description></item>
        /// <item><term>CRC-14/GSM</term><description><see cref="CrcStandard.CRC14_GSM"/></description></item>
        /// <item><term>CRC-15</term><description><see cref="CrcStandard.CRC15"/></description></item>
        /// <item><term>CRC-15/CAN</term><description><see cref="CrcStandard.CRC15_CAN"/></description></item>
        /// <item><term>CRC-15/MPT1327</term><description><see cref="CrcStandard.CRC15_MPT1327"/></description></item>
        /// <item><term>ARC</term><description><see cref="CrcStandard.ARC"/></description></item>
        /// <item><term>CRC-16</term><description><see cref="CrcStandard.CRC16"/></description></item>
        /// <item><term>CRC-16/ACORN</term><description><see cref="CrcStandard.CRC16_ACORN"/></description></item>
        /// <item><term>CRC-16/ARC</term><description><see cref="CrcStandard.CRC16_ARC"/></description></item>
        /// <item><term>CRC-16/AUG-CCITT</term><description><see cref="CrcStandard.CRC16_AUGCCITT"/></description></item>
        /// <item><term>CRC-16/AUTOSAR</term><description><see cref="CrcStandard.CRC16_AUTOSAR"/></description></item>
        /// <item><term>CRC-16/BUYPASS</term><description><see cref="CrcStandard.CRC16_BUYPASS"/></description></item>
        /// <item><term>CRC-16/CCITT</term><description><see cref="CrcStandard.CRC16_CCITT"/></description></item>
        /// <item><term>CRC-16/CCITT-FALSE</term><description><see cref="CrcStandard.CRC16_CCITTFALSE"/></description></item>
        /// <item><term>CRC-16/CCITT-TRUE</term><description><see cref="CrcStandard.CRC16_CCITTTRUE"/></description></item>
        /// <item><term>CRC-16/CDMA2000</term><description><see cref="CrcStandard.CRC16_CDMA2000"/></description></item>
        /// <item><term>CRC-16/CMS</term><description><see cref="CrcStandard.CRC16_CMS"/></description></item>
        /// <item><term>CRC-16/DARC</term><description><see cref="CrcStandard.CRC16_DARC"/></description></item>
        /// <item><term>CRC-16/DDS-110</term><description><see cref="CrcStandard.CRC16_DDS110"/></description></item>
        /// <item><term>CRC-16/DECT-R</term><description><see cref="CrcStandard.CRC16_DECTR"/></description></item>
        /// <item><term>CRC-16/DECT-X</term><description><see cref="CrcStandard.CRC16_DECTX"/></description></item>
        /// <item><term>CRC-16/DNP</term><description><see cref="CrcStandard.CRC16_DNP"/></description></item>
        /// <item><term>CRC-16/EN-13757</term><description><see cref="CrcStandard.CRC16_EN13757"/></description></item>
        /// <item><term>CRC-16/EPC</term><description><see cref="CrcStandard.CRC16_EPC"/></description></item>
        /// <item><term>CRC-16/EPC-C1G2</term><description><see cref="CrcStandard.CRC16_EPCC1G2"/></description></item>
        /// <item><term>CRC-16/GENIBUS</term><description><see cref="CrcStandard.CRC16_GENIBUS"/></description></item>
        /// <item><term>CRC-16/GSM</term><description><see cref="CrcStandard.CRC16_GSM"/></description></item>
        /// <item><term>CRC-16/IBM-3740</term><description><see cref="CrcStandard.CRC16_IBM3740"/></description></item>
        /// <item><term>CRC-16/IBM-SDLC</term><description><see cref="CrcStandard.CRC16_IBMSDLC"/></description></item>
        /// <item><term>CRC-16/I-CODE</term><description><see cref="CrcStandard.CRC16_ICODE"/></description></item>
        /// <item><term>CRC-16/IEC-61158-2</term><description><see cref="CrcStandard.CRC16_IEC611582"/></description></item>
        /// <item><term>CRC-16/ISO-HDLC</term><description><see cref="CrcStandard.CRC16_ISOHDLC"/></description></item>
        /// <item><term>CRC-16/ISO-IEC-14443-3-A</term><description><see cref="CrcStandard.CRC16_ISOIEC144433A"/></description></item>
        /// <item><term>CRC-16/ISO-IEC-14443-3-B</term><description><see cref="CrcStandard.CRC16_ISOIEC144433B"/></description></item>
        /// <item><term>CRC-16/KERMIT</term><description><see cref="CrcStandard.CRC16_KERMIT"/></description></item>
        /// <item><term>CRC-16/LHA</term><description><see cref="CrcStandard.CRC16_LHA"/></description></item>
        /// <item><term>CRC-16/LJ1200</term><description><see cref="CrcStandard.CRC16_LJ1200"/></description></item>
        /// <item><term>CRC-16/LTE</term><description><see cref="CrcStandard.CRC16_LTE"/></description></item>
        /// <item><term>CRC-16/M17</term><description><see cref="CrcStandard.CRC16_M17"/></description></item>
        /// <item><term>CRC-16/MAXIM</term><description><see cref="CrcStandard.CRC16_MAXIM"/></description></item>
        /// <item><term>CRC-16/MAXIM-DOW</term><description><see cref="CrcStandard.CRC16_MAXIMDOW"/></description></item>
        /// <item><term>CRC-16/MCRF4XX</term><description><see cref="CrcStandard.CRC16_MCRF4XX"/></description></item>
        /// <item><term>CRC-16/MODBUS</term><description><see cref="CrcStandard.CRC16_MODBUS"/></description></item>
        /// <item><term>CRC-16/NRSC-5</term><description><see cref="CrcStandard.CRC16_NRSC5"/></description></item>
        /// <item><term>CRC-16/OPENSAFETY-A</term><description><see cref="CrcStandard.CRC16_OPENSAFETYA"/></description></item>
        /// <item><term>CRC-16/OPENSAFETY-B</term><description><see cref="CrcStandard.CRC16_OPENSAFETYB"/></description></item>
        /// <item><term>CRC-16/PROFIBUS</term><description><see cref="CrcStandard.CRC16_PROFIBUS"/></description></item>
        /// <item><term>CRC-16/RIELLO</term><description><see cref="CrcStandard.CRC16_RIELLO"/></description></item>
        /// <item><term>CRC-16/SPI-FUJITSU</term><description><see cref="CrcStandard.CRC16_SPIFUJITSU"/></description></item>
        /// <item><term>CRC-16/T10-DIF</term><description><see cref="CrcStandard.CRC16_T10DIF"/></description></item>
        /// <item><term>CRC-16/TELEDISK</term><description><see cref="CrcStandard.CRC16_TELEDISK"/></description></item>
        /// <item><term>CRC-16/TMS37157</term><description><see cref="CrcStandard.CRC16_TMS37157"/></description></item>
        /// <item><term>CRC-16/UMTS</term><description><see cref="CrcStandard.CRC16_UMTS"/></description></item>
        /// <item><term>CRC-16/USB</term><description><see cref="CrcStandard.CRC16_USB"/></description></item>
        /// <item><term>CRC-16/V-41-LSB</term><description><see cref="CrcStandard.CRC16_V41LSB"/></description></item>
        /// <item><term>CRC-16/V-41-MSB</term><description><see cref="CrcStandard.CRC16_V41MSB"/></description></item>
        /// <item><term>CRC-16/VERIFONE</term><description><see cref="CrcStandard.CRC16_VERIFONE"/></description></item>
        /// <item><term>CRC-16/X-25</term><description><see cref="CrcStandard.CRC16_X25"/></description></item>
        /// <item><term>CRC-16/XMODEM</term><description><see cref="CrcStandard.CRC16_XMODEM"/></description></item>
        /// <item><term>CRC-A</term><description><see cref="CrcStandard.CRCA"/></description></item>
        /// <item><term>CRC-B</term><description><see cref="CrcStandard.CRCB"/></description></item>
        /// <item><term>CRC-CCITT</term><description><see cref="CrcStandard.CRCCCITT"/></description></item>
        /// <item><term>CRC-IBM</term><description><see cref="CrcStandard.CRCIBM"/></description></item>
        /// <item><term>KERMIT</term><description><see cref="CrcStandard.KERMIT"/></description></item>
        /// <item><term>MODBUS</term><description><see cref="CrcStandard.MODBUS"/></description></item>
        /// <item><term>R-CRC-16</term><description><see cref="CrcStandard.RCRC16"/></description></item>
        /// <item><term>X-25</term><description><see cref="CrcStandard.X25"/></description></item>
        /// <item><term>X-CRC-16</term><description><see cref="CrcStandard.XCRC16"/></description></item>
        /// <item><term>XMODEM</term><description><see cref="CrcStandard.XMODEM"/></description></item>
        /// <item><term>ZMODEM</term><description><see cref="CrcStandard.ZMODEM"/></description></item>
        /// <item><term>CRC-17/CAN-FD</term><description><see cref="CrcStandard.CRC17_CANFD"/></description></item>
        /// <item><term>CRC-21/CAN-FD</term><description><see cref="CrcStandard.CRC21_CANFD"/></description></item>
        /// <item><term>CRC-24</term><description><see cref="CrcStandard.CRC24"/></description></item>
        /// <item><term>CRC-24/BLE</term><description><see cref="CrcStandard.CRC24_BLE"/></description></item>
        /// <item><term>CRC-24/FLEXRAY-A</term><description><see cref="CrcStandard.CRC24_FLEXRAYA"/></description></item>
        /// <item><term>CRC-24/FLEXRAY-B</term><description><see cref="CrcStandard.CRC24_FLEXRAYB"/></description></item>
        /// <item><term>CRC-24/INTERLAKEN</term><description><see cref="CrcStandard.CRC24_INTERLAKEN"/></description></item>
        /// <item><term>CRC-24/LTE-A</term><description><see cref="CrcStandard.CRC24_LTEA"/></description></item>
        /// <item><term>CRC-24/LTE-B</term><description><see cref="CrcStandard.CRC24_LTEB"/></description></item>
        /// <item><term>CRC-24/OPENPGP</term><description><see cref="CrcStandard.CRC24_OPENPGP"/></description></item>
        /// <item><term>CRC-24/OS-9</term><description><see cref="CrcStandard.CRC24_OS9"/></description></item>
        /// <item><term>CRC-30/CDMA</term><description><see cref="CrcStandard.CRC30_CDMA"/></description></item>
        /// <item><term>CRC-31/PHILIPS</term><description><see cref="CrcStandard.CRC31_PHILIPS"/></description></item>
        /// <item><term>B-CRC-32</term><description><see cref="CrcStandard.BCRC32"/></description></item>
        /// <item><term>CKSUM</term><description><see cref="CrcStandard.CKSUM"/></description></item>
        /// <item><term>CRC-32</term><description><see cref="CrcStandard.CRC32"/></description></item>
        /// <item><term>CRC-32/AAL5</term><description><see cref="CrcStandard.CRC32_AAL5"/></description></item>
        /// <item><term>CRC-32/ADCCP</term><description><see cref="CrcStandard.CRC32_ADCCP"/></description></item>
        /// <item><term>CRC-32/AIXM</term><description><see cref="CrcStandard.CRC32_AIXM"/></description></item>
        /// <item><term>CRC-32/AUTOSAR</term><description><see cref="CrcStandard.CRC32_AUTOSAR"/></description></item>
        /// <item><term>CRC-32/BASE91-C</term><description><see cref="CrcStandard.CRC32_BASE91C"/></description></item>
        /// <item><term>CRC-32/BASE91-D</term><description><see cref="CrcStandard.CRC32_BASE91D"/></description></item>
        /// <item><term>CRC-32/BZIP2</term><description><see cref="CrcStandard.CRC32_BZIP2"/></description></item>
        /// <item><term>CRC-32/CASTAGNOLI</term><description><see cref="CrcStandard.CRC32_CASTAGNOLI"/></description></item>
        /// <item><term>CRC-32/CD-ROM-EDC</term><description><see cref="CrcStandard.CRC32_CDROMEDC"/></description></item>
        /// <item><term>CRC-32/CKSUM</term><description><see cref="CrcStandard.CRC32_CKSUM"/></description></item>
        /// <item><term>CRC-32/DECT-B</term><description><see cref="CrcStandard.CRC32_DECTB"/></description></item>
        /// <item><term>CRC-32/INTERLAKEN</term><description><see cref="CrcStandard.CRC32_INTERLAKEN"/></description></item>
        /// <item><term>CRC-32/ISCSI</term><description><see cref="CrcStandard.CRC32_ISCSI"/></description></item>
        /// <item><term>CRC-32/ISO-HDLC</term><description><see cref="CrcStandard.CRC32_ISOHDLC"/></description></item>
        /// <item><term>CRC-32/JAMCRC</term><description><see cref="CrcStandard.CRC32_JAMCRC"/></description></item>
        /// <item><term>CRC-32/MEF</term><description><see cref="CrcStandard.CRC32_MEF"/></description></item>
        /// <item><term>CRC-32/MPEG-2</term><description><see cref="CrcStandard.CRC32_MPEG2"/></description></item>
        /// <item><term>CRC-32/POSIX</term><description><see cref="CrcStandard.CRC32_POSIX"/></description></item>
        /// <item><term>CRC-32/V-42</term><description><see cref="CrcStandard.CRC32_V42"/></description></item>
        /// <item><term>CRC-32/XFER</term><description><see cref="CrcStandard.CRC32_XFER"/></description></item>
        /// <item><term>CRC-32/XZ</term><description><see cref="CrcStandard.CRC32_XZ"/></description></item>
        /// <item><term>CRC-32C</term><description><see cref="CrcStandard.CRC32C"/></description></item>
        /// <item><term>CRC-32D</term><description><see cref="CrcStandard.CRC32D"/></description></item>
        /// <item><term>CRC-32Q</term><description><see cref="CrcStandard.CRC32Q"/></description></item>
        /// <item><term>JAMCRC</term><description><see cref="CrcStandard.JAMCRC"/></description></item>
        /// <item><term>PKZIP</term><description><see cref="CrcStandard.PKZIP"/></description></item>
        /// <item><term>XFER</term><description><see cref="CrcStandard.XFER"/></description></item>
        /// <item><term>CRC-40/GSM</term><description><see cref="CrcStandard.CRC40_GSM"/></description></item>
        /// <item><term>CRC-64</term><description><see cref="CrcStandard.CRC64"/></description></item>
        /// <item><term>CRC-64/ECMA-182</term><description><see cref="CrcStandard.CRC64_ECMA182"/></description></item>
        /// <item><term>CRC-64/GO-ECMA</term><description><see cref="CrcStandard.CRC64_GOECMA"/></description></item>
        /// <item><term>CRC-64/GO-ISO</term><description><see cref="CrcStandard.CRC64_GOISO"/></description></item>
        /// <item><term>CRC-64/JONES</term><description><see cref="CrcStandard.CRC64_JONES"/></description></item>
        /// <item><term>CRC-64/MS</term><description><see cref="CrcStandard.CRC64_MS"/></description></item>
        /// <item><term>CRC-64/WE</term><description><see cref="CrcStandard.CRC64_WE"/></description></item>
        /// <item><term>CRC-64/XZ</term><description><see cref="CrcStandard.CRC64_XZ"/></description></item>
        /// </list>
        /// </remarks>
		public static CrcStandard GetCrcParameters(string name)
        {
			if (name== null) throw new ArgumentNullException(nameof(name));

			switch (name)
			{

                // --------------------------------
                // 3-bit CRC standards
                // --------------------------------
                case "CRC-3/GSM": return CrcStandard.CRC3_GSM; // build and return the CRC Standard for 'CRC-3/GSM'
                case "CRC-3/ROHC": return CrcStandard.CRC3_ROHC; // build and return the CRC Standard for 'CRC-3/ROHC'

                // --------------------------------
                // 4-bit CRC standards
                // --------------------------------
                case "CRC-4/ITU": return CrcStandard.CRC4_ITU; // build and return the CRC Standard for 'CRC-4/ITU'
                case "CRC-4/G-704": return CrcStandard.CRC4_G704; // build and return the CRC Standard for 'CRC-4/G-704'
                case "CRC-4/INTERLAKEN": return CrcStandard.CRC4_INTERLAKEN; // build and return the CRC Standard for 'CRC-4/INTERLAKEN'

                // --------------------------------
                // 5-bit CRC standards
                // --------------------------------
                case "CRC-5/EPC": return CrcStandard.CRC5_EPC; // build and return the CRC Standard for 'CRC-5/EPC'
                case "CRC-5/EPC-C1G2": return CrcStandard.CRC5_EPCC1G2; // build and return the CRC Standard for 'CRC-5/EPC-C1G2'
                case "CRC-5/ITU": return CrcStandard.CRC5_ITU; // build and return the CRC Standard for 'CRC-5/ITU'
                case "CRC-5/G-704": return CrcStandard.CRC5_G704; // build and return the CRC Standard for 'CRC-5/G-704'
                case "CRC-5/USB": return CrcStandard.CRC5_USB; // build and return the CRC Standard for 'CRC-5/USB'

                // --------------------------------
                // 6-bit CRC standards
                // --------------------------------
                case "CRC-6/CDMA2000-A": return CrcStandard.CRC6_CDMA2000A; // build and return the CRC Standard for 'CRC-6/CDMA2000-A'
                case "CRC-6/CDMA2000-B": return CrcStandard.CRC6_CDMA2000B; // build and return the CRC Standard for 'CRC-6/CDMA2000-B'
                case "CRC-6/DARC": return CrcStandard.CRC6_DARC; // build and return the CRC Standard for 'CRC-6/DARC'
                case "CRC-6/ITU": return CrcStandard.CRC6_ITU; // build and return the CRC Standard for 'CRC-6/ITU'
                case "CRC-6/G-704": return CrcStandard.CRC6_G704; // build and return the CRC Standard for 'CRC-6/G-704'
                case "CRC-6/GSM": return CrcStandard.CRC6_GSM; // build and return the CRC Standard for 'CRC-6/GSM'

                // --------------------------------
                // 7-bit CRC standards
                // --------------------------------
                case "CRC-7": return CrcStandard.CRC7; // build and return the CRC Standard for 'CRC-7'
                case "CRC-7/MMC": return CrcStandard.CRC7_MMC; // build and return the CRC Standard for 'CRC-7/MMC'
                case "CRC-7/ROHC": return CrcStandard.CRC7_ROHC; // build and return the CRC Standard for 'CRC-7/ROHC'
                case "CRC-7/UMTS": return CrcStandard.CRC7_UMTS; // build and return the CRC Standard for 'CRC-7/UMTS'

                // --------------------------------
                // 8-bit CRC standards
                // --------------------------------
                case "CRC-8/AUTOSAR": return CrcStandard.CRC8_AUTOSAR; // build and return the CRC Standard for 'CRC-8/AUTOSAR'
                case "CRC-8/BLUETOOTH": return CrcStandard.CRC8_BLUETOOTH; // build and return the CRC Standard for 'CRC-8/BLUETOOTH'
                case "CRC-8/CDMA2000": return CrcStandard.CRC8_CDMA2000; // build and return the CRC Standard for 'CRC-8/CDMA2000'
                case "CRC-8/DARC": return CrcStandard.CRC8_DARC; // build and return the CRC Standard for 'CRC-8/DARC'
                case "CRC-8/DVB-S2": return CrcStandard.CRC8_DVBS2; // build and return the CRC Standard for 'CRC-8/DVB-S2'
                case "CRC-8/GSM-A": return CrcStandard.CRC8_GSMA; // build and return the CRC Standard for 'CRC-8/GSM-A'
                case "CRC-8/GSM-B": return CrcStandard.CRC8_GSMB; // build and return the CRC Standard for 'CRC-8/GSM-B'
                case "CRC-8/HITAG": return CrcStandard.CRC8_HITAG; // build and return the CRC Standard for 'CRC-8/HITAG'
                case "CRC-8/ITU": return CrcStandard.CRC8_ITU; // build and return the CRC Standard for 'CRC-8/ITU'
                case "CRC-8/I-432-1": return CrcStandard.CRC8_I4321; // build and return the CRC Standard for 'CRC-8/I-432-1'
                case "CRC-8/I-CODE": return CrcStandard.CRC8_ICODE; // build and return the CRC Standard for 'CRC-8/I-CODE'
                case "CRC-8/LTE": return CrcStandard.CRC8_LTE; // build and return the CRC Standard for 'CRC-8/LTE'
                case "CRC-8/MAXIM": return CrcStandard.CRC8_MAXIM; // build and return the CRC Standard for 'CRC-8/MAXIM'
                case "DOW-CRC": return CrcStandard.DOWCRC; // build and return the CRC Standard for 'DOW-CRC'
                case "CRC-8/MAXIM-DOW": return CrcStandard.CRC8_MAXIMDOW; // build and return the CRC Standard for 'CRC-8/MAXIM-DOW'
                case "CRC-8/MIFARE-MAD": return CrcStandard.CRC8_MIFAREMAD; // build and return the CRC Standard for 'CRC-8/MIFARE-MAD'
                case "CRC-8/NRSC-5": return CrcStandard.CRC8_NRSC5; // build and return the CRC Standard for 'CRC-8/NRSC-5'
                case "CRC-8/OPENSAFETY": return CrcStandard.CRC8_OPENSAFETY; // build and return the CRC Standard for 'CRC-8/OPENSAFETY'
                case "CRC-8/ROHC": return CrcStandard.CRC8_ROHC; // build and return the CRC Standard for 'CRC-8/ROHC'
                case "CRC-8/SAE-J1850": return CrcStandard.CRC8_SAEJ1850; // build and return the CRC Standard for 'CRC-8/SAE-J1850'
                case "CRC-8": return CrcStandard.CRC8; // build and return the CRC Standard for 'CRC-8'
                case "CRC-8/SMBUS": return CrcStandard.CRC8_SMBUS; // build and return the CRC Standard for 'CRC-8/SMBUS'
                case "CRC-8/AES": return CrcStandard.CRC8_AES; // build and return the CRC Standard for 'CRC-8/AES'
                case "CRC-8/EBU": return CrcStandard.CRC8_EBU; // build and return the CRC Standard for 'CRC-8/EBU'
                case "CRC-8/TECH-3250": return CrcStandard.CRC8_TECH3250; // build and return the CRC Standard for 'CRC-8/TECH-3250'
                case "CRC-8/WCDMA": return CrcStandard.CRC8_WCDMA; // build and return the CRC Standard for 'CRC-8/WCDMA'

                // --------------------------------
                // 10-bit CRC standards
                // --------------------------------
                case "CRC-10": return CrcStandard.CRC10; // build and return the CRC Standard for 'CRC-10'
                case "CRC-10/I-610": return CrcStandard.CRC10_I610; // build and return the CRC Standard for 'CRC-10/I-610'
                case "CRC-10/ATM": return CrcStandard.CRC10_ATM; // build and return the CRC Standard for 'CRC-10/ATM'
                case "CRC-10/CDMA2000": return CrcStandard.CRC10_CDMA2000; // build and return the CRC Standard for 'CRC-10/CDMA2000'
                case "CRC-10/GSM": return CrcStandard.CRC10_GSM; // build and return the CRC Standard for 'CRC-10/GSM'

                // --------------------------------
                // 11-bit CRC standards
                // --------------------------------
                case "CRC-11": return CrcStandard.CRC11; // build and return the CRC Standard for 'CRC-11'
                case "CRC-11/FLEXRAY": return CrcStandard.CRC11_FLEXRAY; // build and return the CRC Standard for 'CRC-11/FLEXRAY'
                case "CRC-11/UMTS": return CrcStandard.CRC11_UMTS; // build and return the CRC Standard for 'CRC-11/UMTS'

                // --------------------------------
                // 12-bit CRC standards
                // --------------------------------
                case "CRC-12/CDMA2000": return CrcStandard.CRC12_CDMA2000; // build and return the CRC Standard for 'CRC-12/CDMA2000'
                case "X-CRC-12": return CrcStandard.XCRC12; // build and return the CRC Standard for 'X-CRC-12'
                case "CRC-12/DECT": return CrcStandard.CRC12_DECT; // build and return the CRC Standard for 'CRC-12/DECT'
                case "CRC-12/GSM": return CrcStandard.CRC12_GSM; // build and return the CRC Standard for 'CRC-12/GSM'
                case "CRC-12/3GPP": return CrcStandard.CRC12_3GPP; // build and return the CRC Standard for 'CRC-12/3GPP'
                case "CRC-12/UMTS": return CrcStandard.CRC12_UMTS; // build and return the CRC Standard for 'CRC-12/UMTS'

                // --------------------------------
                // 13-bit CRC standards
                // --------------------------------
                case "CRC-13/BBC": return CrcStandard.CRC13_BBC; // build and return the CRC Standard for 'CRC-13/BBC'

                // --------------------------------
                // 14-bit CRC standards
                // --------------------------------
                case "CRC-14/DARC": return CrcStandard.CRC14_DARC; // build and return the CRC Standard for 'CRC-14/DARC'
                case "CRC-14/GSM": return CrcStandard.CRC14_GSM; // build and return the CRC Standard for 'CRC-14/GSM'

                // --------------------------------
                // 15-bit CRC standards
                // --------------------------------
                case "CRC-15": return CrcStandard.CRC15; // build and return the CRC Standard for 'CRC-15'
                case "CRC-15/CAN": return CrcStandard.CRC15_CAN; // build and return the CRC Standard for 'CRC-15/CAN'
                case "CRC-15/MPT1327": return CrcStandard.CRC15_MPT1327; // build and return the CRC Standard for 'CRC-15/MPT1327'

                // --------------------------------
                // 16-bit CRC standards
                // --------------------------------
                case "ARC": return CrcStandard.ARC; // build and return the CRC Standard for 'ARC'
                case "CRC-16": return CrcStandard.CRC16; // build and return the CRC Standard for 'CRC-16'
                case "CRC-16/LHA": return CrcStandard.CRC16_LHA; // build and return the CRC Standard for 'CRC-16/LHA'
                case "CRC-IBM": return CrcStandard.CRCIBM; // build and return the CRC Standard for 'CRC-IBM'
                case "CRC-16/ARC": return CrcStandard.CRC16_ARC; // build and return the CRC Standard for 'CRC-16/ARC'
                case "CRC-16/CDMA2000": return CrcStandard.CRC16_CDMA2000; // build and return the CRC Standard for 'CRC-16/CDMA2000'
                case "CRC-16/CMS": return CrcStandard.CRC16_CMS; // build and return the CRC Standard for 'CRC-16/CMS'
                case "CRC-16/DDS-110": return CrcStandard.CRC16_DDS110; // build and return the CRC Standard for 'CRC-16/DDS-110'
                case "R-CRC-16": return CrcStandard.RCRC16; // build and return the CRC Standard for 'R-CRC-16'
                case "CRC-16/DECT-R": return CrcStandard.CRC16_DECTR; // build and return the CRC Standard for 'CRC-16/DECT-R'
                case "X-CRC-16": return CrcStandard.XCRC16; // build and return the CRC Standard for 'X-CRC-16'
                case "CRC-16/DECT-X": return CrcStandard.CRC16_DECTX; // build and return the CRC Standard for 'CRC-16/DECT-X'
                case "CRC-16/DNP": return CrcStandard.CRC16_DNP; // build and return the CRC Standard for 'CRC-16/DNP'
                case "CRC-16/EN-13757": return CrcStandard.CRC16_EN13757; // build and return the CRC Standard for 'CRC-16/EN-13757'
                case "CRC-16/DARC": return CrcStandard.CRC16_DARC; // build and return the CRC Standard for 'CRC-16/DARC'
                case "CRC-16/EPC": return CrcStandard.CRC16_EPC; // build and return the CRC Standard for 'CRC-16/EPC'
                case "CRC-16/EPC-C1G2": return CrcStandard.CRC16_EPCC1G2; // build and return the CRC Standard for 'CRC-16/EPC-C1G2'
                case "CRC-16/I-CODE": return CrcStandard.CRC16_ICODE; // build and return the CRC Standard for 'CRC-16/I-CODE'
                case "CRC-16/GENIBUS": return CrcStandard.CRC16_GENIBUS; // build and return the CRC Standard for 'CRC-16/GENIBUS'
                case "CRC-16/GSM": return CrcStandard.CRC16_GSM; // build and return the CRC Standard for 'CRC-16/GSM'
                case "CRC-16/AUTOSAR": return CrcStandard.CRC16_AUTOSAR; // build and return the CRC Standard for 'CRC-16/AUTOSAR'
                case "CRC-16/CCITT-FALSE": return CrcStandard.CRC16_CCITTFALSE; // build and return the CRC Standard for 'CRC-16/CCITT-FALSE'
                case "CRC-16/IBM-3740": return CrcStandard.CRC16_IBM3740; // build and return the CRC Standard for 'CRC-16/IBM-3740'
                case "CRC-16/ISO-HDLC": return CrcStandard.CRC16_ISOHDLC; // build and return the CRC Standard for 'CRC-16/ISO-HDLC'
                case "CRC-16/ISO-IEC-14443-3-B": return CrcStandard.CRC16_ISOIEC144433B; // build and return the CRC Standard for 'CRC-16/ISO-IEC-14443-3-B'
                case "CRC-16/X-25": return CrcStandard.CRC16_X25; // build and return the CRC Standard for 'CRC-16/X-25'
                case "CRC-B": return CrcStandard.CRCB; // build and return the CRC Standard for 'CRC-B'
                case "X-25": return CrcStandard.X25; // build and return the CRC Standard for 'X-25'
                case "CRC-16/IBM-SDLC": return CrcStandard.CRC16_IBMSDLC; // build and return the CRC Standard for 'CRC-16/IBM-SDLC'
                case "CRC-A": return CrcStandard.CRCA; // build and return the CRC Standard for 'CRC-A'
                case "CRC-16/ISO-IEC-14443-3-A": return CrcStandard.CRC16_ISOIEC144433A; // build and return the CRC Standard for 'CRC-16/ISO-IEC-14443-3-A'
                case "CRC-16/CCITT": return CrcStandard.CRC16_CCITT; // build and return the CRC Standard for 'CRC-16/CCITT'
                case "CRC-16/CCITT-TRUE": return CrcStandard.CRC16_CCITTTRUE; // build and return the CRC Standard for 'CRC-16/CCITT-TRUE'
                case "CRC-16/V-41-LSB": return CrcStandard.CRC16_V41LSB; // build and return the CRC Standard for 'CRC-16/V-41-LSB'
                case "CRC-CCITT": return CrcStandard.CRCCCITT; // build and return the CRC Standard for 'CRC-CCITT'
                case "KERMIT": return CrcStandard.KERMIT; // build and return the CRC Standard for 'KERMIT'
                case "CRC-16/KERMIT": return CrcStandard.CRC16_KERMIT; // build and return the CRC Standard for 'CRC-16/KERMIT'
                case "CRC-16/LJ1200": return CrcStandard.CRC16_LJ1200; // build and return the CRC Standard for 'CRC-16/LJ1200'
                case "CRC-16/M17": return CrcStandard.CRC16_M17; // build and return the CRC Standard for 'CRC-16/M17'
                case "CRC-16/MAXIM": return CrcStandard.CRC16_MAXIM; // build and return the CRC Standard for 'CRC-16/MAXIM'
                case "CRC-16/MAXIM-DOW": return CrcStandard.CRC16_MAXIMDOW; // build and return the CRC Standard for 'CRC-16/MAXIM-DOW'
                case "CRC-16/MCRF4XX": return CrcStandard.CRC16_MCRF4XX; // build and return the CRC Standard for 'CRC-16/MCRF4XX'
                case "MODBUS": return CrcStandard.MODBUS; // build and return the CRC Standard for 'MODBUS'
                case "CRC-16/MODBUS": return CrcStandard.CRC16_MODBUS; // build and return the CRC Standard for 'CRC-16/MODBUS'
                case "CRC-16/NRSC-5": return CrcStandard.CRC16_NRSC5; // build and return the CRC Standard for 'CRC-16/NRSC-5'
                case "CRC-16/OPENSAFETY-A": return CrcStandard.CRC16_OPENSAFETYA; // build and return the CRC Standard for 'CRC-16/OPENSAFETY-A'
                case "CRC-16/OPENSAFETY-B": return CrcStandard.CRC16_OPENSAFETYB; // build and return the CRC Standard for 'CRC-16/OPENSAFETY-B'
                case "CRC-16/IEC-61158-2": return CrcStandard.CRC16_IEC611582; // build and return the CRC Standard for 'CRC-16/IEC-61158-2'
                case "CRC-16/PROFIBUS": return CrcStandard.CRC16_PROFIBUS; // build and return the CRC Standard for 'CRC-16/PROFIBUS'
                case "CRC-16/RIELLO": return CrcStandard.CRC16_RIELLO; // build and return the CRC Standard for 'CRC-16/RIELLO'
                case "CRC-16/AUG-CCITT": return CrcStandard.CRC16_AUGCCITT; // build and return the CRC Standard for 'CRC-16/AUG-CCITT'
                case "CRC-16/SPI-FUJITSU": return CrcStandard.CRC16_SPIFUJITSU; // build and return the CRC Standard for 'CRC-16/SPI-FUJITSU'
                case "CRC-16/T10-DIF": return CrcStandard.CRC16_T10DIF; // build and return the CRC Standard for 'CRC-16/T10-DIF'
                case "CRC-16/TELEDISK": return CrcStandard.CRC16_TELEDISK; // build and return the CRC Standard for 'CRC-16/TELEDISK'
                case "CRC-16/TMS37157": return CrcStandard.CRC16_TMS37157; // build and return the CRC Standard for 'CRC-16/TMS37157'
                case "CRC-16/BUYPASS": return CrcStandard.CRC16_BUYPASS; // build and return the CRC Standard for 'CRC-16/BUYPASS'
                case "CRC-16/VERIFONE": return CrcStandard.CRC16_VERIFONE; // build and return the CRC Standard for 'CRC-16/VERIFONE'
                case "CRC-16/UMTS": return CrcStandard.CRC16_UMTS; // build and return the CRC Standard for 'CRC-16/UMTS'
                case "CRC-16/USB": return CrcStandard.CRC16_USB; // build and return the CRC Standard for 'CRC-16/USB'
                case "CRC-16/ACORN": return CrcStandard.CRC16_ACORN; // build and return the CRC Standard for 'CRC-16/ACORN'
                case "CRC-16/LTE": return CrcStandard.CRC16_LTE; // build and return the CRC Standard for 'CRC-16/LTE'
                case "CRC-16/V-41-MSB": return CrcStandard.CRC16_V41MSB; // build and return the CRC Standard for 'CRC-16/V-41-MSB'
                case "XMODEM": return CrcStandard.XMODEM; // build and return the CRC Standard for 'XMODEM'
                case "ZMODEM": return CrcStandard.ZMODEM; // build and return the CRC Standard for 'ZMODEM'
                case "CRC-16/XMODEM": return CrcStandard.CRC16_XMODEM; // build and return the CRC Standard for 'CRC-16/XMODEM'

                // --------------------------------
                // 17-bit CRC standards
                // --------------------------------
                case "CRC-17/CAN-FD": return CrcStandard.CRC17_CANFD; // build and return the CRC Standard for 'CRC-17/CAN-FD'

                // --------------------------------
                // 21-bit CRC standards
                // --------------------------------
                case "CRC-21/CAN-FD": return CrcStandard.CRC21_CANFD; // build and return the CRC Standard for 'CRC-21/CAN-FD'

                // --------------------------------
                // 24-bit CRC standards
                // --------------------------------
                case "CRC-24/BLE": return CrcStandard.CRC24_BLE; // build and return the CRC Standard for 'CRC-24/BLE'
                case "CRC-24/FLEXRAY-A": return CrcStandard.CRC24_FLEXRAYA; // build and return the CRC Standard for 'CRC-24/FLEXRAY-A'
                case "CRC-24/FLEXRAY-B": return CrcStandard.CRC24_FLEXRAYB; // build and return the CRC Standard for 'CRC-24/FLEXRAY-B'
                case "CRC-24/INTERLAKEN": return CrcStandard.CRC24_INTERLAKEN; // build and return the CRC Standard for 'CRC-24/INTERLAKEN'
                case "CRC-24/LTE-A": return CrcStandard.CRC24_LTEA; // build and return the CRC Standard for 'CRC-24/LTE-A'
                case "CRC-24/LTE-B": return CrcStandard.CRC24_LTEB; // build and return the CRC Standard for 'CRC-24/LTE-B'
                case "CRC-24": return CrcStandard.CRC24; // build and return the CRC Standard for 'CRC-24'
                case "CRC-24/OPENPGP": return CrcStandard.CRC24_OPENPGP; // build and return the CRC Standard for 'CRC-24/OPENPGP'
                case "CRC-24/OS-9": return CrcStandard.CRC24_OS9; // build and return the CRC Standard for 'CRC-24/OS-9'

                // --------------------------------
                // 30-bit CRC standards
                // --------------------------------
                case "CRC-30/CDMA": return CrcStandard.CRC30_CDMA; // build and return the CRC Standard for 'CRC-30/CDMA'

                // --------------------------------
                // 31-bit CRC standards
                // --------------------------------
                case "CRC-31/PHILIPS": return CrcStandard.CRC31_PHILIPS; // build and return the CRC Standard for 'CRC-31/PHILIPS'

                // --------------------------------
                // 32-bit CRC standards
                // --------------------------------
                case "CRC-32Q": return CrcStandard.CRC32Q; // build and return the CRC Standard for 'CRC-32Q'
                case "CRC-32/AIXM": return CrcStandard.CRC32_AIXM; // build and return the CRC Standard for 'CRC-32/AIXM'
                case "CRC-32/AUTOSAR": return CrcStandard.CRC32_AUTOSAR; // build and return the CRC Standard for 'CRC-32/AUTOSAR'
                case "CRC-32D": return CrcStandard.CRC32D; // build and return the CRC Standard for 'CRC-32D'
                case "CRC-32/BASE91-D": return CrcStandard.CRC32_BASE91D; // build and return the CRC Standard for 'CRC-32/BASE91-D'
                case "CRC-32/AAL5": return CrcStandard.CRC32_AAL5; // build and return the CRC Standard for 'CRC-32/AAL5'
                case "CRC-32/DECT-B": return CrcStandard.CRC32_DECTB; // build and return the CRC Standard for 'CRC-32/DECT-B'
                case "B-CRC-32": return CrcStandard.BCRC32; // build and return the CRC Standard for 'B-CRC-32'
                case "CRC-32/BZIP2": return CrcStandard.CRC32_BZIP2; // build and return the CRC Standard for 'CRC-32/BZIP2'
                case "CRC-32/CD-ROM-EDC": return CrcStandard.CRC32_CDROMEDC; // build and return the CRC Standard for 'CRC-32/CD-ROM-EDC'
                case "CKSUM": return CrcStandard.CKSUM; // build and return the CRC Standard for 'CKSUM'
                case "CRC-32/POSIX": return CrcStandard.CRC32_POSIX; // build and return the CRC Standard for 'CRC-32/POSIX'
                case "CRC-32/CKSUM": return CrcStandard.CRC32_CKSUM; // build and return the CRC Standard for 'CRC-32/CKSUM'
                case "CRC-32/BASE91-C": return CrcStandard.CRC32_BASE91C; // build and return the CRC Standard for 'CRC-32/BASE91-C'
                case "CRC-32/CASTAGNOLI": return CrcStandard.CRC32_CASTAGNOLI; // build and return the CRC Standard for 'CRC-32/CASTAGNOLI'
                case "CRC-32/INTERLAKEN": return CrcStandard.CRC32_INTERLAKEN; // build and return the CRC Standard for 'CRC-32/INTERLAKEN'
                case "CRC-32C": return CrcStandard.CRC32C; // build and return the CRC Standard for 'CRC-32C'
                case "CRC-32/ISCSI": return CrcStandard.CRC32_ISCSI; // build and return the CRC Standard for 'CRC-32/ISCSI'
                case "CRC-32": return CrcStandard.CRC32; // build and return the CRC Standard for 'CRC-32'
                case "CRC-32/ADCCP": return CrcStandard.CRC32_ADCCP; // build and return the CRC Standard for 'CRC-32/ADCCP'
                case "CRC-32/V-42": return CrcStandard.CRC32_V42; // build and return the CRC Standard for 'CRC-32/V-42'
                case "CRC-32/XZ": return CrcStandard.CRC32_XZ; // build and return the CRC Standard for 'CRC-32/XZ'
                case "PKZIP": return CrcStandard.PKZIP; // build and return the CRC Standard for 'PKZIP'
                case "CRC-32/ISO-HDLC": return CrcStandard.CRC32_ISOHDLC; // build and return the CRC Standard for 'CRC-32/ISO-HDLC'
                case "JAMCRC": return CrcStandard.JAMCRC; // build and return the CRC Standard for 'JAMCRC'
                case "CRC-32/JAMCRC": return CrcStandard.CRC32_JAMCRC; // build and return the CRC Standard for 'CRC-32/JAMCRC'
                case "CRC-32/MEF": return CrcStandard.CRC32_MEF; // build and return the CRC Standard for 'CRC-32/MEF'
                case "CRC-32/MPEG-2": return CrcStandard.CRC32_MPEG2; // build and return the CRC Standard for 'CRC-32/MPEG-2'
                case "XFER": return CrcStandard.XFER; // build and return the CRC Standard for 'XFER'
                case "CRC-32/XFER": return CrcStandard.CRC32_XFER; // build and return the CRC Standard for 'CRC-32/XFER'

                // --------------------------------
                // 40-bit CRC standards
                // --------------------------------
                case "CRC-40/GSM": return CrcStandard.CRC40_GSM; // build and return the CRC Standard for 'CRC-40/GSM'

                // --------------------------------
                // 64-bit CRC standards
                // --------------------------------
                case "CRC-64": return CrcStandard.CRC64; // build and return the CRC Standard for 'CRC-64'
                case "CRC-64/ECMA-182": return CrcStandard.CRC64_ECMA182; // build and return the CRC Standard for 'CRC-64/ECMA-182'
                case "CRC-64/GO-ISO": return CrcStandard.CRC64_GOISO; // build and return the CRC Standard for 'CRC-64/GO-ISO'
                case "CRC-64/JONES": return CrcStandard.CRC64_JONES; // build and return the CRC Standard for 'CRC-64/JONES'
                case "CRC-64/MS": return CrcStandard.CRC64_MS; // build and return the CRC Standard for 'CRC-64/MS'
                case "CRC-64/WE": return CrcStandard.CRC64_WE; // build and return the CRC Standard for 'CRC-64/WE'
                case "CRC-64/GO-ECMA": return CrcStandard.CRC64_GOECMA; // build and return the CRC Standard for 'CRC-64/GO-ECMA'
                case "CRC-64/XZ": return CrcStandard.CRC64_XZ; // build and return the CRC Standard for 'CRC-64/XZ'
			}
					
			throw new ArgumentException(ResourceStrings.CrcSpecificationNotFound_Unknown);
		}

        #endregion Methods
	}
}
