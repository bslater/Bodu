// ---------------------------------------------------------------------------------------------------------------
// <copyright file="JSHashTests.cs" company="PlaceholderCompany">
//     Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>
// ---------------------------------------------------------------------------------------------------------------

using Bodu.Infrastructure;
using System.Text;

namespace Bodu.Security.Cryptography
{
	/// <summary>
	/// Contains unit tests for the <see cref="Tiger" /> hash algorithm.
	/// </summary>
	[TestClass]
	public partial class TigerTests
		: Security.Cryptography.HashAlgorithmTests<TigerTests, Tiger, TigerTests.TigerVariant>
	{
		public enum TigerVariant
		{
			Tiger_192,
			Tiger_160,
			Tiger_128,
			Tiger2_192,
			Tiger2_160,
			Tiger2_128,
		}

		public override IEnumerable<TigerTests.TigerVariant> GetHashAlgorithmVariants() => new[]
		{
			TigerVariant.Tiger_192,
			TigerVariant.Tiger_160,
			TigerVariant.Tiger_128,
			TigerVariant.Tiger2_192,
			TigerVariant.Tiger2_160,
			TigerVariant.Tiger2_128,
		};

		protected override IEnumerable<string> GetFieldsToExcludeFromDisposeValidation()
		{
			var list = new List<string>(base.GetFieldsToExcludeFromDisposeValidation());
			list.AddRange([
				"BlockSizeBytes"
			]);

			return list;
		}

		/// <inheritdoc />
		protected override Tiger CreateAlgorithm() => new Tiger();

		protected override Tiger CreateAlgorithm(TigerTests.TigerVariant variant) =>
			variant switch
			{
				TigerVariant.Tiger_192 => new Tiger(),
				TigerVariant.Tiger_160 => new Tiger
				{
					HashSize = 160
				},
				TigerVariant.Tiger_128 => new Tiger
				{
					HashSize = 128
				},
				TigerVariant.Tiger2_192 => new Tiger
				{
					Variant = Bodu.Security.Cryptography.TigerHashingVariant.Tiger2
				},
				TigerVariant.Tiger2_160 => new Tiger
				{
					HashSize = 160,
					Variant = Bodu.Security.Cryptography.TigerHashingVariant.Tiger2
				},
				TigerVariant.Tiger2_128 => new Tiger
				{
					HashSize = 128,
					Variant = Bodu.Security.Cryptography.TigerHashingVariant.Tiger2
				},
				_ => throw new ArgumentOutOfRangeException(nameof(variant), variant, null)
			};

		private static readonly IReadOnlyDictionary<string, byte[]> CustomInputs = new Dictionary<string, byte[]>
		{
			["Tiger"] = Encoding.UTF8.GetBytes("Tiger")
		};

		protected override IEnumerable<KnownAnswerTest> GetTestVectors(TigerTests.TigerVariant variant)
		{
			foreach (var vector in base.GetTestVectors(variant))
				yield return vector;

			var expected = GetExpectedHashesForNamedInputs(variant);
			foreach (var (name, input) in CustomInputs)
			{
				if (expected.TryGetValue(name, out var hex))
				{
					yield return new KnownAnswerTest
					{
						Name = name,
						Input = input,
						ExpectedOutput = Convert.FromHexString(hex)
					};
				}
			}
		}

		protected override IReadOnlyList<string> GetExpectedHashesForIncrementalInput(TigerTests.TigerVariant variant)
		{
			var (isTiger2, hashBits) = GetTigerHashBits(variant);

			var fullHashes = isTiger2
				? new[]
				{
					"4441BE75F6018773C206C22745374B924AA8313FEF919F41",
					"860F73A57072EFACBBEA35F7DB67D97AA829C53463805093",
					"FEF05EE7A34522E5D942D172E88CF1BE6733D9B51602C60E",
					"63A98123AEC6638FE54DAAC7D3B556BB3EA89C3161B8442C",
					"FB74560B78925C828144FB81B3E3D606C93266FC50348A11",
					"B3A2E70DE9AA8582AC5B1B9129072899C8129E62BFD20FB0",
					"A423E667BDBB82418E5EEB2E09F642C648A0C4F7876FBE4A",
					"8AB2E536F8AFFA33A02C179D69CA3945DF1708645BF598C6",
					"89D39680FDA7CD9E4AEF74E1DAABB439C61A210179D1E11B",
					"7BF7D50D476571CCCE71EA422FBBE19C5732B4B4F0218480",
					"54EC453EC5E0FD3D02BDA1F62ED5768AC2A6DCA773CDA4E1",
					"5D18F5465C03C04A227A30E8047096E387E1E2F49F8689B0",
					"5739942F95E90FAC91BD9C20FFB212F8D6857178B8629457",
					"FDD2E9977E006E9EFDD90E0B1C3148D11011490D5731F51A",
					"DB17D418A70D93F0E3AB066778A6E9FF6B0AEC0C0FCA732B",
					"D31F7BAC1783373D1663761380E000126CE062D29DA33DAD",
					"E2C8CAA79C623D67FE88ABAB5D75E1D6F0B162A5810CADD1",
					"E6D9E52386BE7C4FDF8CED788330EADA10EBD7B8DF63D74F",
					"851EA0E80DE6D8464DCE43BCB54BEC652CC6440062E50164",
					"84B18F2BD8709B09D28D9409198375985DE9659799DA0C9B",
					"07400FB79F880FDC130B77C697BE5531EEA5FC521015E350",
					"F07D605809BF6424EA422F430385315974BDB0F546124E03",
					"8E6DEE46C033BF9C066C3072BB77F31962E30FBD1B6D9906",
					"341B583590A6278AD0EEB26F024D20DF4306C7B5E3E4791E",
					"72CF22E8BB2068144AC98E697655373276C47E38DF3A2F19",
					"14C5CE59C8DF7A665BB40101FC14DBB21E1373A18FA00427",
					"555784C81E245996A5608AB20FC614F47A78B176F9BDC93B",
					"87B3B8C1E2ECD0FF4CD5CD9FC6B665309CD215F9BDC22361",
					"ECBE5F713AED003663207FC995E25BECDE3879548811F208",
					"11F1E981FED8EFA49F91F052374A69439037EE55CF27B2B9",
					"80D3778CC24468A845BA184EDC79947ECFD37790F8E0E679",
					"787A1E33A83839790D553EE73C877CA3A371866B616B6EF8",
					"9E04376CB4C48AAE1179A13D1B1B7C5C5E3C8699C4096BCA",
					"4701C1E0CB15AC6CABB7F08039D2567586DA3CCCEEC0B003",
					"5FA5C3E177AA2EA0E9E601F6D1FE50BA788910380D77796A",
					"A64800E3357BA972E66F85D19D684C95B1827B82BDB9C8CF",
					"A7AA868C726868B0838714FA2BF6A560ADB5F8C11D1582A6",
					"EEE83496AFF5ADCB7F3538D223E8B3B4BB5B097052CF0481",
					"690B6663CB1E19F272801A1A2250ED2D381983E816D1CEA6",
					"4868E429D1C529048442E9B23CB4E4172677BEFF6492EB4B",
					"BC10A971426831EF4F004DA3F09240D819C4F11A7032F5E9",
					"9796865C26FB65BA7FE0E2D744868BF26F8EC86FB707CDFB",
					"5A5A41FB4FCA0EF18E53257B261D0222C4BEABA248C71D02",
					"984E1670EBE09A9A1AEE3CD727EA3E8594E43E4AE38EAE99",
					"EC97A8461C7F1581F877FB0DD3EB405443C4E5BFEB7DE673",
					"1C8ED2FC7E214BCF8F9CA064B1DEBAA5552930DB73957B38",
					"5CE7109D6B3D6CE0CA50BD27099FA004C3A9CCAD27E9330D",
					"B8C5EA6760A1C651BB1240BCD0E15F46C7A1E75BFDF34AE5",
					"9AB70134B530A75EC977692679A462B3F0921821DD8DD49D",
					"273B2570A25EDBFC0DB586FA761856FEE187D978CF4FD4FE",
					"6F90507126A74A0D03839921E745813F5951CF4D515FC7FE",
					"0975E2F9838A8F3F1AD314AEC16243410002A73DA501DCC9",
					"718448A178509134C808616CB497D77A07A0181E63801959",
					"34EA51CD2AD992073D505F8337B5D076855C7835CD9B2E33",
					"8C4E3D194750D0E33F09E97453EB9741DE2401BFEFC42B64",
					"EF719D2D5CEE1B3E2F9F0DACF510955E04D2518570F040B9",
					"13456922151726148317D1B5EDB2B962DF0538B1EBFE4EEB",
					"992D52B04602A6D4AE1FC0EA9D7CD26863CF3A5D470DE112",
					"D39DCE52A145C12795F8E83A39B381093F0C9B90505CD28D",
					"E88E13E7BF228D157DFC5D6A0DB85975E10C8B64F83E81D8",
					"FA43E5E7DA6211245E71D9A747E64097625E54E3423146D9",
					"4AFC4D052B7A0F6B6EA88E2904C7C6E2210589124ABCB58B",
					"E976A40DD98F2E3CEBC342082B7142554156F338CB656EF3",
					"1475C93BE7D1AB73752AAA750520542082E1CA4CB5350092",
					"A49A150130A2D9FBAEEDD3C0D2F1170DFE0F5FE842B52828",
					"FAA63B98298EC10DFD5F873F62DE6ED1F2316ED8BA419C2B",
					"43BFE83A0D433D6B289465182CC6AACD1104CC5A2EC4C650",
					"9786A1524038BE2AC5CB9A2DC1C82362329832928B5FBB5A",
					"7077B3CD3CEAAF775E09AEAC2AE7351B77C6D37E5C4AF5CB",
					"EB2C1E64D78AC307FFD3DBDC6E1DE6FF6380BAA0147D65E7",
					"DEC0E1CD151DE382844D7A861E2BB5D68DD33C33509A76F9",
					"8C5873FC0DACAB1E35078069031EFB94F3E02155BDFC8F85",
					"B662A70C5843F44A8888C8B7608A420DCBD3DCFB2471CCD1",
					"04004F6AE3830F7BF22A111CC98600B60672A42554DE00C5",
					"AEC3D8E4DA2063DB0692276C16B2DC51B1D77C83437006EC",
					"0D5A811F200DFC67B700A17FB6451F4FF3157C144E0E1141",
					"F5C48EBD4CBF06BC125794C9A96F09A50903D828A6FFCCE8",
					"CDAD316C9525CE81BC118372E8FAA58390C5BC8D04E22B92",
					"6DD4B8CCBE14A41F72A605BC0506908397EAE3ACB937FDD0",
					"C334F5885E7B84CB453124564B0A4C14B39149009EE0E995",
					"C18ABB11F4CB63EBC79FFB17BDBCDEAC9987CCFEEF13AD63",
					"5AE19250EF20FE72C14B4466EC582662CC3D2B63F5277204",
					"957854273172C871583561F5250B9DAE205763E23AED255E",
					"44821E05C7BE96BA383AA4E7D16FD7CB246E6A53D511FAD3",
					"F80EA3AEF38924AAE3A6B72663BC6A1DE6AF69E45646AFAB",
					"310B66D0D148184D2C815272B49EB52EA72C17B0166724BC",
					"B0241C52269D2F0F1C3E9026EADE4F7E9F9DDE4540F6F24F",
					"1BF01DDE44DE3418FE902534BA4D0A75483522A6DE7E0A23",
					"2D4BC6A21A9EB4F82FCE3ABEE79073877D9AE31AE5A9708E",
					"E945E7E613F714ABDAD98649C7E7D285185C65EC092C7A4D",
					"505C0F0646183CCE37C6BF9648892B2F5AE87A23ED444964",
					"E76DF21A37AFE6839C59C8E5BFFFEC421F8AABF69CE13889",
					"B99037CC4752EE2D0DB2D61092CC38FA8FEB16BF401BCBE2",
					"6207ADE154AEA631D22DB915930F64F90306EC0AFB6CB6B6",
					"F9F4864E48581CD2CBC455EC56A3772726AF0A150E6CB622",
					"6CC0666A35361103200D15F0B505B858797C51752B80DB1D",
				}
				: new[]
				{
					"3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3",
					"5D9ED00A030E638BDB753A6A24FB900E5A63B8E73E6C25B6",
					"65B0E1EA36CA17EDE2F055E67EAD67B1C282A11A5BA3A8E0",
					"AB7FB8D21CE3D8D9BB5F1AF1F2FA0D3C277906160DB8D226",
					"FE2E9D43F74B199D91B9291D73CCFCA0BEA5F068FBA244FF",
					"3DF6D672FE9DAAB21523EB04705D8A8B72B78B00AD465D1C",
					"E05724353FE29957C3E8DEBAA21D0C2DD49CCA22191D5AD3",
					"4056DDBF82AE74AB56720DEAF079ACA2F076ED046D044DE5",
					"801FB9BE1A9AC7337A81345B3845E4E7C13AF1FBADB73723",
					"430156547A82492CA859385304748F65F2D4A7E2664AE2B1",
					"FC435137CD652D720A11EDF47ABE4680BA4AD5BD810C9835",
					"20A8143DF47F5715FA0905FE6F9D1D2B5B2D4E26FA98930B",
					"E4A2063019FBC034DEB01E2A95296042319CBC039DA69A91",
					"B5F0FA570C4CD69A3C68448BE42C865BDF77ED68B93875E7",
					"802BE6EA2CE86A0B371F2354944B19CB3231AF7FB4F00FF8",
					"D7C08863B5E5E3D69B5404A116315A698E128EBAF8636B70",
					"5C5288CB0E4E533056BA5293440D9BE6F3C461233BF1ED51",
					"88D3A94F3820E4087DA69D8BBE2CF415466063709C450C4D",
					"C07B4B155F9F75805D9D087087FCDD28D08A9D022192447E",
					"EE473E569FF3E092CF8996B31CE665EA7D61520D42E27395",
					"E13DAE8098139CFCEA755D2060F107E3C7581EDF9F4B3B85",
					"B48A9C09F26B379AA28FBC750B50CEF69D0D0EE37FF765F7",
					"574A01456373014F4179CDA14541E2E3C5A1CDDA9F9D071C",
					"F2E2831E5BB4AF05914C4BA61BB8D600D1EF071C5DF02269",
					"B7808A5B6258CBE718EDA938978C69D3FFC45A222E9DBF4C",
					"D8E4E076DDE78950D51EAC9F97D2D1916A0910465D45A55C",
					"4EDECFAAE1DE98B7E056E64CA24003422BBE6F048129B24C",
					"0DE283B5A4953EAAEC6F3FDE50D7875C8EE57FA79BDC70FC",
					"ECDD4BA1936DB9E6F83E2BD7F39D23927A1A17B2D52A8649",
					"BE11893460E49659F7DF3FB3BD5E3E9A319F85FD3496E26C",
					"AEC0DA0F2CC0646325CC03319A0E080F68B46B33F81920D6",
					"8824FD39984F6A52FFFF19016E27C594921452086373F2EE",
					"8B6592AFBB02E227AA451B5CFDC821B84245D34B96BF4F13",
					"960DF9C349EC6619FF37E3F0F4832E19CC6A4E4D68962651",
					"F4E2B7AA72BC7D6E0CF6DA1094BEEFAA9C55610327C62900",
					"05FD1B80CA4C7C14FE5BF0ACBD0EA3DAE498DC391DCF2277",
					"C5E95F953898C68355B591507BB714F0E5DAB9989D083900",
					"B2D4E286CF7EA8AB6ECD650C9E48CA23497EADE55485DB1E",
					"9D51657E11C54FFDF205DBB435097A2BC6F93C4BE8D6180B",
					"3C6AE3911356A343AE3113735F07FCFB5E046ACD47B00FBB",
					"664342CDECC825ED340A7FFE2E57107DD0B5F24C24B2C3F0",
					"4EF7FCA13CE684D81DE4F566D2897CEB407FBB3DDE81FD64",
					"54689FECED63F297B13CD494B85E686680F4F78DE7EC81D5",
					"AF434BDBDC7EF90BE03E40A033F16E8A57B41840E1E8AB59",
					"A32DB678F44905C18968F5D898CA7992EBE2E4CC3318B96C",
					"DEE9D519A12ACFB8A0935A368D6E6C75EEEEE6F2B0D5D191",
					"CBC74863472D1C9D23C526F4908BD4D4234E00CBCC99A9E9",
					"6C228A1D4871E802E035C9BB16C5187354841FB6BE3C69B6",
					"CAA755C55AA869E633CB3C6D93A561944AC7418154E2B0F0",
					"A6835F7C0C6CA8F4A45787BAFA77478AE9ADDBEFBC3052D3",
					"E406755957EC21BA6A64B5D3AAF31749CF98DF92F1B1FFE0",
					"0C2D4A44A803DBA99B7A467553C9293B46A538558BD77DD4",
					"F04F011B09D275A185528CC040EB719649C8471A87B259B3",
					"3DA8B57FF52FCAE7C32636EC6C80708189CED8113C5CDE1E",
					"6C6C88B8E18DF5CB22EDB61A2D3ED74741A708BC46576FB7",
					"2D48EE2BF85DE234754BECF3C6F5B0E62988B5BF24AEA5BB",
					"0D17702DDCA078ED1CC51B95DF29EA1053CE97F69395C613",
					"9D8C2AD327DE43D5782D5F20881F4A8C433BA19AFC8C15AD",
					"227BA419B760D9D10DBB09585EDD475AC2734FD4539F8275",
					"2F5220A828EF94E327BD51D4DF5C58609F8A93B9FE01FFF6",
					"0EED9F91E1A33A50B8E913DBA0B5E248D263E1FC72C6A449",
					"766B707E999FF3C51EE01168513BA0DCEFEAB222DD1F69F6",
					"85E6710694E7C36A2340DA6A371C0560450F3D44D35AD98C",
					"D401F9B13D39C24477C0AE6971C705C63C067F29508C29C9",
					"212DF89C57155270344ACCB19027B0B26B104FA0FBBE0FE4",
					"3BEDE767AA4A7507DBEFF83D1BC33F67EBA9C64945066227",
					"79FED1FB9F17C4980108E8605C10D9E176AC8FE4F6A65064",
					"48D9B7622AB7F8968ED926255F78E8CE461E4C9162FFE8B7",
					"6638C83837297B3F53B0F824C087D9A0B8D9FC6265683B8F",
					"174421CF6D331FF51924F8946E8244555C9020D38E31B6DB",
					"03E42AFB5FFF9B9C3794A3DBEC99FA7E3F7305EF07BD29EF",
					"CCAFC68D4B3ED889DC9F28CB9225808A40AA8E0D5CA343FF",
					"E824F93B4022011886EFC54539D4D5D51863ADA329FB4E22",
					"7CF0DC01B326687530F42040BA0D0CE93174455E8A990D14",
					"7A8E619479F4F5C418EC041806850E6723CA56AFBC3D32CC",
					"083C5CA90F4B296C42040559C8296149D4EEBAB5EF2CB82D",
					"3581B7AC32FA8A0986FD14F277FB106E112B92D18CD689BD",
					"258E822D9CC1ECA8B55D925BA361BA2D9FC27AF181F138B4",
					"A86C1E88A64515FA281A462D467458231494F16E835DF873",
					"76E7F06FE9B8B388DB012F8B4BE2FB343F95913EDDE47A27",
					"00278B4E5690E729EC7118B5BF63C9D1EB1268960893CA75",
					"8DE70E64A31BA1AF4F5C23CF774CCA32FE952D76C3FDD1B7",
					"BBEA72C840749BABAF1415FEAC343411B89515B87848A09A",
					"C6C3CCAC1B338DF117A61ECF9A280E9BA709784C72B76771",
					"AE9813EF4429EAE73EA9FDB5E23D263AF1BB87928CF5F048",
					"68647CD7BFFB8E530D28C86685A8D2F657EE4CD64EDD7E66",
					"AA8C35B0E746AF56435F6C711AD0423966EA459087409713",
					"AAD5C0D5E980B29BC88985C544717B81F58CDB923A3468E0",
					"F60929D14781DE44EA607AAFC0D25FA1B6EF3C6AA0F8B3D7",
					"C48087DC75EC43A54A593F24E1B359BB75C581A65C3170D0",
					"11D1372FBDFD9FF514611AB20D31BA62F18856C8D6AE3AD7",
					"F2A8076B9017EDADEED41F409C9E32EB3BC090EAE89F855D",
					"702FA47E5BD35E344B5B87C0082106337206CADD3D4D5014",
					"B9E03FED752A560C3B0365EDF5BFC4DC7EAC5E4BBB93738D",
					"3C84C52BF51077A5819F56E5A5C1C06209181579393220C7",
					"F8ECCA28A525594E138B55C06617A063DF74FE3469D98381",
				};

			return fullHashes.Select(hash => TruncateHex(hash, hashBits)).ToList();
		}

		private static string TruncateHex(string fullHex, int bits)
		{
			int hexLength = bits / 4; // 4 bits per hex digit
			return fullHex[..hexLength];
		}

		private static (bool IsTiger2, int HashSizeBits) GetTigerHashBits(TigerTests.TigerVariant variant)
		{
			string name = variant.ToString(); // e.g., "Tiger2_160"
			bool isTiger2 = name.StartsWith("Tiger2", StringComparison.OrdinalIgnoreCase);
			int hashBits = int.Parse(name[^3..]); // get the last 3 characters (128, 160, or 192)
			return (isTiger2, hashBits);
		}

		protected override IReadOnlyDictionary<string, string> GetExpectedHashesForNamedInputs(TigerTests.TigerVariant variant)
		{
			var (isTiger2, hashBits) = GetTigerHashBits(variant);

			IReadOnlyDictionary<string, string> fullHashes = isTiger2
				? new Dictionary<string, string>
				{
					["Empty"] = "4441BE75F6018773C206C22745374B924AA8313FEF919F41",
					["ABC"] = "19BE3CEA22303641698DA70687ABFA23A2357C3F4A67E51F",
					["Zeros_16"] = "2134110B93B62F7507576D8677C46222BCA4445F9DFDC31C",
					["QuickBrownFox"] = "976ABFF8062A2E9DCEA3A1ACE966ED9C19CB85558B4976D8",
					["Sequential_0_255"] = "7A20E7E8D65EE077E92429B9757DD0C5E41E1C3A4F5F20F7",
					["Tiger"] = "FE40798B8EB937FD977608930548D6A894C20B04CBEF7A42",
				}
				: new Dictionary<string, string>
				{
					["Empty"] = "3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3",
					["ABC"] = "C7188DAEE93509ECCE198DE5A43C8DB47210DB7E8D8BB8DD",
					["Zeros_16"] = "464B87921CCDAEDBC0D6941610D1EB19E536036096403F32",
					["QuickBrownFox"] = "6D12A41E72E644F017B6F0E2F7B44C6285F06DD5D2C5B075",
					["Sequential_0_255"] = "90908AF825C3CA8474CD9D8C4201E1A12E97630FF7D6E354",
					["Tiger"] = "DD00230799F5009FEC6DEBC838BB6A27DF2B9D6F110C7937",
				};

			return fullHashes.ToDictionary(
				kvp => kvp.Key,
				kvp => TruncateHex(kvp.Value, hashBits),
				StringComparer.OrdinalIgnoreCase
			);
		}
	}
}