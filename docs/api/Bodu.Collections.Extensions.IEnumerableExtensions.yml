### YamlMime:ManagedReference
items:
- uid: Bodu.Collections.Extensions.IEnumerableExtensions
  commentId: T:Bodu.Collections.Extensions.IEnumerableExtensions
  id: IEnumerableExtensions
  parent: Bodu.Collections.Extensions
  children:
  - Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object})
  - Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object},System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl})
  - Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Object})
  - Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Object})
  - Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})
  langs:
  - csharp
  - vb
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions
  type: Class
  source:
    remote:
      path: Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: IEnumerableExtensions
    path: ../Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 10
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Extensions
  example: []
  syntax:
    content: public static class IEnumerableExtensions
    content.vb: Public Module IEnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})
  commentId: M:Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})
  id: RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})
  isExtensionMethod: true
  parent: Bodu.Collections.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect(IEnumerable, Func<object, IEnumerable>)
  nameWithType: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func<object, IEnumerable>)
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func<object, System.Collections.IEnumerable>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: ../Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 40
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Extensions
  summary: Recursively flattens a hierarchical or tree-like <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> into a single linear sequence.
  remarks: >-
    <p>This method is useful for navigating recursive structures like directory trees, category hierarchies, or comment threads.</p>

    <p>Execution is deferred and will only begin when the resulting sequence is enumerated.</p>

    <p>All elements are treated as <xref href="System.Object" data-throw-if-not-resolved="false"></xref> and may need casting to their actual types.</p>
  example:
  - >-
    <pre><code class="lang-csharp">class Category { public string Name; public List&lt;Category&gt; Children; }

    var root = new List&lt;Category&gt; { ... };

    var all = root.RecursiveSelect(c =&gt; c.Children).Cast&lt;Category&gt;();</code></pre>
  syntax:
    content: public static IEnumerable RecursiveSelect(this IEnumerable source, Func<object, IEnumerable> childSelector)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: >-
        The root sequence to traverse recursively. Each element is expected to potentially contain child elements retrievable via the

        <code class="paramref">childSelector</code> delegate.
    - id: childSelector
      type: System.Func{System.Object,System.Collections.IEnumerable}
      description: >-
        A delegate that returns the child elements for a given item. This should return an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> representing the

        recursive children of the current element, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if none.
    return:
      type: System.Collections.IEnumerable
      description: A flattened <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> that yields all elements in depth-first order, including their recursive children.
    content.vb: Public Shared Function RecursiveSelect(source As IEnumerable, childSelector As Func(Of Object, IEnumerable)) As IEnumerable
  overload: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">source</code> or <code class="paramref">childSelector</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable))
  fullName.vb: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func(Of Object, System.Collections.IEnumerable))
  name.vb: RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable))
- uid: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Object})
  commentId: M:Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Object})
  id: RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Object})
  isExtensionMethod: true
  parent: Bodu.Collections.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, object>)
  nameWithType: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, object>)
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func<object, System.Collections.Generic.IEnumerable<object>>, System.Func<object, object>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: ../Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 70
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Extensions
  summary: Recursively flattens and projects a hierarchical structure into a linear sequence using a projection selector.
  remarks: This overload is useful when you want to flatten and transform the hierarchy into a different shape or type.
  example:
  - <pre><code class="lang-csharp">var names = nodes.RecursiveSelect(n =&lt; n.Children, n =&gt; n.Name);</code></pre>
  syntax:
    content: public static IEnumerable RecursiveSelect(this IEnumerable source, Func<object, IEnumerable<object>> childSelector, Func<object, object> selector)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: The root sequence to traverse recursively.
    - id: childSelector
      type: System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}
      description: A delegate that returns child elements for a given item.
    - id: selector
      type: System.Func{System.Object,System.Object}
      description: A projection applied to each element.
    return:
      type: System.Collections.IEnumerable
      description: A depth-first, recursively flattened sequence of projected elements.
    content.vb: Public Shared Function RecursiveSelect(source As IEnumerable, childSelector As Func(Of Object, IEnumerable(Of Object)), selector As Func(Of Object, Object)) As IEnumerable
  overload: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, or <code class="paramref">selector</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Object))
  fullName.vb: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func(Of Object, System.Collections.Generic.IEnumerable(Of Object)), System.Func(Of Object, Object))
  name.vb: RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Object))
- uid: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Object})
  commentId: M:Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Object})
  id: RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Object})
  isExtensionMethod: true
  parent: Bodu.Collections.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, int, object>)
  nameWithType: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, int, object>)
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func<object, System.Collections.Generic.IEnumerable<object>>, System.Func<object, int, object>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: ../Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 104
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Extensions
  summary: Recursively flattens and projects a hierarchical structure, passing the index of each element to the projection.
  remarks: Use this when you need both element content and positional context during recursion.
  example:
  - '<pre><code class="lang-csharp">var labeled = nodes.RecursiveSelect(n =&gt; n.Children, (n, i) =&gt; $"{i}: {n.Name}");</code></pre>'
  syntax:
    content: public static IEnumerable RecursiveSelect(this IEnumerable source, Func<object, IEnumerable<object>> childSelector, Func<object, int, object> selector)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: The root sequence to traverse recursively.
    - id: childSelector
      type: System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}
      description: A delegate that returns child elements for a given item.
    - id: selector
      type: System.Func{System.Object,System.Int32,System.Object}
      description: A projection that receives each element and its zero-based index.
    return:
      type: System.Collections.IEnumerable
      description: A depth-first, recursively flattened sequence with projected values using the element and its index.
    content.vb: Public Shared Function RecursiveSelect(source As IEnumerable, childSelector As Func(Of Object, IEnumerable(Of Object)), selector As Func(Of Object, Integer, Object)) As IEnumerable
  overload: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, or <code class="paramref">selector</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Integer, Object))
  fullName.vb: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func(Of Object, System.Collections.Generic.IEnumerable(Of Object)), System.Func(Of Object, Integer, Object))
  name.vb: RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Integer, Object))
- uid: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object})
  commentId: M:Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object})
  id: RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object})
  isExtensionMethod: true
  parent: Bodu.Collections.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, int, int, object>)
  nameWithType: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, int, int, object>)
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func<object, System.Collections.Generic.IEnumerable<object>>, System.Func<object, int, int, object>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: ../Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 140
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Extensions
  summary: Recursively flattens and projects a hierarchical structure, providing index and depth information to the selector.
  remarks: Use when formatting output that depends on the depth of the node in the hierarchy (e.g., indentation, styling).
  example:
  - >-
    <pre><code class="lang-csharp">var result = nodes.RecursiveSelect(

    n =&gt; n.Children,

    (n, i, depth) =&gt; new { n.Name, Index = i, IndentLevel = depth });</code></pre>
  syntax:
    content: public static IEnumerable RecursiveSelect(this IEnumerable source, Func<object, IEnumerable<object>> childSelector, Func<object, int, int, object> selector)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: The root sequence to traverse recursively.
    - id: childSelector
      type: System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}
      description: A delegate that returns child elements for a given item.
    - id: selector
      type: System.Func{System.Object,System.Int32,System.Int32,System.Object}
      description: A projection that receives the element, its index, and its recursion depth.
    return:
      type: System.Collections.IEnumerable
      description: A flattened sequence of projected elements with access to structural context (index, depth).
    content.vb: Public Shared Function RecursiveSelect(source As IEnumerable, childSelector As Func(Of Object, IEnumerable(Of Object)), selector As Func(Of Object, Integer, Integer, Object)) As IEnumerable
  overload: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, or <code class="paramref">selector</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Integer, Integer, Object))
  fullName.vb: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func(Of Object, System.Collections.Generic.IEnumerable(Of Object)), System.Func(Of Object, Integer, Integer, Object))
  name.vb: RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Integer, Integer, Object))
- uid: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object},System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl})
  commentId: M:Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object},System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl})
  id: RecursiveSelect(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}},System.Func{System.Object,System.Int32,System.Int32,System.Object},System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl})
  isExtensionMethod: true
  parent: Bodu.Collections.Extensions.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, int, int, object>, Func<object, RecursiveSelectControl>)
  nameWithType: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func<object, IEnumerable<object>>, Func<object, int, int, object>, Func<object, RecursiveSelectControl>)
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func<object, System.Collections.Generic.IEnumerable<object>>, System.Func<object, int, int, object>, System.Func<object, Bodu.Collections.Extensions.RecursiveSelectControl>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: RecursiveSelect
    path: ../Bodu.Core/src/Collections.Extensions/IEnumerableExtensions.RecursiveSelect.cs
    startLine: 183
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Extensions
  summary: Recursively flattens and projects a hierarchical structure, allowing control over whether to recurse into children.
  remarks: Useful when pruning the recursion tree — e.g., limiting depth, skipping inactive branches, or filtering by condition.
  example:
  - >-
    <pre><code class="lang-csharp">var filtered = nodes.RecursiveSelect(

    n =&gt; n.Children,

    (n, i, d) =&gt; n.Name,

    n =&gt; n.Children?.Count() &gt; 2

    ? RecursiveSelectControl.Recurse

    : RecursiveSelectControl.YieldOnly);</code></pre>
  syntax:
    content: public static IEnumerable RecursiveSelect(this IEnumerable source, Func<object, IEnumerable<object>> childSelector, Func<object, int, int, object> selector, Func<object, RecursiveSelectControl> recursionControl)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: The root sequence to traverse recursively.
    - id: childSelector
      type: System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}
      description: A delegate that returns child elements for a given item.
    - id: selector
      type: System.Func{System.Object,System.Int32,System.Int32,System.Object}
      description: A projection that receives the element, its index, and its recursion depth.
    - id: recursionControl
      type: System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl}
      description: >-
        A delegate that determines how each element in the sequence should be handled during recursion. It returns a

        <xref href="Bodu.Collections.Extensions.RecursiveSelectControl" data-throw-if-not-resolved="false"></xref> value indicating whether to yield the element, recurse into its children, skip it, or

        terminate the traversal entirely.
    return:
      type: System.Collections.IEnumerable
      description: A sequence of projected elements, where children are included only if <code class="paramref">recursionControl</code> returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a>.
    content.vb: Public Shared Function RecursiveSelect(source As IEnumerable, childSelector As Func(Of Object, IEnumerable(Of Object)), selector As Func(Of Object, Integer, Integer, Object), recursionControl As Func(Of Object, RecursiveSelectControl)) As IEnumerable
  overload: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      Thrown if <code class="paramref">source</code>, <code class="paramref">childSelector</code>, <code class="paramref">selector</code>, or

      <code class="paramref">recursionControl</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: IEnumerableExtensions.RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Integer, Integer, Object), Func(Of Object, RecursiveSelectControl))
  fullName.vb: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect(System.Collections.IEnumerable, System.Func(Of Object, System.Collections.Generic.IEnumerable(Of Object)), System.Func(Of Object, Integer, Integer, Object), System.Func(Of Object, Bodu.Collections.Extensions.RecursiveSelectControl))
  name.vb: RecursiveSelect(IEnumerable, Func(Of Object, IEnumerable(Of Object)), Func(Of Object, Integer, Integer, Object), Func(Of Object, RecursiveSelectControl))
references:
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Bodu.Collections.Extensions
  commentId: N:Bodu.Collections.Extensions
  href: Bodu.html
  name: Bodu.Collections.Extensions
  nameWithType: Bodu.Collections.Extensions
  fullName: Bodu.Collections.Extensions
  spec.csharp:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Extensions
    name: Extensions
    href: Bodu.Collections.Extensions.html
  spec.vb:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Extensions
    name: Extensions
    href: Bodu.Collections.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect*
  commentId: Overload:Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect
  href: Bodu.Collections.Extensions.IEnumerableExtensions.html#Bodu_Collections_Extensions_IEnumerableExtensions_RecursiveSelect_System_Collections_IEnumerable_System_Func_System_Object_System_Collections_IEnumerable__
  name: RecursiveSelect
  nameWithType: IEnumerableExtensions.RecursiveSelect
  fullName: Bodu.Collections.Extensions.IEnumerableExtensions.RecursiveSelect
- uid: System.Func{System.Object,System.Collections.IEnumerable}
  commentId: T:System.Func{System.Object,System.Collections.IEnumerable}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<object, IEnumerable>
  nameWithType: Func<object, IEnumerable>
  fullName: System.Func<object, System.Collections.IEnumerable>
  nameWithType.vb: Func(Of Object, IEnumerable)
  fullName.vb: System.Func(Of Object, System.Collections.IEnumerable)
  name.vb: Func(Of Object, IEnumerable)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}
  commentId: T:System.Func{System.Object,System.Collections.Generic.IEnumerable{System.Object}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<object, IEnumerable<object>>
  nameWithType: Func<object, IEnumerable<object>>
  fullName: System.Func<object, System.Collections.Generic.IEnumerable<object>>
  nameWithType.vb: Func(Of Object, IEnumerable(Of Object))
  fullName.vb: System.Func(Of Object, System.Collections.Generic.IEnumerable(Of Object))
  name.vb: Func(Of Object, IEnumerable(Of Object))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  - name: )
- uid: System.Func{System.Object,System.Object}
  commentId: T:System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<object, object>
  nameWithType: Func<object, object>
  fullName: System.Func<object, object>
  nameWithType.vb: Func(Of Object, Object)
  fullName.vb: System.Func(Of Object, Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Func{System.Object,System.Int32,System.Object}
  commentId: T:System.Func{System.Object,System.Int32,System.Object}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<object, int, object>
  nameWithType: Func<object, int, object>
  fullName: System.Func<object, int, object>
  nameWithType.vb: Func(Of Object, Integer, Object)
  fullName.vb: System.Func(Of Object, Integer, Object)
  name.vb: Func(Of Object, Integer, Object)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{System.Object,System.Int32,System.Int32,System.Object}
  commentId: T:System.Func{System.Object,System.Int32,System.Int32,System.Object}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<object, int, int, object>
  nameWithType: Func<object, int, int, object>
  fullName: System.Func<object, int, int, object>
  nameWithType.vb: Func(Of Object, Integer, Integer, Object)
  fullName.vb: System.Func(Of Object, Integer, Integer, Object)
  name.vb: Func(Of Object, Integer, Integer, Object)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Bodu.Collections.Extensions.RecursiveSelectControl
  commentId: T:Bodu.Collections.Extensions.RecursiveSelectControl
  parent: Bodu.Collections.Extensions
  href: Bodu.Collections.Extensions.RecursiveSelectControl.html
  name: RecursiveSelectControl
  nameWithType: RecursiveSelectControl
  fullName: Bodu.Collections.Extensions.RecursiveSelectControl
- uid: System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl}
  commentId: T:System.Func{System.Object,Bodu.Collections.Extensions.RecursiveSelectControl}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<object, RecursiveSelectControl>
  nameWithType: Func<object, RecursiveSelectControl>
  fullName: System.Func<object, Bodu.Collections.Extensions.RecursiveSelectControl>
  nameWithType.vb: Func(Of Object, RecursiveSelectControl)
  fullName.vb: System.Func(Of Object, Bodu.Collections.Extensions.RecursiveSelectControl)
  name.vb: Func(Of Object, RecursiveSelectControl)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Bodu.Collections.Extensions.RecursiveSelectControl
    name: RecursiveSelectControl
    href: Bodu.Collections.Extensions.RecursiveSelectControl.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Bodu.Collections.Extensions.RecursiveSelectControl
    name: RecursiveSelectControl
    href: Bodu.Collections.Extensions.RecursiveSelectControl.html
  - name: )
