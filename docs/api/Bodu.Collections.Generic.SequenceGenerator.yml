### YamlMime:ManagedReference
items:
- uid: Bodu.Collections.Generic.SequenceGenerator
  commentId: T:Bodu.Collections.Generic.SequenceGenerator
  id: SequenceGenerator
  parent: Bodu.Collections.Generic
  children:
  - Bodu.Collections.Generic.SequenceGenerator.Factory``1(System.Func{System.Collections.Generic.IEnumerator{``0}})
  - Bodu.Collections.Generic.SequenceGenerator.NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,System.Int32,``0})
  - Bodu.Collections.Generic.SequenceGenerator.NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})
  - Bodu.Collections.Generic.SequenceGenerator.NextWhile``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})
  - Bodu.Collections.Generic.SequenceGenerator.Range(System.Int32,System.Int32)
  - Bodu.Collections.Generic.SequenceGenerator.Range(System.Int32,System.Int32,System.Int32)
  - Bodu.Collections.Generic.SequenceGenerator.Range(System.Int64,System.Int32)
  - Bodu.Collections.Generic.SequenceGenerator.Repeat``1(``0)
  - Bodu.Collections.Generic.SequenceGenerator.Repeat``1(``0,System.Int32)
  langs:
  - csharp
  - vb
  name: SequenceGenerator
  nameWithType: SequenceGenerator
  fullName: Bodu.Collections.Generic.SequenceGenerator
  type: Class
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Repeat.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: SequenceGenerator
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Repeat.cs
    startLine: 8
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  example: []
  syntax:
    content: public static class SequenceGenerator
    content.vb: Public Module SequenceGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Bodu.Collections.Generic.SequenceGenerator.Factory``1(System.Func{System.Collections.Generic.IEnumerator{``0}})
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.Factory``1(System.Func{System.Collections.Generic.IEnumerator{``0}})
  id: Factory``1(System.Func{System.Collections.Generic.IEnumerator{``0}})
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: Factory<TResult>(Func<IEnumerator<TResult>>)
  nameWithType: SequenceGenerator.Factory<TResult>(Func<IEnumerator<TResult>>)
  fullName: Bodu.Collections.Generic.SequenceGenerator.Factory<TResult>(System.Func<System.Collections.Generic.IEnumerator<TResult>>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Factory.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Factory
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Factory.cs
    startLine: 20
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Creates a sequence from a custom enumerator factory.
  remarks: This method is useful when integrating external or imperative enumerators into a deferred LINQ-style pipeline.
  example: []
  syntax:
    content: public static IEnumerable<TResult> Factory<TResult>(Func<IEnumerator<TResult>> enumeratorFactory)
    parameters:
    - id: enumeratorFactory
      type: System.Func{System.Collections.Generic.IEnumerator{{TResult}}}
      description: A delegate that produces a new <xref href="System.Collections.Generic.IEnumerator%601" data-throw-if-not-resolved="false"></xref> each time the sequence is iterated.
    typeParameters:
    - id: TResult
      description: The type of elements in the generated sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An enumerable sequence generated from the custom enumerator.
    content.vb: Public Shared Function Factory(Of TResult)(enumeratorFactory As Func(Of IEnumerator(Of TResult))) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.SequenceGenerator.Factory*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">enumeratorFactory</code> is <code>null</code>.
  nameWithType.vb: SequenceGenerator.Factory(Of TResult)(Func(Of IEnumerator(Of TResult)))
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.Factory(Of TResult)(System.Func(Of System.Collections.Generic.IEnumerator(Of TResult)))
  name.vb: Factory(Of TResult)(Func(Of IEnumerator(Of TResult)))
- uid: Bodu.Collections.Generic.SequenceGenerator.NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})
  id: NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: NextWhile<TResult>(TResult, Func<TResult, bool>, Func<TResult, TResult>)
  nameWithType: SequenceGenerator.NextWhile<TResult>(TResult, Func<TResult, bool>, Func<TResult, TResult>)
  fullName: Bodu.Collections.Generic.SequenceGenerator.NextWhile<TResult>(TResult, System.Func<TResult, bool>, System.Func<TResult, TResult>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.NextWhile.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: NextWhile
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.NextWhile.cs
    startLine: 25
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a sequence by repeatedly transforming a value while a condition remains true.
  remarks: >-
    This method yields a lazy sequence where the next value is generated by applying <code class="paramref">resultSelector</code> to the

    current one, provided that <code class="paramref">conditionHandler</code> evaluates to true.
  example: []
  syntax:
    content: public static IEnumerable<TResult> NextWhile<TResult>(TResult initialValue, Func<TResult, bool> conditionHandler, Func<TResult, TResult> resultSelector)
    parameters:
    - id: initialValue
      type: '{TResult}'
      description: The starting value of the sequence.
    - id: conditionHandler
      type: System.Func{{TResult},System.Boolean}
      description: A function that determines whether the sequence should continue, based on the current value.
    - id: resultSelector
      type: System.Func{{TResult},{TResult}}
      description: A function that computes the next value in the sequence from the current value.
    typeParameters:
    - id: TResult
      description: The type of elements in the generated sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An enumerable sequence generated by applying the transformation while the condition is met.
    content.vb: Public Shared Function NextWhile(Of TResult)(initialValue As TResult, conditionHandler As Func(Of TResult, Boolean), resultSelector As Func(Of TResult, TResult)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.SequenceGenerator.NextWhile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">conditionHandler</code> or <code class="paramref">resultSelector</code> is <code>null</code>.
  nameWithType.vb: SequenceGenerator.NextWhile(Of TResult)(TResult, Func(Of TResult, Boolean), Func(Of TResult, TResult))
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.NextWhile(Of TResult)(TResult, System.Func(Of TResult, Boolean), System.Func(Of TResult, TResult))
  name.vb: NextWhile(Of TResult)(TResult, Func(Of TResult, Boolean), Func(Of TResult, TResult))
- uid: Bodu.Collections.Generic.SequenceGenerator.NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,System.Int32,``0})
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,System.Int32,``0})
  id: NextWhile``1(``0,System.Func{``0,System.Boolean},System.Func{``0,System.Int32,``0})
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: NextWhile<TResult>(TResult, Func<TResult, bool>, Func<TResult, int, TResult>)
  nameWithType: SequenceGenerator.NextWhile<TResult>(TResult, Func<TResult, bool>, Func<TResult, int, TResult>)
  fullName: Bodu.Collections.Generic.SequenceGenerator.NextWhile<TResult>(TResult, System.Func<TResult, bool>, System.Func<TResult, int, TResult>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.NextWhile.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: NextWhile
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.NextWhile.cs
    startLine: 58
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a sequence by repeatedly transforming a value while a condition remains true, providing the current index to each transformation.
  remarks: This overload allows the transformation to depend on the iteration index.
  example: []
  syntax:
    content: public static IEnumerable<TResult> NextWhile<TResult>(TResult initialValue, Func<TResult, bool> conditionHandler, Func<TResult, int, TResult> resultSelector)
    parameters:
    - id: initialValue
      type: '{TResult}'
      description: The initial value of the sequence.
    - id: conditionHandler
      type: System.Func{{TResult},System.Boolean}
      description: A function that determines whether the sequence should continue based on the current value.
    - id: resultSelector
      type: System.Func{{TResult},System.Int32,{TResult}}
      description: A function that computes the next value based on the current value and its zero-based index in the sequence.
    typeParameters:
    - id: TResult
      description: The type of elements in the generated sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An enumerable sequence generated by applying the transformation while the condition is met.
    content.vb: Public Shared Function NextWhile(Of TResult)(initialValue As TResult, conditionHandler As Func(Of TResult, Boolean), resultSelector As Func(Of TResult, Integer, TResult)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.SequenceGenerator.NextWhile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">conditionHandler</code> or <code class="paramref">resultSelector</code> is <code>null</code>.
  nameWithType.vb: SequenceGenerator.NextWhile(Of TResult)(TResult, Func(Of TResult, Boolean), Func(Of TResult, Integer, TResult))
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.NextWhile(Of TResult)(TResult, System.Func(Of TResult, Boolean), System.Func(Of TResult, Integer, TResult))
  name.vb: NextWhile(Of TResult)(TResult, Func(Of TResult, Boolean), Func(Of TResult, Integer, TResult))
- uid: Bodu.Collections.Generic.SequenceGenerator.NextWhile``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.NextWhile``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})
  id: NextWhile``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: NextWhile<TState, TResult>(TState, Func<TState, bool>, Func<TState, TState>, Func<TState, TResult>)
  nameWithType: SequenceGenerator.NextWhile<TState, TResult>(TState, Func<TState, bool>, Func<TState, TState>, Func<TState, TResult>)
  fullName: Bodu.Collections.Generic.SequenceGenerator.NextWhile<TState, TResult>(TState, System.Func<TState, bool>, System.Func<TState, TState>, System.Func<TState, TResult>)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.NextWhile.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: NextWhile
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.NextWhile.cs
    startLine: 93
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a sequence by transforming a custom state object while a condition remains true.
  remarks: Use this overload to generate sequences where multiple values must be tracked (e.g., multiple counters, accumulators, etc.).
  example: []
  syntax:
    content: public static IEnumerable<TResult> NextWhile<TState, TResult>(TState initialState, Func<TState, bool> conditionHandler, Func<TState, TState> iterateFunction, Func<TState, TResult> resultSelector)
    parameters:
    - id: initialState
      type: '{TState}'
      description: The initial state used to generate the sequence.
    - id: conditionHandler
      type: System.Func{{TState},System.Boolean}
      description: A predicate that determines whether the sequence should continue based on the current state.
    - id: iterateFunction
      type: System.Func{{TState},{TState}}
      description: A function that computes the next state from the current state.
    - id: resultSelector
      type: System.Func{{TState},{TResult}}
      description: A function that projects the current state into a sequence value.
    typeParameters:
    - id: TState
      description: The type of the internal state object.
    - id: TResult
      description: The type of the elements in the generated sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An enumerable sequence generated by iterating the state transformation while the condition is met.
    content.vb: Public Shared Function NextWhile(Of TState, TResult)(initialState As TState, conditionHandler As Func(Of TState, Boolean), iterateFunction As Func(Of TState, TState), resultSelector As Func(Of TState, TResult)) As IEnumerable(Of TResult)
  overload: Bodu.Collections.Generic.SequenceGenerator.NextWhile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">conditionHandler</code>, <code class="paramref">iterateFunction</code>, or <code class="paramref">resultSelector</code> is <code>null</code>.
  nameWithType.vb: SequenceGenerator.NextWhile(Of TState, TResult)(TState, Func(Of TState, Boolean), Func(Of TState, TState), Func(Of TState, TResult))
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.NextWhile(Of TState, TResult)(TState, System.Func(Of TState, Boolean), System.Func(Of TState, TState), System.Func(Of TState, TResult))
  name.vb: NextWhile(Of TState, TResult)(TState, Func(Of TState, Boolean), Func(Of TState, TState), Func(Of TState, TResult))
- uid: Bodu.Collections.Generic.SequenceGenerator.Range(System.Int32,System.Int32)
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: Range(int, int)
  nameWithType: SequenceGenerator.Range(int, int)
  fullName: Bodu.Collections.Generic.SequenceGenerator.Range(int, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Range.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Range
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Range.cs
    startLine: 17
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a sequence of integers from <code class="paramref">start</code> to <code class="paramref">stop</code>, inclusive.
  remarks: If <code class="paramref">start</code> is greater than <code class="paramref">stop</code>, the sequence will decrement.
  example: []
  syntax:
    content: public static IEnumerable<int> Range(int start, int stop)
    parameters:
    - id: start
      type: System.Int32
      description: The first value in the sequence.
    - id: stop
      type: System.Int32
      description: The final value in the sequence, included in the result.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A sequence of consecutive integers.
    content.vb: Public Shared Function Range(start As Integer, [stop] As Integer) As IEnumerable(Of Integer)
  overload: Bodu.Collections.Generic.SequenceGenerator.Range*
  nameWithType.vb: SequenceGenerator.Range(Integer, Integer)
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.Range(Integer, Integer)
  name.vb: Range(Integer, Integer)
- uid: Bodu.Collections.Generic.SequenceGenerator.Range(System.Int32,System.Int32,System.Int32)
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.Range(System.Int32,System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32,System.Int32)
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: Range(int, int, int)
  nameWithType: SequenceGenerator.Range(int, int, int)
  fullName: Bodu.Collections.Generic.SequenceGenerator.Range(int, int, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Range.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Range
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Range.cs
    startLine: 34
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a sequence of integers from <code class="paramref">start</code> to <code class="paramref">stop</code> using a specified step value.
  remarks: >-
    This method supports ascending, descending, and constant sequences depending on the sign of <code class="paramref">step</code>. If

    <code class="paramref">step</code> is zero, the sequence yields <code class="paramref">start</code> indefinitely. The method safely handles edge

    cases near <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref> and <xref href="System.Int32.MinValue" data-throw-if-not-resolved="false"></xref> by terminating if overflow would occur.
  example: []
  syntax:
    content: public static IEnumerable<int> Range(int start, int stop, int step)
    parameters:
    - id: start
      type: System.Int32
      description: The initial value in the sequence.
    - id: stop
      type: System.Int32
      description: The endpoint of the sequence, included if reached by stepping.
    - id: step
      type: System.Int32
      description: The amount to increment or decrement per step. If zero, an infinite sequence of <code class="paramref">start</code> is returned.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A sequence of integers spaced by <code class="paramref">step</code> units.
    content.vb: Public Shared Function Range(start As Integer, [stop] As Integer, [step] As Integer) As IEnumerable(Of Integer)
  overload: Bodu.Collections.Generic.SequenceGenerator.Range*
  nameWithType.vb: SequenceGenerator.Range(Integer, Integer, Integer)
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.Range(Integer, Integer, Integer)
  name.vb: Range(Integer, Integer, Integer)
- uid: Bodu.Collections.Generic.SequenceGenerator.Range(System.Int64,System.Int32)
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.Range(System.Int64,System.Int32)
  id: Range(System.Int64,System.Int32)
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: Range(long, int)
  nameWithType: SequenceGenerator.Range(long, int)
  fullName: Bodu.Collections.Generic.SequenceGenerator.Range(long, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Range.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Range
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Range.cs
    startLine: 67
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a fixed-length sequence of 64-bit integers starting at <code class="paramref">start</code>.
  remarks: This method avoids producing values beyond the limits of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> to prevent overflow.
  example: []
  syntax:
    content: public static IEnumerable<long> Range(long start, int count)
    parameters:
    - id: start
      type: System.Int64
      description: The initial value in the sequence.
    - id: count
      type: System.Int32
      description: The number of elements to produce.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: A sequence of <code class="paramref">count</code> long values beginning at <code class="paramref">start</code>.
    content.vb: Public Shared Function Range(start As Long, count As Integer) As IEnumerable(Of Long)
  overload: Bodu.Collections.Generic.SequenceGenerator.Range*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">count</code> is negative, or when the range would overflow a 64-bit signed integer.
  nameWithType.vb: SequenceGenerator.Range(Long, Integer)
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.Range(Long, Integer)
  name.vb: Range(Long, Integer)
- uid: Bodu.Collections.Generic.SequenceGenerator.Repeat``1(``0)
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.Repeat``1(``0)
  id: Repeat``1(``0)
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: Repeat<T>(T)
  nameWithType: SequenceGenerator.Repeat<T>(T)
  fullName: Bodu.Collections.Generic.SequenceGenerator.Repeat<T>(T)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Repeat.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Repeat
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Repeat.cs
    startLine: 17
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates an infinite sequence repeating the specified value.
  remarks: This method yields the same value forever and is lazily evaluated.
  example: []
  syntax:
    content: public static IEnumerable<T> Repeat<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to repeat in the sequence.
    typeParameters:
    - id: T
      description: The type of the repeated value.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An infinite sequence of <code class="paramref">value</code>.
    content.vb: Public Shared Function Repeat(Of T)(value As T) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.SequenceGenerator.Repeat*
  nameWithType.vb: SequenceGenerator.Repeat(Of T)(T)
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.Repeat(Of T)(T)
  name.vb: Repeat(Of T)(T)
- uid: Bodu.Collections.Generic.SequenceGenerator.Repeat``1(``0,System.Int32)
  commentId: M:Bodu.Collections.Generic.SequenceGenerator.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: Bodu.Collections.Generic.SequenceGenerator
  langs:
  - csharp
  - vb
  name: Repeat<T>(T, int)
  nameWithType: SequenceGenerator.Repeat<T>(T, int)
  fullName: Bodu.Collections.Generic.SequenceGenerator.Repeat<T>(T, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Collections.Generic/SequenceGenerator.Repeat.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Repeat
    path: ../Bodu.Core/src/Collections.Generic/SequenceGenerator.Repeat.cs
    startLine: 31
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Collections.Generic
  summary: Generates a finite sequence repeating the specified value a given number of times.
  example: []
  syntax:
    content: public static IEnumerable<T> Repeat<T>(T value, int count)
    parameters:
    - id: value
      type: '{T}'
      description: The value to repeat.
    - id: count
      type: System.Int32
      description: The number of repetitions.
    typeParameters:
    - id: T
      description: The type of the repeated value.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A sequence of <code class="paramref">value</code> repeated <code class="paramref">count</code> times.
    content.vb: Public Shared Function Repeat(Of T)(value As T, count As Integer) As IEnumerable(Of T)
  overload: Bodu.Collections.Generic.SequenceGenerator.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">count</code> is negative.
  nameWithType.vb: SequenceGenerator.Repeat(Of T)(T, Integer)
  fullName.vb: Bodu.Collections.Generic.SequenceGenerator.Repeat(Of T)(T, Integer)
  name.vb: Repeat(Of T)(T, Integer)
references:
- uid: Bodu.Collections.Generic
  commentId: N:Bodu.Collections.Generic
  href: Bodu.html
  name: Bodu.Collections.Generic
  nameWithType: Bodu.Collections.Generic
  fullName: Bodu.Collections.Generic
  spec.csharp:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
  spec.vb:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Collections
    name: Collections
    href: Bodu.Collections.html
  - name: .
  - uid: Bodu.Collections.Generic
    name: Generic
    href: Bodu.Collections.Generic.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Bodu.Collections.Generic.SequenceGenerator.Factory*
  commentId: Overload:Bodu.Collections.Generic.SequenceGenerator.Factory
  href: Bodu.Collections.Generic.SequenceGenerator.html#Bodu_Collections_Generic_SequenceGenerator_Factory__1_System_Func_System_Collections_Generic_IEnumerator___0___
  name: Factory
  nameWithType: SequenceGenerator.Factory
  fullName: Bodu.Collections.Generic.SequenceGenerator.Factory
- uid: System.Func{System.Collections.Generic.IEnumerator{{TResult}}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerator{``0}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<IEnumerator<TResult>>
  nameWithType: Func<IEnumerator<TResult>>
  fullName: System.Func<System.Collections.Generic.IEnumerator<TResult>>
  nameWithType.vb: Func(Of IEnumerator(Of TResult))
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerator(Of TResult))
  name.vb: Func(Of IEnumerator(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Bodu.Collections.Generic.SequenceGenerator.NextWhile*
  commentId: Overload:Bodu.Collections.Generic.SequenceGenerator.NextWhile
  href: Bodu.Collections.Generic.SequenceGenerator.html#Bodu_Collections_Generic_SequenceGenerator_NextWhile__1___0_System_Func___0_System_Boolean__System_Func___0___0__
  name: NextWhile
  nameWithType: SequenceGenerator.NextWhile
  fullName: Bodu.Collections.Generic.SequenceGenerator.NextWhile
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{{TResult},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TResult, bool>
  nameWithType: Func<TResult, bool>
  fullName: System.Func<TResult, bool>
  nameWithType.vb: Func(Of TResult, Boolean)
  fullName.vb: System.Func(Of TResult, Boolean)
  name.vb: Func(Of TResult, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TResult
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{{TResult},{TResult}}
  commentId: T:System.Func{``0,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TResult, TResult>
  nameWithType: Func<TResult, TResult>
  fullName: System.Func<TResult, TResult>
  nameWithType.vb: Func(Of TResult, TResult)
  fullName.vb: System.Func(Of TResult, TResult)
  name.vb: Func(Of TResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TResult
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TResult},System.Int32,{TResult}}
  commentId: T:System.Func{``0,System.Int32,``0}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TResult, int, TResult>
  nameWithType: Func<TResult, int, TResult>
  fullName: System.Func<TResult, int, TResult>
  nameWithType.vb: Func(Of TResult, Integer, TResult)
  fullName.vb: System.Func(Of TResult, Integer, TResult)
  name.vb: Func(Of TResult, Integer, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TResult
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Func{{TState},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TState, bool>
  nameWithType: Func<TState, bool>
  fullName: System.Func<TState, bool>
  nameWithType.vb: Func(Of TState, Boolean)
  fullName.vb: System.Func(Of TState, Boolean)
  name.vb: Func(Of TState, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TState
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TState
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{{TState},{TState}}
  commentId: T:System.Func{``0,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TState, TState>
  nameWithType: Func<TState, TState>
  fullName: System.Func<TState, TState>
  nameWithType.vb: Func(Of TState, TState)
  fullName.vb: System.Func(Of TState, TState)
  name.vb: Func(Of TState, TState)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TState
  - name: ','
  - name: " "
  - name: TState
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TState
  - name: ','
  - name: " "
  - name: TState
  - name: )
- uid: System.Func{{TState},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TState, TResult>
  nameWithType: Func<TState, TResult>
  fullName: System.Func<TState, TResult>
  nameWithType.vb: Func(Of TState, TResult)
  fullName.vb: System.Func(Of TState, TResult)
  name.vb: Func(Of TState, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TState
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TState
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TState
  commentId: '!:TState'
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Bodu.Collections.Generic.SequenceGenerator.Range*
  commentId: Overload:Bodu.Collections.Generic.SequenceGenerator.Range
  href: Bodu.Collections.Generic.SequenceGenerator.html#Bodu_Collections_Generic_SequenceGenerator_Range_System_Int32_System_Int32_
  name: Range
  nameWithType: SequenceGenerator.Range
  fullName: Bodu.Collections.Generic.SequenceGenerator.Range
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<int>
  nameWithType: IEnumerable<int>
  fullName: System.Collections.Generic.IEnumerable<int>
  nameWithType.vb: IEnumerable(Of Integer)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Integer)
  name.vb: IEnumerable(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32.maxvalue
  name: MaxValue
  nameWithType: int.MaxValue
  fullName: int.MaxValue
  nameWithType.vb: Integer.MaxValue
  fullName.vb: Integer.MaxValue
- uid: System.Int32.MinValue
  commentId: F:System.Int32.MinValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32.minvalue
  name: MinValue
  nameWithType: int.MinValue
  fullName: int.MinValue
  nameWithType.vb: Integer.MinValue
  fullName.vb: Integer.MinValue
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<long>
  nameWithType: IEnumerable<long>
  fullName: System.Collections.Generic.IEnumerable<long>
  nameWithType.vb: IEnumerable(Of Long)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Long)
  name.vb: IEnumerable(Of Long)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: Bodu.Collections.Generic.SequenceGenerator.Repeat*
  commentId: Overload:Bodu.Collections.Generic.SequenceGenerator.Repeat
  href: Bodu.Collections.Generic.SequenceGenerator.html#Bodu_Collections_Generic_SequenceGenerator_Repeat__1___0_
  name: Repeat
  nameWithType: SequenceGenerator.Repeat
  fullName: Bodu.Collections.Generic.SequenceGenerator.Repeat
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
