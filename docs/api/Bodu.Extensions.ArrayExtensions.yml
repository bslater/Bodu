### YamlMime:ManagedReference
items:
- uid: Bodu.Extensions.ArrayExtensions
  commentId: T:Bodu.Extensions.ArrayExtensions
  id: ArrayExtensions
  parent: Bodu.Extensions
  children:
  - Bodu.Extensions.ArrayExtensions.Clear(System.Array)
  - Bodu.Extensions.ArrayExtensions.Clear(System.Array,System.Int32)
  - Bodu.Extensions.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)
  - Bodu.Extensions.ArrayExtensions.Clear``1(``0[])
  - Bodu.Extensions.ArrayExtensions.Clear``1(``0[],System.Int32)
  - Bodu.Extensions.ArrayExtensions.Clear``1(``0[],System.Int32,System.Int32)
  - Bodu.Extensions.ArrayExtensions.Copy``1(``0[])
  - Bodu.Extensions.ArrayExtensions.SliceInternal``1(``0[],System.Int32,System.Int32)
  - Bodu.Extensions.ArrayExtensions.Slice``1(``0[],System.Int32)
  - Bodu.Extensions.ArrayExtensions.Slice``1(``0[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: ArrayExtensions
  nameWithType: ArrayExtensions
  fullName: Bodu.Extensions.ArrayExtensions
  type: Class
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: ArrayExtensions
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
    startLine: 2
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  example: []
  syntax:
    content: public static class ArrayExtensions
    content.vb: Public Module ArrayExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Bodu.Extensions.ArrayExtensions.Clear``1(``0[])
  commentId: M:Bodu.Extensions.ArrayExtensions.Clear``1(``0[])
  id: Clear``1(``0[])
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear<T>(T[])
  nameWithType: ArrayExtensions.Clear<T>(T[])
  fullName: Bodu.Extensions.ArrayExtensions.Clear<T>(T[])
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Clear
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
    startLine: 16
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: Sets all elements in a one-dimensional array to the default value of the element type.
  example: []
  syntax:
    content: public static void Clear<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional array to clear.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: Public Shared Sub Clear(Of T)(array As T())
  overload: Bodu.Extensions.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: ArrayExtensions.Clear(Of T)(T())
  fullName.vb: Bodu.Extensions.ArrayExtensions.Clear(Of T)(T())
  name.vb: Clear(Of T)(T())
- uid: Bodu.Extensions.ArrayExtensions.Clear``1(``0[],System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.Clear``1(``0[],System.Int32)
  id: Clear``1(``0[],System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear<T>(T[], int)
  nameWithType: ArrayExtensions.Clear<T>(T[], int)
  fullName: Bodu.Extensions.ArrayExtensions.Clear<T>(T[], int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Clear
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
    startLine: 37
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: >-
    Sets all elements in a one-dimensional array to the default value of the element type,

    starting from the specified index to the end of the array.
  remarks: >-
    This method clears elements starting from <code class="paramref">index</code> to the end of the

    array. The number of elements cleared is <code>array.Length - index</code>.
  example: []
  syntax:
    content: public static void Clear<T>(this T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional array to clear.
    - id: index
      type: System.Int32
      description: The zero-based index at which to begin clearing elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: Public Shared Sub Clear(Of T)(array As T(), index As Integer)
  overload: Bodu.Extensions.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code class="paramref">index</code> is less than 0 or greater than the length of <code class="paramref">array</code>.
  nameWithType.vb: ArrayExtensions.Clear(Of T)(T(), Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.Clear(Of T)(T(), Integer)
  name.vb: Clear(Of T)(T(), Integer)
- uid: Bodu.Extensions.ArrayExtensions.Clear``1(``0[],System.Int32,System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.Clear``1(``0[],System.Int32,System.Int32)
  id: Clear``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear<T>(T[], int, int)
  nameWithType: ArrayExtensions.Clear<T>(T[], int, int)
  fullName: Bodu.Extensions.ArrayExtensions.Clear<T>(T[], int, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Clear
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
    startLine: 61
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: >-
    Sets a specified number of elements in a one-dimensional array to the default value of

    the element type, starting from a given index.
  remarks: This method clears exactly <code class="paramref">count</code> elements starting at <code class="paramref">index</code>.
  example: []
  syntax:
    content: public static void Clear<T>(this T[] array, int index, int count)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional array to clear.
    - id: index
      type: System.Int32
      description: The zero-based index at which to begin clearing elements.
    - id: count
      type: System.Int32
      description: The number of elements to clear.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    content.vb: Public Shared Sub Clear(Of T)(array As T(), index As Integer, count As Integer)
  overload: Bodu.Extensions.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code class="paramref">index</code> is less than 0 or greater than the length of

      <code class="paramref">array</code>. <br />

      -or- <br /><code class="paramref">count</code> is less than 0 or extends beyond the end of the array.
  nameWithType.vb: ArrayExtensions.Clear(Of T)(T(), Integer, Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.Clear(Of T)(T(), Integer, Integer)
  name.vb: Clear(Of T)(T(), Integer, Integer)
- uid: Bodu.Extensions.ArrayExtensions.Clear(System.Array)
  commentId: M:Bodu.Extensions.ArrayExtensions.Clear(System.Array)
  id: Clear(System.Array)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear(Array)
  nameWithType: ArrayExtensions.Clear(Array)
  fullName: Bodu.Extensions.ArrayExtensions.Clear(System.Array)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Clear
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
    startLine: 79
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: Sets all elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to the default value of each element type.
  remarks: This method supports only single-dimensional, zero-based arrays.
  example: []
  syntax:
    content: public static void Clear(this Array array)
    parameters:
    - id: array
      type: System.Array
      description: The array whose elements to clear.
    content.vb: Public Shared Sub Clear(array As Array)
  overload: Bodu.Extensions.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code class="paramref">array</code> is not a single-dimensional array. <br />

      -or- <br /><code class="paramref">array</code> does not have a zero-based index.
- uid: Bodu.Extensions.ArrayExtensions.Clear(System.Array,System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.Clear(System.Array,System.Int32)
  id: Clear(System.Array,System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear(Array, int)
  nameWithType: ArrayExtensions.Clear(Array, int)
  fullName: Bodu.Extensions.ArrayExtensions.Clear(System.Array, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Clear
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
    startLine: 102
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: >-
    Sets all elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to the default value of each element type,

    starting from the specified index to the end of the array.
  remarks: Clears elements from <code class="paramref">index</code> to the end of the array.
  example: []
  syntax:
    content: public static void Clear(this Array array, int index)
    parameters:
    - id: array
      type: System.Array
      description: The array whose elements to clear.
    - id: index
      type: System.Int32
      description: The zero-based index at which to begin clearing elements.
    content.vb: Public Shared Sub Clear(array As Array, index As Integer)
  overload: Bodu.Extensions.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code class="paramref">array</code> is not a single-dimensional array. <br />

      -or- <br /><code class="paramref">array</code> does not have a zero-based index.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code class="paramref">index</code> is less than 0 or greater than the length of <code class="paramref">array</code>.
  nameWithType.vb: ArrayExtensions.Clear(Array, Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.Clear(System.Array, Integer)
  name.vb: Clear(Array, Integer)
- uid: Bodu.Extensions.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Clear(Array, int, int)
  nameWithType: ArrayExtensions.Clear(Array, int, int)
  fullName: Bodu.Extensions.ArrayExtensions.Clear(System.Array, int, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Clear
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Clear.cs
    startLine: 129
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: >-
    Sets a specified number of elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to the default value of

    each element type, starting from a given index.
  remarks: Clears <code class="paramref">count</code> elements starting at <code class="paramref">index</code>.
  example: []
  syntax:
    content: public static void Clear(this Array array, int index, int count)
    parameters:
    - id: array
      type: System.Array
      description: The array whose elements to clear.
    - id: index
      type: System.Int32
      description: The zero-based index at which to begin clearing elements.
    - id: count
      type: System.Int32
      description: The number of elements to clear.
    content.vb: Public Shared Sub Clear(array As Array, index As Integer, count As Integer)
  overload: Bodu.Extensions.ArrayExtensions.Clear*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code class="paramref">array</code> is not a single-dimensional array. <br />

      -or- <br /><code class="paramref">array</code> does not have a zero-based index.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code class="paramref">index</code> is less than 0 or greater than the length of

      <code class="paramref">array</code>. <br />

      -or- <br /><code class="paramref">count</code> is less than 0 or extends beyond the end of the array.
  nameWithType.vb: ArrayExtensions.Clear(Array, Integer, Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.Clear(System.Array, Integer, Integer)
  name.vb: Clear(Array, Integer, Integer)
- uid: Bodu.Extensions.ArrayExtensions.Copy``1(``0[])
  commentId: M:Bodu.Extensions.ArrayExtensions.Copy``1(``0[])
  id: Copy``1(``0[])
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Copy<T>(T[])
  nameWithType: ArrayExtensions.Copy<T>(T[])
  fullName: Bodu.Extensions.ArrayExtensions.Copy<T>(T[])
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Copy.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Copy
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Copy.cs
    startLine: 13
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: Creates a new array and copies all elements from the source array to the new array.
  example: []
  syntax:
    content: public static T[] Copy<T>(this T[] array)
    parameters:
    - id: array
      type: '{T}[]'
      description: The source array containing the elements to copy.
    typeParameters:
    - id: T
      description: The type of the elements in the array.
    return:
      type: '{T}[]'
      description: A new array containing all elements from the <code class="paramref">array</code>.
    content.vb: Public Shared Function Copy(Of T)(array As T()) As T()
  overload: Bodu.Extensions.ArrayExtensions.Copy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: ArrayExtensions.Copy(Of T)(T())
  fullName.vb: Bodu.Extensions.ArrayExtensions.Copy(Of T)(T())
  name.vb: Copy(Of T)(T())
- uid: Bodu.Extensions.ArrayExtensions.Slice``1(``0[],System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.Slice``1(``0[],System.Int32)
  id: Slice``1(``0[],System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Slice<T>(T[], int)
  nameWithType: ArrayExtensions.Slice<T>(T[], int)
  fullName: Bodu.Extensions.ArrayExtensions.Slice<T>(T[], int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Slice
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
    startLine: 15
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: Takes a slice of the specified array starting from a given index and extending to the end of the array.
  example: []
  syntax:
    content: public static T[] Slice<T>(this T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
      description: The source array containing the elements to slice.
    - id: index
      type: System.Int32
      description: The starting index in the source array from which the slice begins.
    typeParameters:
    - id: T
      description: The type of the elements in the array.
    return:
      type: '{T}[]'
      description: A new array containing elements from the <code class="paramref">array</code> starting from <code class="paramref">index</code> to the end.
    content.vb: Public Shared Function Slice(Of T)(array As T(), index As Integer) As T()
  overload: Bodu.Extensions.ArrayExtensions.Slice*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">index</code> is out of bounds.
  nameWithType.vb: ArrayExtensions.Slice(Of T)(T(), Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.Slice(Of T)(T(), Integer)
  name.vb: Slice(Of T)(T(), Integer)
- uid: Bodu.Extensions.ArrayExtensions.Slice``1(``0[],System.Int32,System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.Slice``1(``0[],System.Int32,System.Int32)
  id: Slice``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Slice<T>(T[], int, int)
  nameWithType: ArrayExtensions.Slice<T>(T[], int, int)
  fullName: Bodu.Extensions.ArrayExtensions.Slice<T>(T[], int, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: Slice
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
    startLine: 33
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: Takes a slice of the specified array starting from a given index and extending for a specified number of elements.
  example: []
  syntax:
    content: public static T[] Slice<T>(this T[] array, int index, int count)
    parameters:
    - id: array
      type: '{T}[]'
      description: The source array containing the elements to slice.
    - id: index
      type: System.Int32
      description: The starting index in the source array from which the slice begins.
    - id: count
      type: System.Int32
      description: The number of elements to include in the slice.
    typeParameters:
    - id: T
      description: The type of the elements in the array.
    return:
      type: '{T}[]'
      description: A new array containing the sliced elements from the <code class="paramref">array</code> starting at <code class="paramref">index</code>.
    content.vb: Public Shared Function Slice(Of T)(array As T(), index As Integer, count As Integer) As T()
  overload: Bodu.Extensions.ArrayExtensions.Slice*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">array</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when <code class="paramref">index</code> or <code class="paramref">count</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <code class="paramref">index</code> and <code class="paramref">count</code> describe an invalid range within <code class="paramref">array</code>.
  nameWithType.vb: ArrayExtensions.Slice(Of T)(T(), Integer, Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.Slice(Of T)(T(), Integer, Integer)
  name.vb: Slice(Of T)(T(), Integer, Integer)
- uid: Bodu.Extensions.ArrayExtensions.SliceInternal``1(``0[],System.Int32,System.Int32)
  commentId: M:Bodu.Extensions.ArrayExtensions.SliceInternal``1(``0[],System.Int32,System.Int32)
  id: SliceInternal``1(``0[],System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Bodu.Extensions.ArrayExtensions
  langs:
  - csharp
  - vb
  name: SliceInternal<T>(T[], int, int)
  nameWithType: ArrayExtensions.SliceInternal<T>(T[], int, int)
  fullName: Bodu.Extensions.ArrayExtensions.SliceInternal<T>(T[], int, int)
  type: Method
  source:
    remote:
      path: Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
      branch: master
      repo: https://github.com/bslater/Bodu.git
    id: SliceInternal
    path: ../Bodu.Core/src/Extensions/ArrayExtensions.Slice.cs
    startLine: 51
  assemblies:
  - Bodu.CoreLib
  namespace: Bodu.Extensions
  summary: >-
    Takes a slice of the specified array starting from a given index and extending for a specified number of elements. This method

    does not perform any validation checks (use with caution).
  remarks: This method is optimized and does not perform validation. Ensure the inputs are valid.
  example: []
  syntax:
    content: public static T[] SliceInternal<T>(this T[] array, int index, int count)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional array that contains the values to copy.
    - id: index
      type: System.Int32
      description: The starting index in the <code class="paramref">array</code> from which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy from the <code class="paramref">array</code>.
    typeParameters:
    - id: T
      description: The type of the elements in the array.
    return:
      type: '{T}[]'
      description: A new array containing the copied elements from the <code class="paramref">array</code> starting from <code class="paramref">index</code>.
    content.vb: Public Shared Function SliceInternal(Of T)(array As T(), index As Integer, count As Integer) As T()
  overload: Bodu.Extensions.ArrayExtensions.SliceInternal*
  nameWithType.vb: ArrayExtensions.SliceInternal(Of T)(T(), Integer, Integer)
  fullName.vb: Bodu.Extensions.ArrayExtensions.SliceInternal(Of T)(T(), Integer, Integer)
  name.vb: SliceInternal(Of T)(T(), Integer, Integer)
references:
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.array
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Bodu.Extensions
  commentId: N:Bodu.Extensions
  href: Bodu.html
  name: Bodu.Extensions
  nameWithType: Bodu.Extensions
  fullName: Bodu.Extensions
  spec.csharp:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Extensions
    name: Extensions
    href: Bodu.Extensions.html
  spec.vb:
  - uid: Bodu
    name: Bodu
    href: Bodu.html
  - name: .
  - uid: Bodu.Extensions
    name: Extensions
    href: Bodu.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Bodu.Extensions.ArrayExtensions.Clear*
  commentId: Overload:Bodu.Extensions.ArrayExtensions.Clear
  href: Bodu.Extensions.ArrayExtensions.html#Bodu_Extensions_ArrayExtensions_Clear__1___0___
  name: Clear
  nameWithType: ArrayExtensions.Clear
  fullName: Bodu.Extensions.ArrayExtensions.Clear
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Bodu.Extensions.ArrayExtensions.Copy*
  commentId: Overload:Bodu.Extensions.ArrayExtensions.Copy
  href: Bodu.Extensions.ArrayExtensions.html#Bodu_Extensions_ArrayExtensions_Copy__1___0___
  name: Copy
  nameWithType: ArrayExtensions.Copy
  fullName: Bodu.Extensions.ArrayExtensions.Copy
- uid: Bodu.Extensions.ArrayExtensions.Slice*
  commentId: Overload:Bodu.Extensions.ArrayExtensions.Slice
  href: Bodu.Extensions.ArrayExtensions.html#Bodu_Extensions_ArrayExtensions_Slice__1___0___System_Int32_
  name: Slice
  nameWithType: ArrayExtensions.Slice
  fullName: Bodu.Extensions.ArrayExtensions.Slice
- uid: Bodu.Extensions.ArrayExtensions.SliceInternal*
  commentId: Overload:Bodu.Extensions.ArrayExtensions.SliceInternal
  href: Bodu.Extensions.ArrayExtensions.html#Bodu_Extensions_ArrayExtensions_SliceInternal__1___0___System_Int32_System_Int32_
  name: SliceInternal
  nameWithType: ArrayExtensions.SliceInternal
  fullName: Bodu.Extensions.ArrayExtensions.SliceInternal
